{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/clean-blog/source/css/article.styl","path":"css/article.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/base.styl","path":"css/base.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/mixins.styl","path":"css/mixins.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/variables.styl","path":"css/variables.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/img/about-bg.jpg","path":"img/about-bg.jpg","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/img/home-bg.jpg","path":"img/home-bg.jpg","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"96b93cd6053cfc8f9245316754a9d794c3c1ac0a","modified":1486966423000},{"_id":"themes/clean-blog/LICENSE","hash":"8726b416df4f067cff579e859f05c4b594b8be09","modified":1486713054000},{"_id":"themes/clean-blog/README.md","hash":"c5c7b0fd01aa229304e7b00697517aaca51de577","modified":1486721475000},{"_id":"themes/clean-blog/_config.yml","hash":"c5724a28b3298af65d8dc3f1c92c003d8e3107e4","modified":1486952919000},{"_id":"source/_posts/JMeter-测试工具-入门.md","hash":"bc100c25ff61f4aa71158ec0aa23ff6ad6e0372f","modified":1486966534000},{"_id":"source/_posts/适合多层级调转-各种子模块引用返回保留上一次查询记录.md","hash":"ff1b8619395bae1df8abd4ea47a6aa906a57c2ff","modified":1486965944000},{"_id":"themes/clean-blog/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1486713054000},{"_id":"themes/clean-blog/.git/config","hash":"0037ed70f19e4933b19020ad514d8e9e049174f1","modified":1486713054000},{"_id":"source/_posts/.DS_Store","hash":"2f17da43ba7d8c2b7e557e49b0ffcc25d9d4bec9","modified":1486955937000},{"_id":"themes/clean-blog/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1486713045000},{"_id":"themes/clean-blog/.git/index","hash":"8f6c1dde19e1683fc8ffdf92ae561f6762f39176","modified":1486952621000},{"_id":"themes/clean-blog/.git/packed-refs","hash":"1dadbd4fdd53bbb7038fa2c7b3c71cd028c4ead4","modified":1486713054000},{"_id":"themes/clean-blog/languages/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1486713054000},{"_id":"themes/clean-blog/languages/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1486713054000},{"_id":"themes/clean-blog/languages/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1486713054000},{"_id":"themes/clean-blog/languages/fr.yml","hash":"e9e6f7cb362ebb7997f11027498a2748fe3bac95","modified":1486713054000},{"_id":"themes/clean-blog/languages/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1486713054000},{"_id":"themes/clean-blog/languages/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1486713054000},{"_id":"themes/clean-blog/languages/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1486713054000},{"_id":"themes/clean-blog/languages/pt.yml","hash":"1d0c3689eb32fe13f37f8f6f303af7624ebfbaf0","modified":1486713054000},{"_id":"themes/clean-blog/languages/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1486713054000},{"_id":"themes/clean-blog/languages/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1486713054000},{"_id":"themes/clean-blog/languages/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1486713054000},{"_id":"themes/clean-blog/layout/archive.ejs","hash":"ad0da72df13ce3566985bb390c2c9a9352cf4f07","modified":1486720858000},{"_id":"themes/clean-blog/layout/index.ejs","hash":"87995288ca6f95a04add641727aedd3f6afa55eb","modified":1486713054000},{"_id":"themes/clean-blog/layout/layout.ejs","hash":"da2f9018047924ddaf376aee5996c7ddc06cebc1","modified":1486713054000},{"_id":"themes/clean-blog/layout/page.ejs","hash":"38382e9bbeb6b8d2eafbd53fff2984111f524c1a","modified":1486713054000},{"_id":"themes/clean-blog/layout/post.ejs","hash":"38382e9bbeb6b8d2eafbd53fff2984111f524c1a","modified":1486713054000},{"_id":"source/_posts/images/.DS_Store","hash":"0b3aed86a5369792a6cc0e3fcf120cda6c56b58d","modified":1486955941000},{"_id":"themes/clean-blog/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1486713045000},{"_id":"themes/clean-blog/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1486713045000},{"_id":"themes/clean-blog/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1486713045000},{"_id":"themes/clean-blog/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1486713045000},{"_id":"themes/clean-blog/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1486713045000},{"_id":"themes/clean-blog/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1486713045000},{"_id":"themes/clean-blog/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1486713045000},{"_id":"themes/clean-blog/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1486713045000},{"_id":"themes/clean-blog/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1486713045000},{"_id":"themes/clean-blog/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1486713045000},{"_id":"themes/clean-blog/.git/logs/HEAD","hash":"1c514eb906ae36c0bcf335566a106e9776434d7a","modified":1486713054000},{"_id":"themes/clean-blog/layout/_partial/after-footer.ejs","hash":"80970a6cfbf9b1abe0c472636b321a9be08fdc43","modified":1486720822000},{"_id":"themes/clean-blog/layout/_partial/article-categories.ejs","hash":"5a0bf5a20f670621d8013c9b9d7976b45c8aa80f","modified":1486713054000},{"_id":"themes/clean-blog/layout/_partial/article-archive.ejs","hash":"3d8d98c6545b8332a6d6ed4f8b00327df03ea945","modified":1486713054000},{"_id":"themes/clean-blog/layout/_partial/article-full.ejs","hash":"8d63ce240bbcc850b5d438d1f45ad9441ac1c9cc","modified":1486713054000},{"_id":"themes/clean-blog/layout/_partial/article-index.ejs","hash":"e433df4e245e2d4c628052c6e59966563542d94d","modified":1486713054000},{"_id":"themes/clean-blog/layout/_partial/article-tags.ejs","hash":"6136434be09056c1466149cecb3cc2e80d107999","modified":1486713054000},{"_id":"themes/clean-blog/layout/_partial/comments.ejs","hash":"c60fae074b578dae26a612bd9eb9021f887c2851","modified":1486965712000},{"_id":"themes/clean-blog/layout/_partial/footer.ejs","hash":"d252fb1a41890e6481bb054f9cc4ceec3c0b0ed9","modified":1486713054000},{"_id":"themes/clean-blog/layout/_partial/gallery.ejs","hash":"21e4f28909f4a79ff7d9f10bdfef6a8cb11632bf","modified":1486713054000},{"_id":"themes/clean-blog/layout/_partial/google-analytics.ejs","hash":"4e6e8de9becea5a1636a4dcadcf7a10c06e2426e","modified":1486713054000},{"_id":"themes/clean-blog/layout/_partial/head.ejs","hash":"3a7eb32f2cc540746c9e11010a4513b832743d1e","modified":1486713054000},{"_id":"themes/clean-blog/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1486713054000},{"_id":"themes/clean-blog/layout/_partial/menu.ejs","hash":"ba299316400499e9ede154e9627cafb7ce411888","modified":1486713054000},{"_id":"themes/clean-blog/source/css/article.styl","hash":"f5294d7a3d6127fcb287de3ff0c12aebb1766c7b","modified":1486713054000},{"_id":"themes/clean-blog/source/css/base.styl","hash":"f0a6fcf58fe515e1359acde0ed34081f580ec7a3","modified":1486713054000},{"_id":"themes/clean-blog/source/css/mixins.styl","hash":"892f55e8a71f2e23a52e48e217dad3303bbad913","modified":1486713054000},{"_id":"themes/clean-blog/source/css/style.styl","hash":"c40dc495a41007d21c59f342ee42b2d31d7b5ff4","modified":1486713054000},{"_id":"themes/clean-blog/source/css/variables.styl","hash":"cd82df5ca8dfbcfec12d833f01adfac00878e835","modified":1486713054000},{"_id":"themes/clean-blog/source/img/about-bg.jpg","hash":"d39126a6456f2bac0169d1779304725f179c9900","modified":1486713054000},{"_id":"themes/clean-blog/.git/objects/pack/pack-150961354dcaf41617990f9a9d18fb969ec0b9fb.idx","hash":"32e5daf443ca079417d364b3ef3a4144baae432b","modified":1486713054000},{"_id":"themes/clean-blog/.git/refs/heads/master","hash":"cce37529c01e70f25e6266bf6fb91c4c88b2f9fb","modified":1486713054000},{"_id":"themes/clean-blog/source/img/home-bg.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1486713054000},{"_id":"themes/clean-blog/.git/logs/refs/heads/master","hash":"1c514eb906ae36c0bcf335566a106e9776434d7a","modified":1486713054000},{"_id":"themes/clean-blog/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1486713054000},{"_id":"themes/clean-blog/source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1486713054000},{"_id":"source/_posts/images/jmeter/05067694-C406-4261-B40F-081A9CF60879.png","hash":"14000f25d06858d9e5158a245dbbff497e622216","modified":1486955536000},{"_id":"source/_posts/images/jmeter/E9F57B0D-DD8F-4DA9-8DD9-51C96A325669.png","hash":"878941111363ccd8efe5abab7c339523e3027409","modified":1486955536000},{"_id":"source/_posts/images/jmeter/69124311-7331-472F-B9CB-19D667B74D7E.png","hash":"9ecf34cb197df39863a8632c6ffeb2e3b5034a8f","modified":1486955536000},{"_id":"source/_posts/images/jmeter/76DDFAC0-EDB8-4378-A370-B0EAEBCABAEC.png","hash":"6060dac96f9d2ec5f0d00472e53a2ba621985ef1","modified":1486955536000},{"_id":"source/_posts/images/jmeter/43CEA00E-37B1-4DE0-A382-1E791A624BB4.png","hash":"230285e43a704f700d81f843d6ba4ea4c19e11db","modified":1486955536000},{"_id":"themes/clean-blog/.git/logs/refs/remotes/origin/HEAD","hash":"1c514eb906ae36c0bcf335566a106e9776434d7a","modified":1486713054000},{"_id":"source/_posts/images/jmeter/D219EB49-D5DB-4C1C-B6C5-827A36B0A6DB.png","hash":"e3bff776b3dddcd0063caf910e5a6e76e8226e10","modified":1486955536000},{"_id":"source/_posts/images/jmeter/D1658BF8-BF4D-432F-B681-3403C4D0A1C1.png","hash":"5d5edff2f97ee1ca6699253e4f57727f4ae45775","modified":1486955536000},{"_id":"source/_posts/images/jmeter/EB68A8DB-D06C-4B7C-806E-B0DDF988C9A2.png","hash":"31201dff09df539210cbd7944f6398754e09e4ae","modified":1486955536000},{"_id":"source/_posts/images/jmeter/041812CA-5FD8-486F-B77E-44B65E0B69FC.png","hash":"4904a2013c07b7de523d70d58affbc77c7524da8","modified":1486955536000},{"_id":"source/_posts/images/jmeter/5B221055-B544-468D-BD04-E434EC658201.png","hash":"d7e0972e18260e0878955993f282ab99fba3a448","modified":1486955536000},{"_id":"source/_posts/images/jmeter/77BA9F59-AD43-480B-AACC-AC60E18D7EC6.png","hash":"3fa9b1804653f8ac0653148989673ab784a2c7ee","modified":1486955536000},{"_id":"source/_posts/images/jmeter/B70872B0-209B-4F0A-BE8B-F8647B04DCF8.png","hash":"c5877aa1ec4c7ccde9755b47bd19397498e9ab1d","modified":1486955536000},{"_id":"source/_posts/images/jmeter/A850D422-5CF4-40FD-8657-964B3A3DA5C0.png","hash":"a26bf668b3a03cbb325b70fe9a8f5abb0c3fc336","modified":1486955536000},{"_id":"source/_posts/images/jmeter/9FC2876B-4DCF-4219-ACD7-31FDE6473981.png","hash":"d9108a3d2066b0c56255d46b64f64793a385e2a0","modified":1486955536000},{"_id":"themes/clean-blog/.git/objects/pack/pack-150961354dcaf41617990f9a9d18fb969ec0b9fb.pack","hash":"4cc90aed47a7c34d707952de5396981e230bfff1","modified":1486713054000},{"_id":"public/archives/index.html","hash":"0f8502f31268ce4cdb69f9bba95366bc44710dfd","modified":1486965717379},{"_id":"public/archives/2017/index.html","hash":"c41d7a3f3c7f0896e63153d07a24658e0fdd2f57","modified":1486965717385},{"_id":"public/archives/2017/02/index.html","hash":"dd99a7fd9a5e95a0f6c5e630e783935700098837","modified":1486965717385},{"_id":"public/index.html","hash":"e6da1e2d12d45d22d1da465a89645eba748b798c","modified":1486965717385},{"_id":"public/2017/02/10/:year/:month/:day/:title//index.html","hash":"8e6f01c7b8450b514e155df36cf013df6c02943e","modified":1486965347588},{"_id":"public/2017/02/13/:year/:month/:day/:title//index.html","hash":"2ec14bc1a3a9316ec2504b04d0f1cdb443dbf4f2","modified":1486965347590},{"_id":"public/tags/java/index.html","hash":"828b5f260aea5831da49fda7da941637d5ade0ae","modified":1486965717385},{"_id":"public/img/about-bg.jpg","hash":"d39126a6456f2bac0169d1779304725f179c9900","modified":1486965347591},{"_id":"public/css/article.css","hash":"f0ee490e1207191946fffc9444f891e9b7ae7289","modified":1486965347883},{"_id":"public/css/mixins.css","hash":"45146e7f4346351cd7f364de344aecf9574475f9","modified":1486965347883},{"_id":"public/css/style.css","hash":"4549fbe615459f12cc2e4f560036f911cd51b121","modified":1486965347883},{"_id":"public/css/variables.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486965347883},{"_id":"public/css/base.css","hash":"5bdbdf83ad61e80c537bd75b5442c8b0aac1e0f6","modified":1486965347883},{"_id":"public/img/home-bg.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1486965347883},{"_id":"public/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1486965347884},{"_id":"public/2017/02/10/适合多层级调转-各种子模块引用返回保留上一次查询记录/index.html","hash":"523ffc0330a22f64a4538adf4439282a641a601f","modified":1486966431843},{"_id":"public/2017/02/13/JMeter-测试工具-入门/index.html","hash":"673acf176ba36b8aacb63be4952ebdbcdcdeb62a","modified":1486966431843},{"_id":"themes/clean-blog/.DS_Store","hash":"370cbdbfbfe3df40234642b1d0b91c559c08bd03","modified":1486966410000}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"JMeter 测试工具 入门","date":"2017-02-13T03:00:17.000Z","layout":"jmeter","slug":"JMeter-测试工具-入门","_content":"### 说明(入门使用)：\n* jdk版本 1.7 \n* 下载 [apache-jmeter](http://jmeter.apache.org/download_jmeter.cgi) 版本随意 实例中使用的2.13\n* Test Plan 执行计划  执行使用  测试使用 如：回放测试\n* WorkBench 工作区域，准备使用，如：录制\n* --启动 ./bin/jmeter.sh \n\n\n###下面开始自动话测试，录制 ＋ 回放\n\n#####创建线程组和控制器\n \n ![1](http://ol5i7ltje.bkt.clouddn.com/69124311-7331-472F-B9CB-19D667B74D7E.png)\n ![2](http://ol5i7ltje.bkt.clouddn.com/76DDFAC0-EDB8-4378-A370-B0EAEBCABAEC.png)\n ![3](http://ol5i7ltje.bkt.clouddn.com/A850D422-5CF4-40FD-8657-964B3A3DA5C0.png)\n ![4](http://ol5i7ltje.bkt.clouddn.com/EB68A8DB-D06C-4B7C-806E-B0DDF988C9A2.png)\n ![5](http://ol5i7ltje.bkt.clouddn.com/D1658BF8-BF4D-432F-B681-3403C4D0A1C1.png)\n ![6](http://ol5i7ltje.bkt.clouddn.com/05067694-C406-4261-B40F-081A9CF60879.png)\n  \n#####选择目标控制器\n ![7](http://ol5i7ltje.bkt.clouddn.com/E9F57B0D-DD8F-4DA9-8DD9-51C96A325669.png)\n \n#####创建两个监听查询\n ![8](http://ol5i7ltje.bkt.clouddn.com/041812CA-5FD8-486F-B77E-44B65E0B69FC.png)\n ![9](http://ol5i7ltje.bkt.clouddn.com/43CEA00E-37B1-4DE0-A382-1E791A624BB4.png)\n ![10](http://ol5i7ltje.bkt.clouddn.com/9FC2876B-4DCF-4219-ACD7-31FDE6473981.png)\n \n#####开始录制\n ![10](http://ol5i7ltje.bkt.clouddn.com/B70872B0-209B-4F0A-BE8B-F8647B04DCF8.png)\n \n#####已经开始录制了\n ![11](http://ol5i7ltje.bkt.clouddn.com/5B221055-B544-468D-BD04-E434EC658201.png)\n \n#####准备回放，停止录制\n ![11](http://ol5i7ltje.bkt.clouddn.com/77BA9F59-AD43-480B-AACC-AC60E18D7EC6.png) \n \n#####开始回放\n  ![11](http://ol5i7ltje.bkt.clouddn.com/D219EB49-D5DB-4C1C-B6C5-827A36B0A6DB.png) \n ","source":"_posts/JMeter-测试工具-入门.md","raw":"---\ntitle: JMeter 测试工具 入门\ndate: 2017-02-13 11:00:17\ntags: java\nlayout: jmeter\nslug: apache-jmeter\n---\n### 说明(入门使用)：\n* jdk版本 1.7 \n* 下载 [apache-jmeter](http://jmeter.apache.org/download_jmeter.cgi) 版本随意 实例中使用的2.13\n* Test Plan 执行计划  执行使用  测试使用 如：回放测试\n* WorkBench 工作区域，准备使用，如：录制\n* --启动 ./bin/jmeter.sh \n\n\n###下面开始自动话测试，录制 ＋ 回放\n\n#####创建线程组和控制器\n \n ![1](http://ol5i7ltje.bkt.clouddn.com/69124311-7331-472F-B9CB-19D667B74D7E.png)\n ![2](http://ol5i7ltje.bkt.clouddn.com/76DDFAC0-EDB8-4378-A370-B0EAEBCABAEC.png)\n ![3](http://ol5i7ltje.bkt.clouddn.com/A850D422-5CF4-40FD-8657-964B3A3DA5C0.png)\n ![4](http://ol5i7ltje.bkt.clouddn.com/EB68A8DB-D06C-4B7C-806E-B0DDF988C9A2.png)\n ![5](http://ol5i7ltje.bkt.clouddn.com/D1658BF8-BF4D-432F-B681-3403C4D0A1C1.png)\n ![6](http://ol5i7ltje.bkt.clouddn.com/05067694-C406-4261-B40F-081A9CF60879.png)\n  \n#####选择目标控制器\n ![7](http://ol5i7ltje.bkt.clouddn.com/E9F57B0D-DD8F-4DA9-8DD9-51C96A325669.png)\n \n#####创建两个监听查询\n ![8](http://ol5i7ltje.bkt.clouddn.com/041812CA-5FD8-486F-B77E-44B65E0B69FC.png)\n ![9](http://ol5i7ltje.bkt.clouddn.com/43CEA00E-37B1-4DE0-A382-1E791A624BB4.png)\n ![10](http://ol5i7ltje.bkt.clouddn.com/9FC2876B-4DCF-4219-ACD7-31FDE6473981.png)\n \n#####开始录制\n ![10](http://ol5i7ltje.bkt.clouddn.com/B70872B0-209B-4F0A-BE8B-F8647B04DCF8.png)\n \n#####已经开始录制了\n ![11](http://ol5i7ltje.bkt.clouddn.com/5B221055-B544-468D-BD04-E434EC658201.png)\n \n#####准备回放，停止录制\n ![11](http://ol5i7ltje.bkt.clouddn.com/77BA9F59-AD43-480B-AACC-AC60E18D7EC6.png) \n \n#####开始回放\n  ![11](http://ol5i7ltje.bkt.clouddn.com/D219EB49-D5DB-4C1C-B6C5-827A36B0A6DB.png) \n ","published":1,"updated":"2017-02-13T06:16:16.000Z","_id":"ciz3orx2v00008h5rd1j0o5iw","comments":1,"photos":[],"link":"","content":"<h3 id=\"说明-入门使用-：\"><a href=\"#说明-入门使用-：\" class=\"headerlink\" title=\"说明(入门使用)：\"></a>说明(入门使用)：</h3><ul>\n<li>jdk版本 1.7 </li>\n<li>下载 <a href=\"http://jmeter.apache.org/download_jmeter.cgi\" target=\"_blank\" rel=\"external\">apache-jmeter</a> 版本随意 实例中使用的2.13</li>\n<li>Test Plan 执行计划  执行使用  测试使用 如：回放测试</li>\n<li>WorkBench 工作区域，准备使用，如：录制</li>\n<li>–启动 ./bin/jmeter.sh </li>\n</ul>\n<p>###下面开始自动话测试，录制 ＋ 回放</p>\n<p>#####创建线程组和控制器</p>\n<p> <img src=\"http://ol5i7ltje.bkt.clouddn.com/69124311-7331-472F-B9CB-19D667B74D7E.png\" alt=\"1\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/76DDFAC0-EDB8-4378-A370-B0EAEBCABAEC.png\" alt=\"2\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/A850D422-5CF4-40FD-8657-964B3A3DA5C0.png\" alt=\"3\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/EB68A8DB-D06C-4B7C-806E-B0DDF988C9A2.png\" alt=\"4\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/D1658BF8-BF4D-432F-B681-3403C4D0A1C1.png\" alt=\"5\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/05067694-C406-4261-B40F-081A9CF60879.png\" alt=\"6\"></p>\n<p>#####选择目标控制器<br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/E9F57B0D-DD8F-4DA9-8DD9-51C96A325669.png\" alt=\"7\"></p>\n<p>#####创建两个监听查询<br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/041812CA-5FD8-486F-B77E-44B65E0B69FC.png\" alt=\"8\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/43CEA00E-37B1-4DE0-A382-1E791A624BB4.png\" alt=\"9\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/9FC2876B-4DCF-4219-ACD7-31FDE6473981.png\" alt=\"10\"></p>\n<p>#####开始录制<br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/B70872B0-209B-4F0A-BE8B-F8647B04DCF8.png\" alt=\"10\"></p>\n<p>#####已经开始录制了<br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/5B221055-B544-468D-BD04-E434EC658201.png\" alt=\"11\"></p>\n<p>#####准备回放，停止录制<br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/77BA9F59-AD43-480B-AACC-AC60E18D7EC6.png\" alt=\"11\"> </p>\n<p>#####开始回放<br>  <img src=\"http://ol5i7ltje.bkt.clouddn.com/D219EB49-D5DB-4C1C-B6C5-827A36B0A6DB.png\" alt=\"11\"> </p>\n","excerpt":"","more":"<h3 id=\"说明-入门使用-：\"><a href=\"#说明-入门使用-：\" class=\"headerlink\" title=\"说明(入门使用)：\"></a>说明(入门使用)：</h3><ul>\n<li>jdk版本 1.7 </li>\n<li>下载 <a href=\"http://jmeter.apache.org/download_jmeter.cgi\">apache-jmeter</a> 版本随意 实例中使用的2.13</li>\n<li>Test Plan 执行计划  执行使用  测试使用 如：回放测试</li>\n<li>WorkBench 工作区域，准备使用，如：录制</li>\n<li>–启动 ./bin/jmeter.sh </li>\n</ul>\n<p>###下面开始自动话测试，录制 ＋ 回放</p>\n<p>#####创建线程组和控制器</p>\n<p> <img src=\"http://ol5i7ltje.bkt.clouddn.com/69124311-7331-472F-B9CB-19D667B74D7E.png\" alt=\"1\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/76DDFAC0-EDB8-4378-A370-B0EAEBCABAEC.png\" alt=\"2\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/A850D422-5CF4-40FD-8657-964B3A3DA5C0.png\" alt=\"3\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/EB68A8DB-D06C-4B7C-806E-B0DDF988C9A2.png\" alt=\"4\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/D1658BF8-BF4D-432F-B681-3403C4D0A1C1.png\" alt=\"5\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/05067694-C406-4261-B40F-081A9CF60879.png\" alt=\"6\"></p>\n<p>#####选择目标控制器<br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/E9F57B0D-DD8F-4DA9-8DD9-51C96A325669.png\" alt=\"7\"></p>\n<p>#####创建两个监听查询<br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/041812CA-5FD8-486F-B77E-44B65E0B69FC.png\" alt=\"8\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/43CEA00E-37B1-4DE0-A382-1E791A624BB4.png\" alt=\"9\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/9FC2876B-4DCF-4219-ACD7-31FDE6473981.png\" alt=\"10\"></p>\n<p>#####开始录制<br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/B70872B0-209B-4F0A-BE8B-F8647B04DCF8.png\" alt=\"10\"></p>\n<p>#####已经开始录制了<br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/5B221055-B544-468D-BD04-E434EC658201.png\" alt=\"11\"></p>\n<p>#####准备回放，停止录制<br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/77BA9F59-AD43-480B-AACC-AC60E18D7EC6.png\" alt=\"11\"> </p>\n<p>#####开始回放<br>  <img src=\"http://ol5i7ltje.bkt.clouddn.com/D219EB49-D5DB-4C1C-B6C5-827A36B0A6DB.png\" alt=\"11\"> </p>\n"},{"title":"适合多层级调转,各种子模块引用返回保留上一次查询记录","date":"2017-02-10T08:25:34.000Z","layout":"cache","slug":"适合多层级调转-各种子模块引用返回保留上一次查询记录","_content":"用于使用web系统中查询\n\n\n \n[源码下载com.pagecache.zip](http://ol5i7ltje.bkt.clouddn.com/data/git/packagecachecom.pagecache.zip)\n\n基于Spring APO 环绕通知实现\n\n1.添加配置文件\naction-servlet.xml 最后添加\n\n<import resource=\"spring-aop-settings.xml\"/>\nspring-aop-settings.xml  \n\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\nxsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd\">\n<aop:aspectj-autoproxy proxy-target-class=\"true\" />\n</beans>\n```\n\n\n2.修改代码(CacheAspectAdvice.java)\n第28行 指定切入点控制层\n\n```\n   @Pointcut(\"execution(* com.*.web.*.*(..))\")\n    public void CacheAspectAdvice() {\n    }\n    ```\n\n3.加入注解\n在自定控制层入口,加入需要记忆和恢复的注解(@FieldCache)\n\n```\n @RequestMapping(value = \"/list.do\")\n public ModelAndView list(HttpServletRequest request,@FieldCache SearchEntity domain){\n            ModelAndView modelAndView=new ModelAndView();\n            modelAndView.setViewName(\"list\");\n            return  modelAndView;\n  }\n```\n\n查询数据模型中,默认只会处理 String,Integer 两种类型\n如果不需要记录属性上方加入 @FieldTransient\n\n```\n//这是个栗了\npublic class SearchEntity extends BaseInput {\n    @FieldTransient\n    private String searchName;\n    public String get/set...\n}\n```\n\n如果其他引用对象里面也要加入记录和恢复(@FieldCache)\n\n```\n//父类同样回记录,回迭代最终Object\npublic class SearchEntity extends BaseInput {\n    @FieldTransient\n    private String searchName;\n    @FieldCache\n    private Page page;\n    public String getSearchName...\n   public String getPage...\n}\n```\n\n说明 \n1.从菜单进入需要加参数,会执行清空已经记录查询条件(pagCatchClean) 如:http://xxx/xxx.do?pagCatchClean\n\n2.默认情况下 post 的请求记录,get 请求清空,如果post 情况下 也好恢复记录不记录 加参数(pageRecover) 如:http://xxx/xxx.do?pageRecover\n\n3.缓存默认使用的本地,如果需要系统是负载(非hash)模式,需要 实现SearchObjectCache.java接口,存放到共享存储中(redis,mongodb....),\nSearchObjectCacheManager.java 缓存管理类实现好后 修改 其SearchObjectCache引用即可\n\nObjectCache.java 第34行开始\n\n```\n\n   /**\n     * 清空缓存标记\n     * 在浏览器地址加入\n     * http://xxx/xxx.do?pagCatchClean\n     **/\n    public static String pagCatchClean = \"pageCacheClean\";\n    public static String pagRecover = \"pageRecover\";\n    Logger logger = Logger.getLogger(ObjectCache.class.getName());\n public void cacheManager(HttpServletRequest request, Object o) {\n        String sessionId = request.getSession().getId();\n        String uri = request.getRequestURI();\n        if (null == uri || uri.equals(\"\")) {\n            return;\n        }\n        if (uri.indexOf(\"?\") > 0) {\n            uri = uri.substring(0, uri.indexOf(\"?\"));\n        }\n        String cacheKey = uri.concat(sessionId);\n        boolean isClean = request.getParameter(pagCatchClean) == null ? false : true;\n        //空清空缓存\n        if (isClean) {\n            SearainbowCacheManager.del(cacheKey);\n            logger.info(\"清空缓存 key==> \" + cacheKey);\n            return;\n        }\n        //post 查询 存储查询条件\n         if(request.getMethod().toUpperCase().equals(\"POST\") &&  null == request.getParameter(pagRecover)){\n             cache(sessionId, uri, isClean, o);\n         }else {\n             //get 或是其他 还原查询条件\n             recover(sessionId, uri, o);\n         }\n    }\n```\n ","source":"_posts/适合多层级调转-各种子模块引用返回保留上一次查询记录.md","raw":"---\ntitle: '适合多层级调转,各种子模块引用返回保留上一次查询记录'\ndate: 2017-02-10 16:25:34\ntags: java\nlayout: cache\nslug: pagecache\n---\n用于使用web系统中查询\n\n\n \n[源码下载com.pagecache.zip](http://ol5i7ltje.bkt.clouddn.com/data/git/packagecachecom.pagecache.zip)\n\n基于Spring APO 环绕通知实现\n\n1.添加配置文件\naction-servlet.xml 最后添加\n\n<import resource=\"spring-aop-settings.xml\"/>\nspring-aop-settings.xml  \n\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\nxsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd\">\n<aop:aspectj-autoproxy proxy-target-class=\"true\" />\n</beans>\n```\n\n\n2.修改代码(CacheAspectAdvice.java)\n第28行 指定切入点控制层\n\n```\n   @Pointcut(\"execution(* com.*.web.*.*(..))\")\n    public void CacheAspectAdvice() {\n    }\n    ```\n\n3.加入注解\n在自定控制层入口,加入需要记忆和恢复的注解(@FieldCache)\n\n```\n @RequestMapping(value = \"/list.do\")\n public ModelAndView list(HttpServletRequest request,@FieldCache SearchEntity domain){\n            ModelAndView modelAndView=new ModelAndView();\n            modelAndView.setViewName(\"list\");\n            return  modelAndView;\n  }\n```\n\n查询数据模型中,默认只会处理 String,Integer 两种类型\n如果不需要记录属性上方加入 @FieldTransient\n\n```\n//这是个栗了\npublic class SearchEntity extends BaseInput {\n    @FieldTransient\n    private String searchName;\n    public String get/set...\n}\n```\n\n如果其他引用对象里面也要加入记录和恢复(@FieldCache)\n\n```\n//父类同样回记录,回迭代最终Object\npublic class SearchEntity extends BaseInput {\n    @FieldTransient\n    private String searchName;\n    @FieldCache\n    private Page page;\n    public String getSearchName...\n   public String getPage...\n}\n```\n\n说明 \n1.从菜单进入需要加参数,会执行清空已经记录查询条件(pagCatchClean) 如:http://xxx/xxx.do?pagCatchClean\n\n2.默认情况下 post 的请求记录,get 请求清空,如果post 情况下 也好恢复记录不记录 加参数(pageRecover) 如:http://xxx/xxx.do?pageRecover\n\n3.缓存默认使用的本地,如果需要系统是负载(非hash)模式,需要 实现SearchObjectCache.java接口,存放到共享存储中(redis,mongodb....),\nSearchObjectCacheManager.java 缓存管理类实现好后 修改 其SearchObjectCache引用即可\n\nObjectCache.java 第34行开始\n\n```\n\n   /**\n     * 清空缓存标记\n     * 在浏览器地址加入\n     * http://xxx/xxx.do?pagCatchClean\n     **/\n    public static String pagCatchClean = \"pageCacheClean\";\n    public static String pagRecover = \"pageRecover\";\n    Logger logger = Logger.getLogger(ObjectCache.class.getName());\n public void cacheManager(HttpServletRequest request, Object o) {\n        String sessionId = request.getSession().getId();\n        String uri = request.getRequestURI();\n        if (null == uri || uri.equals(\"\")) {\n            return;\n        }\n        if (uri.indexOf(\"?\") > 0) {\n            uri = uri.substring(0, uri.indexOf(\"?\"));\n        }\n        String cacheKey = uri.concat(sessionId);\n        boolean isClean = request.getParameter(pagCatchClean) == null ? false : true;\n        //空清空缓存\n        if (isClean) {\n            SearainbowCacheManager.del(cacheKey);\n            logger.info(\"清空缓存 key==> \" + cacheKey);\n            return;\n        }\n        //post 查询 存储查询条件\n         if(request.getMethod().toUpperCase().equals(\"POST\") &&  null == request.getParameter(pagRecover)){\n             cache(sessionId, uri, isClean, o);\n         }else {\n             //get 或是其他 还原查询条件\n             recover(sessionId, uri, o);\n         }\n    }\n```\n ","published":1,"updated":"2017-02-13T06:05:44.000Z","_id":"ciz3orx2z00018h5ryjcplrsv","comments":1,"photos":[],"link":"","content":"<p>用于使用web系统中查询</p>\n<p><a href=\"http://ol5i7ltje.bkt.clouddn.com/data/git/packagecachecom.pagecache.zip\" target=\"_blank\" rel=\"external\">源码下载com.pagecache.zip</a></p>\n<p>基于Spring APO 环绕通知实现</p>\n<p>1.添加配置文件<br>action-servlet.xml 最后添加</p>\n<p><import resource=\"spring-aop-settings.xml\"><br>spring-aop-settings.xml  </import></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class=\"line\">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class=\"line\">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;</div><div class=\"line\">&lt;aop:aspectj-autoproxy proxy-target-class=&quot;true&quot; /&gt;</div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure>\n<p>2.修改代码(CacheAspectAdvice.java)<br>第28行 指定切入点控制层</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Pointcut(&quot;execution(* com.*.web.*.*(..))&quot;)</div><div class=\"line\"> public void CacheAspectAdvice() &#123;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>3.加入注解<br>在自定控制层入口,加入需要记忆和恢复的注解(@FieldCache)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">@RequestMapping(value = &quot;/list.do&quot;)</div><div class=\"line\">public ModelAndView list(HttpServletRequest request,@FieldCache SearchEntity domain)&#123;</div><div class=\"line\">           ModelAndView modelAndView=new ModelAndView();</div><div class=\"line\">           modelAndView.setViewName(&quot;list&quot;);</div><div class=\"line\">           return  modelAndView;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>查询数据模型中,默认只会处理 String,Integer 两种类型<br>如果不需要记录属性上方加入 @FieldTransient</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//这是个栗了</div><div class=\"line\">public class SearchEntity extends BaseInput &#123;</div><div class=\"line\">    @FieldTransient</div><div class=\"line\">    private String searchName;</div><div class=\"line\">    public String get/set...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果其他引用对象里面也要加入记录和恢复(@FieldCache)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//父类同样回记录,回迭代最终Object</div><div class=\"line\">public class SearchEntity extends BaseInput &#123;</div><div class=\"line\">    @FieldTransient</div><div class=\"line\">    private String searchName;</div><div class=\"line\">    @FieldCache</div><div class=\"line\">    private Page page;</div><div class=\"line\">    public String getSearchName...</div><div class=\"line\">   public String getPage...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>说明<br>1.从菜单进入需要加参数,会执行清空已经记录查询条件(pagCatchClean) 如:<a href=\"http://xxx/xxx.do?pagCatchClean\" target=\"_blank\" rel=\"external\">http://xxx/xxx.do?pagCatchClean</a></p>\n<p>2.默认情况下 post 的请求记录,get 请求清空,如果post 情况下 也好恢复记录不记录 加参数(pageRecover) 如:<a href=\"http://xxx/xxx.do?pageRecover\" target=\"_blank\" rel=\"external\">http://xxx/xxx.do?pageRecover</a></p>\n<p>3.缓存默认使用的本地,如果需要系统是负载(非hash)模式,需要 实现SearchObjectCache.java接口,存放到共享存储中(redis,mongodb….),<br>SearchObjectCacheManager.java 缓存管理类实现好后 修改 其SearchObjectCache引用即可</p>\n<p>ObjectCache.java 第34行开始</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">    * 清空缓存标记</div><div class=\"line\">    * 在浏览器地址加入</div><div class=\"line\">    * http://xxx/xxx.do?pagCatchClean</div><div class=\"line\">    **/</div><div class=\"line\">   public static String pagCatchClean = &quot;pageCacheClean&quot;;</div><div class=\"line\">   public static String pagRecover = &quot;pageRecover&quot;;</div><div class=\"line\">   Logger logger = Logger.getLogger(ObjectCache.class.getName());</div><div class=\"line\">public void cacheManager(HttpServletRequest request, Object o) &#123;</div><div class=\"line\">       String sessionId = request.getSession().getId();</div><div class=\"line\">       String uri = request.getRequestURI();</div><div class=\"line\">       if (null == uri || uri.equals(&quot;&quot;)) &#123;</div><div class=\"line\">           return;</div><div class=\"line\">       &#125;</div><div class=\"line\">       if (uri.indexOf(&quot;?&quot;) &gt; 0) &#123;</div><div class=\"line\">           uri = uri.substring(0, uri.indexOf(&quot;?&quot;));</div><div class=\"line\">       &#125;</div><div class=\"line\">       String cacheKey = uri.concat(sessionId);</div><div class=\"line\">       boolean isClean = request.getParameter(pagCatchClean) == null ? false : true;</div><div class=\"line\">       //空清空缓存</div><div class=\"line\">       if (isClean) &#123;</div><div class=\"line\">           SearainbowCacheManager.del(cacheKey);</div><div class=\"line\">           logger.info(&quot;清空缓存 key==&gt; &quot; + cacheKey);</div><div class=\"line\">           return;</div><div class=\"line\">       &#125;</div><div class=\"line\">       //post 查询 存储查询条件</div><div class=\"line\">        if(request.getMethod().toUpperCase().equals(&quot;POST&quot;) &amp;&amp;  null == request.getParameter(pagRecover))&#123;</div><div class=\"line\">            cache(sessionId, uri, isClean, o);</div><div class=\"line\">        &#125;else &#123;</div><div class=\"line\">            //get 或是其他 还原查询条件</div><div class=\"line\">            recover(sessionId, uri, o);</div><div class=\"line\">        &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>用于使用web系统中查询</p>\n<p><a href=\"http://ol5i7ltje.bkt.clouddn.com/data/git/packagecachecom.pagecache.zip\">源码下载com.pagecache.zip</a></p>\n<p>基于Spring APO 环绕通知实现</p>\n<p>1.添加配置文件<br>action-servlet.xml 最后添加</p>\n<p><import resource=\"spring-aop-settings.xml\"/><br>spring-aop-settings.xml  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class=\"line\">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class=\"line\">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;</div><div class=\"line\">&lt;aop:aspectj-autoproxy proxy-target-class=&quot;true&quot; /&gt;</div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure>\n<p>2.修改代码(CacheAspectAdvice.java)<br>第28行 指定切入点控制层</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Pointcut(&quot;execution(* com.*.web.*.*(..))&quot;)</div><div class=\"line\"> public void CacheAspectAdvice() &#123;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>3.加入注解<br>在自定控制层入口,加入需要记忆和恢复的注解(@FieldCache)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">@RequestMapping(value = &quot;/list.do&quot;)</div><div class=\"line\">public ModelAndView list(HttpServletRequest request,@FieldCache SearchEntity domain)&#123;</div><div class=\"line\">           ModelAndView modelAndView=new ModelAndView();</div><div class=\"line\">           modelAndView.setViewName(&quot;list&quot;);</div><div class=\"line\">           return  modelAndView;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>查询数据模型中,默认只会处理 String,Integer 两种类型<br>如果不需要记录属性上方加入 @FieldTransient</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//这是个栗了</div><div class=\"line\">public class SearchEntity extends BaseInput &#123;</div><div class=\"line\">    @FieldTransient</div><div class=\"line\">    private String searchName;</div><div class=\"line\">    public String get/set...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果其他引用对象里面也要加入记录和恢复(@FieldCache)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//父类同样回记录,回迭代最终Object</div><div class=\"line\">public class SearchEntity extends BaseInput &#123;</div><div class=\"line\">    @FieldTransient</div><div class=\"line\">    private String searchName;</div><div class=\"line\">    @FieldCache</div><div class=\"line\">    private Page page;</div><div class=\"line\">    public String getSearchName...</div><div class=\"line\">   public String getPage...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>说明<br>1.从菜单进入需要加参数,会执行清空已经记录查询条件(pagCatchClean) 如:<a href=\"http://xxx/xxx.do?pagCatchClean\">http://xxx/xxx.do?pagCatchClean</a></p>\n<p>2.默认情况下 post 的请求记录,get 请求清空,如果post 情况下 也好恢复记录不记录 加参数(pageRecover) 如:<a href=\"http://xxx/xxx.do?pageRecover\">http://xxx/xxx.do?pageRecover</a></p>\n<p>3.缓存默认使用的本地,如果需要系统是负载(非hash)模式,需要 实现SearchObjectCache.java接口,存放到共享存储中(redis,mongodb….),<br>SearchObjectCacheManager.java 缓存管理类实现好后 修改 其SearchObjectCache引用即可</p>\n<p>ObjectCache.java 第34行开始</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">    * 清空缓存标记</div><div class=\"line\">    * 在浏览器地址加入</div><div class=\"line\">    * http://xxx/xxx.do?pagCatchClean</div><div class=\"line\">    **/</div><div class=\"line\">   public static String pagCatchClean = &quot;pageCacheClean&quot;;</div><div class=\"line\">   public static String pagRecover = &quot;pageRecover&quot;;</div><div class=\"line\">   Logger logger = Logger.getLogger(ObjectCache.class.getName());</div><div class=\"line\">public void cacheManager(HttpServletRequest request, Object o) &#123;</div><div class=\"line\">       String sessionId = request.getSession().getId();</div><div class=\"line\">       String uri = request.getRequestURI();</div><div class=\"line\">       if (null == uri || uri.equals(&quot;&quot;)) &#123;</div><div class=\"line\">           return;</div><div class=\"line\">       &#125;</div><div class=\"line\">       if (uri.indexOf(&quot;?&quot;) &gt; 0) &#123;</div><div class=\"line\">           uri = uri.substring(0, uri.indexOf(&quot;?&quot;));</div><div class=\"line\">       &#125;</div><div class=\"line\">       String cacheKey = uri.concat(sessionId);</div><div class=\"line\">       boolean isClean = request.getParameter(pagCatchClean) == null ? false : true;</div><div class=\"line\">       //空清空缓存</div><div class=\"line\">       if (isClean) &#123;</div><div class=\"line\">           SearainbowCacheManager.del(cacheKey);</div><div class=\"line\">           logger.info(&quot;清空缓存 key==&gt; &quot; + cacheKey);</div><div class=\"line\">           return;</div><div class=\"line\">       &#125;</div><div class=\"line\">       //post 查询 存储查询条件</div><div class=\"line\">        if(request.getMethod().toUpperCase().equals(&quot;POST&quot;) &amp;&amp;  null == request.getParameter(pagRecover))&#123;</div><div class=\"line\">            cache(sessionId, uri, isClean, o);</div><div class=\"line\">        &#125;else &#123;</div><div class=\"line\">            //get 或是其他 还原查询条件</div><div class=\"line\">            recover(sessionId, uri, o);</div><div class=\"line\">        &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ciz3orx2v00008h5rd1j0o5iw","tag_id":"ciz3orx3100028h5rfwfnqmxx","_id":"ciz3orx3400048h5rygnbphwp"},{"post_id":"ciz3orx2z00018h5ryjcplrsv","tag_id":"ciz3orx3100028h5rfwfnqmxx","_id":"ciz3orx3a00058h5r1iejywxd"}],"Tag":[{"name":"java","_id":"ciz3orx3100028h5rfwfnqmxx"}]}}