{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"9e589f6837a5b449090b13c1183f99ae5adeb6cd","modified":1489738623000},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1486706968000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1486706968000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1486706968000},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1486706968000},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1486706968000},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1486706968000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1490233067000},{"_id":"source/_posts/AES-加密MD5签名.md","hash":"98909d8a76730a00e4f94da31fbbf58f28a09ecb","modified":1490182726000},{"_id":"source/_posts/JMeter-测试工具-入门.md","hash":"bc100c25ff61f4aa71158ec0aa23ff6ad6e0372f","modified":1486966576000},{"_id":"source/_posts/crontab-定时任务.md","hash":"32561e42d40e49ccce2376cbbfb0b86c542bf276","modified":1486968533000},{"_id":"source/_posts/java-base64加密概述.md","hash":"18dd3e38d3a1bf312a1b52930d4352eb0ce3d71b","modified":1490752619000},{"_id":"source/_posts/spring-boot-完成版本－不解释.md","hash":"8362f614a0771304afe2ada609c00856c7922775","modified":1489111286000},{"_id":"source/_posts/spring-boot-搭建-不解释.md","hash":"cf1c7af8ca7ef455cb85aa671c6e6856a650590a","modified":1489111274000},{"_id":"source/_posts/设计模式单件模式-不解释.md","hash":"c52098c3bcf3294fe3f0185d3f3e732d877cae31","modified":1489138171000},{"_id":"source/_posts/设计模式命令模式-不解释.md","hash":"3e6cf2257b098cbdc960fa122cd4aaf1bd2ff7fb","modified":1489138169000},{"_id":"source/_posts/设计模式外观模式-不解释.md","hash":"7c9adf8636ea38484f2535bdab445ca1dd8f9071","modified":1489138166000},{"_id":"source/_posts/设计模式模版方法－不解释.md","hash":"fcae25e618493ab86d1a1e156693056c3a3826af","modified":1490753475000},{"_id":"source/_posts/设计模式工厂-不解释.md","hash":"40429ca12c418e2b0ce9ab50fc92a836442773c2","modified":1489138173000},{"_id":"source/_posts/设计模式策略模式-不解释.md","hash":"55932323b51220a2875c754780fb1e22c1fa2496","modified":1489138176000},{"_id":"source/_posts/设计模式组合－不解释.md","hash":"2dd4ab16864629af820f9a0da9221c8b81188129","modified":1490753642000},{"_id":"source/_posts/设计模式装饰模式-不解释.md","hash":"081bbbf7c101142b984f054428bd36cb09c59750","modified":1489138178000},{"_id":"source/_posts/设计模式观察模式-不解释.md","hash":"b312acd2593dc6309b1b3c9d51f5d30522faf73b","modified":1489138180000},{"_id":"source/_posts/设计模式迭代器－不解释.md","hash":"ad555aebb33b1d9a3794c6f2c031af31a398e30c","modified":1490753635000},{"_id":"source/_posts/设计模式适配器模式-不解释.md","hash":"c0f819ca4c4f3a5f207f9c226dabf64ec4c94ab9","modified":1489138182000},{"_id":"source/_posts/适合多层级调转-各种子模块引用返回保留上一次查询记录.md","hash":"ff1b8619395bae1df8abd4ea47a6aa906a57c2ff","modified":1489138185000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1486706968000},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1486706968000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1486706968000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1486706968000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1486706968000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1486706968000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1486706968000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1486706968000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1486706968000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1486706968000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1486706968000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1486706968000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1486706968000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1486706968000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1486706968000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1486706968000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1486706968000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1486706968000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"9f72fa06a7bc962d9c75020d02c6d4cb8508b504","modified":1490754137000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1486706968000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1486706968000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1486706968000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1486706968000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1486706968000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1486706968000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1486706968000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1486706968000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1486706968000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1486706968000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1486706968000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1486706968000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1486706968000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1486706968000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1486706968000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1486706968000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1486706968000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1486706968000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1486706968000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1486706968000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1486706968000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1486706968000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1486706968000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1486706968000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1486706968000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1486706968000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1486706968000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1486706968000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1486706968000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1486706968000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1486706968000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1486706968000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1486706968000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1486706968000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1486706968000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1486706968000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1486706968000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1486706968000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1486706968000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1486706968000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1486706968000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1486706968000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1486706968000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1486706968000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1486706968000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1486706968000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1486706968000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1486706968000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1486706968000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1486706968000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1486706968000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1486706968000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1486706968000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1486706968000}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"AES 加密MD5签名","date":"2017-03-22T11:23:14.000Z","layout":"clean-blog","slug":"AES-加密MD5签名","_content":"\n \n### 模拟服务调用和客户端调用，通过AES加密MD5校验\n\n\n```\n\n   <dependency>\n        <groupId>commons-codec</groupId>\n        <artifactId>commons-codec</artifactId>\n        <version>1.10</version>\n    </dependency>\n\n```\n\n\n\n```\n\n\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.codec.binary.Hex;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.security.Key;\nimport java.security.MessageDigest;\n\n/**\n * Created by zhangchao on 3/22/17.\n */\npublic class AESTest {\n\n    private static String src = \"我是数据源{json}\";\n\n    //26字符\n    private static String srckey = \"1234567890abcDEF\";\n    static String md5Key = \"1234567890abcDEF\";\n\n    //aes 目前没有被破解\n    public static void main(String args[]) throws Exception {\n\n\n\n        //jdkAES();\n\n\n\n        //数据加密\n       String encryptJson = encrypt(src);\n        System.out.println(\"encrypt data :\"+encryptJson);\n        //签名\n        String md5Sign = MD5sign(encryptJson,md5Key);\n        System.out.println(\"md5Sign data :\"+md5Sign);\n        //发送\n\n        //数据校验\n      //encryptJson  服务接口提供数据包\n       //md5Sign 对方md5签名\n        String vsign = MD5sign(encryptJson,md5Key);\n        System.out.println(\"vsign data :\"+vsign);\n\n        System.out.println(\"是否一致\"+(vsign.equals(md5Sign)));\n\n\n        //数据解密\n        String decryptJson =decrypt(encryptJson);\n\n        System.out.println(\"decypt :\"+decryptJson);\n\n    }\n\n\n    public static String MD5sign(String source,String key ) throws Exception{\n\n        source = source+\"&key=\"+key;\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] md5Bytes = md.digest(source.getBytes());\n        //byte[] 转16进制\n        return Hex.encodeHexString(md5Bytes);\n    }\n\n\n\n\n\n    public static String encrypt(String source) throws Exception{\n        //key转换\n        Key key = new SecretKeySpec(srckey.getBytes(), \"AES\");\n\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n\n        byte[] result = cipher.doFinal(source.getBytes());\n\n         String resultStr   = Base64.encodeBase64String(result);\n\n         return resultStr;\n    }\n\n    public static String decrypt(String source) throws Exception{\n        //key转换\n        Key key = new SecretKeySpec(srckey.getBytes(), \"AES\");\n\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, key);\n\n\n       // byte[] result = cipher.doFinal(Hex.decodeHex(source.toCharArray()));\n        byte[] result = cipher.doFinal(Base64.decodeBase64(source));\n\n        String resultStr =new String(result);\n         return resultStr;\n    }\n\n\n    @Deprecated\n    public static void jdkAES() throws Exception {\n\n\n\n        //key转换\n        Key key = new SecretKeySpec(srckey.getBytes(), \"AES\");\n\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n\n        byte[] result = cipher.doFinal(src.getBytes());\n\n\n        String resultJson =  Hex.encodeHexString(result);\n        System.out.println(\"jdk aes encrypt==>\" +resultJson);\n\n\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        byte[] decrypt = cipher.doFinal(Hex.decodeHex(resultJson.toCharArray()));\n\n        System.out.println(\"jdk aes decrypt==>\" + new String(decrypt));\n\n    }\n\n}\n\n \n\n``` ","source":"_posts/AES-加密MD5签名.md","raw":"---\ntitle: AES 加密MD5签名\ndate: 2017-03-22 19:23:14\ntags: java\nlayout: clean-blog\nslug: java-AES-MD5\n\n---\n\n \n### 模拟服务调用和客户端调用，通过AES加密MD5校验\n\n\n```\n\n   <dependency>\n        <groupId>commons-codec</groupId>\n        <artifactId>commons-codec</artifactId>\n        <version>1.10</version>\n    </dependency>\n\n```\n\n\n\n```\n\n\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.codec.binary.Hex;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.security.Key;\nimport java.security.MessageDigest;\n\n/**\n * Created by zhangchao on 3/22/17.\n */\npublic class AESTest {\n\n    private static String src = \"我是数据源{json}\";\n\n    //26字符\n    private static String srckey = \"1234567890abcDEF\";\n    static String md5Key = \"1234567890abcDEF\";\n\n    //aes 目前没有被破解\n    public static void main(String args[]) throws Exception {\n\n\n\n        //jdkAES();\n\n\n\n        //数据加密\n       String encryptJson = encrypt(src);\n        System.out.println(\"encrypt data :\"+encryptJson);\n        //签名\n        String md5Sign = MD5sign(encryptJson,md5Key);\n        System.out.println(\"md5Sign data :\"+md5Sign);\n        //发送\n\n        //数据校验\n      //encryptJson  服务接口提供数据包\n       //md5Sign 对方md5签名\n        String vsign = MD5sign(encryptJson,md5Key);\n        System.out.println(\"vsign data :\"+vsign);\n\n        System.out.println(\"是否一致\"+(vsign.equals(md5Sign)));\n\n\n        //数据解密\n        String decryptJson =decrypt(encryptJson);\n\n        System.out.println(\"decypt :\"+decryptJson);\n\n    }\n\n\n    public static String MD5sign(String source,String key ) throws Exception{\n\n        source = source+\"&key=\"+key;\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] md5Bytes = md.digest(source.getBytes());\n        //byte[] 转16进制\n        return Hex.encodeHexString(md5Bytes);\n    }\n\n\n\n\n\n    public static String encrypt(String source) throws Exception{\n        //key转换\n        Key key = new SecretKeySpec(srckey.getBytes(), \"AES\");\n\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n\n        byte[] result = cipher.doFinal(source.getBytes());\n\n         String resultStr   = Base64.encodeBase64String(result);\n\n         return resultStr;\n    }\n\n    public static String decrypt(String source) throws Exception{\n        //key转换\n        Key key = new SecretKeySpec(srckey.getBytes(), \"AES\");\n\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, key);\n\n\n       // byte[] result = cipher.doFinal(Hex.decodeHex(source.toCharArray()));\n        byte[] result = cipher.doFinal(Base64.decodeBase64(source));\n\n        String resultStr =new String(result);\n         return resultStr;\n    }\n\n\n    @Deprecated\n    public static void jdkAES() throws Exception {\n\n\n\n        //key转换\n        Key key = new SecretKeySpec(srckey.getBytes(), \"AES\");\n\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n\n        byte[] result = cipher.doFinal(src.getBytes());\n\n\n        String resultJson =  Hex.encodeHexString(result);\n        System.out.println(\"jdk aes encrypt==>\" +resultJson);\n\n\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        byte[] decrypt = cipher.doFinal(Hex.decodeHex(resultJson.toCharArray()));\n\n        System.out.println(\"jdk aes decrypt==>\" + new String(decrypt));\n\n    }\n\n}\n\n \n\n``` ","published":1,"updated":"2017-03-22T11:38:46.000Z","comments":1,"photos":[],"link":"","_id":"cj0uc8czy0000ey5r5brn9ytr","content":"<h3 id=\"模拟服务调用和客户端调用，通过AES加密MD5校验\"><a href=\"#模拟服务调用和客户端调用，通过AES加密MD5校验\" class=\"headerlink\" title=\"模拟服务调用和客户端调用，通过AES加密MD5校验\"></a>模拟服务调用和客户端调用，通过AES加密MD5校验</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;dependency&gt;</div><div class=\"line\">     &lt;groupId&gt;commons-codec&lt;/groupId&gt;</div><div class=\"line\">     &lt;artifactId&gt;commons-codec&lt;/artifactId&gt;</div><div class=\"line\">     &lt;version&gt;1.10&lt;/version&gt;</div><div class=\"line\"> &lt;/dependency&gt;</div></pre></td></tr></table></figure>\n<pre><code>\n\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.codec.binary.Hex;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.security.Key;\nimport java.security.MessageDigest;\n\n/**\n * Created by zhangchao on 3/22/17.\n */\npublic class AESTest {\n\n    private static String src = &quot;我是数据源{json}&quot;;\n\n    //26字符\n    private static String srckey = &quot;1234567890abcDEF&quot;;\n    static String md5Key = &quot;1234567890abcDEF&quot;;\n\n    //aes 目前没有被破解\n    public static void main(String args[]) throws Exception {\n\n\n\n        //jdkAES();\n\n\n\n        //数据加密\n       String encryptJson = encrypt(src);\n        System.out.println(&quot;encrypt data :&quot;+encryptJson);\n        //签名\n        String md5Sign = MD5sign(encryptJson,md5Key);\n        System.out.println(&quot;md5Sign data :&quot;+md5Sign);\n        //发送\n\n        //数据校验\n      //encryptJson  服务接口提供数据包\n       //md5Sign 对方md5签名\n        String vsign = MD5sign(encryptJson,md5Key);\n        System.out.println(&quot;vsign data :&quot;+vsign);\n\n        System.out.println(&quot;是否一致&quot;+(vsign.equals(md5Sign)));\n\n\n        //数据解密\n        String decryptJson =decrypt(encryptJson);\n\n        System.out.println(&quot;decypt :&quot;+decryptJson);\n\n    }\n\n\n    public static String MD5sign(String source,String key ) throws Exception{\n\n        source = source+&quot;&amp;key=&quot;+key;\n        MessageDigest md = MessageDigest.getInstance(&quot;MD5&quot;);\n        byte[] md5Bytes = md.digest(source.getBytes());\n        //byte[] 转16进制\n        return Hex.encodeHexString(md5Bytes);\n    }\n\n\n\n\n\n    public static String encrypt(String source) throws Exception{\n        //key转换\n        Key key = new SecretKeySpec(srckey.getBytes(), &quot;AES&quot;);\n\n        Cipher cipher = Cipher.getInstance(&quot;AES/ECB/PKCS5Padding&quot;);\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n\n        byte[] result = cipher.doFinal(source.getBytes());\n\n         String resultStr   = Base64.encodeBase64String(result);\n\n         return resultStr;\n    }\n\n    public static String decrypt(String source) throws Exception{\n        //key转换\n        Key key = new SecretKeySpec(srckey.getBytes(), &quot;AES&quot;);\n\n        Cipher cipher = Cipher.getInstance(&quot;AES/ECB/PKCS5Padding&quot;);\n        cipher.init(Cipher.DECRYPT_MODE, key);\n\n\n       // byte[] result = cipher.doFinal(Hex.decodeHex(source.toCharArray()));\n        byte[] result = cipher.doFinal(Base64.decodeBase64(source));\n\n        String resultStr =new String(result);\n         return resultStr;\n    }\n\n\n    @Deprecated\n    public static void jdkAES() throws Exception {\n\n\n\n        //key转换\n        Key key = new SecretKeySpec(srckey.getBytes(), &quot;AES&quot;);\n\n        Cipher cipher = Cipher.getInstance(&quot;AES/ECB/PKCS5Padding&quot;);\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n\n        byte[] result = cipher.doFinal(src.getBytes());\n\n\n        String resultJson =  Hex.encodeHexString(result);\n        System.out.println(&quot;jdk aes encrypt==&gt;&quot; +resultJson);\n\n\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        byte[] decrypt = cipher.doFinal(Hex.decodeHex(resultJson.toCharArray()));\n\n        System.out.println(&quot;jdk aes decrypt==&gt;&quot; + new String(decrypt));\n\n    }\n\n}\n</code></pre>","excerpt":"","more":"<h3 id=\"模拟服务调用和客户端调用，通过AES加密MD5校验\"><a href=\"#模拟服务调用和客户端调用，通过AES加密MD5校验\" class=\"headerlink\" title=\"模拟服务调用和客户端调用，通过AES加密MD5校验\"></a>模拟服务调用和客户端调用，通过AES加密MD5校验</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;dependency&gt;</div><div class=\"line\">     &lt;groupId&gt;commons-codec&lt;/groupId&gt;</div><div class=\"line\">     &lt;artifactId&gt;commons-codec&lt;/artifactId&gt;</div><div class=\"line\">     &lt;version&gt;1.10&lt;/version&gt;</div><div class=\"line\"> &lt;/dependency&gt;</div></pre></td></tr></table></figure>\n<pre><code>\n\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.codec.binary.Hex;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.security.Key;\nimport java.security.MessageDigest;\n\n/**\n * Created by zhangchao on 3/22/17.\n */\npublic class AESTest {\n\n    private static String src = &quot;我是数据源{json}&quot;;\n\n    //26字符\n    private static String srckey = &quot;1234567890abcDEF&quot;;\n    static String md5Key = &quot;1234567890abcDEF&quot;;\n\n    //aes 目前没有被破解\n    public static void main(String args[]) throws Exception {\n\n\n\n        //jdkAES();\n\n\n\n        //数据加密\n       String encryptJson = encrypt(src);\n        System.out.println(&quot;encrypt data :&quot;+encryptJson);\n        //签名\n        String md5Sign = MD5sign(encryptJson,md5Key);\n        System.out.println(&quot;md5Sign data :&quot;+md5Sign);\n        //发送\n\n        //数据校验\n      //encryptJson  服务接口提供数据包\n       //md5Sign 对方md5签名\n        String vsign = MD5sign(encryptJson,md5Key);\n        System.out.println(&quot;vsign data :&quot;+vsign);\n\n        System.out.println(&quot;是否一致&quot;+(vsign.equals(md5Sign)));\n\n\n        //数据解密\n        String decryptJson =decrypt(encryptJson);\n\n        System.out.println(&quot;decypt :&quot;+decryptJson);\n\n    }\n\n\n    public static String MD5sign(String source,String key ) throws Exception{\n\n        source = source+&quot;&amp;key=&quot;+key;\n        MessageDigest md = MessageDigest.getInstance(&quot;MD5&quot;);\n        byte[] md5Bytes = md.digest(source.getBytes());\n        //byte[] 转16进制\n        return Hex.encodeHexString(md5Bytes);\n    }\n\n\n\n\n\n    public static String encrypt(String source) throws Exception{\n        //key转换\n        Key key = new SecretKeySpec(srckey.getBytes(), &quot;AES&quot;);\n\n        Cipher cipher = Cipher.getInstance(&quot;AES/ECB/PKCS5Padding&quot;);\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n\n        byte[] result = cipher.doFinal(source.getBytes());\n\n         String resultStr   = Base64.encodeBase64String(result);\n\n         return resultStr;\n    }\n\n    public static String decrypt(String source) throws Exception{\n        //key转换\n        Key key = new SecretKeySpec(srckey.getBytes(), &quot;AES&quot;);\n\n        Cipher cipher = Cipher.getInstance(&quot;AES/ECB/PKCS5Padding&quot;);\n        cipher.init(Cipher.DECRYPT_MODE, key);\n\n\n       // byte[] result = cipher.doFinal(Hex.decodeHex(source.toCharArray()));\n        byte[] result = cipher.doFinal(Base64.decodeBase64(source));\n\n        String resultStr =new String(result);\n         return resultStr;\n    }\n\n\n    @Deprecated\n    public static void jdkAES() throws Exception {\n\n\n\n        //key转换\n        Key key = new SecretKeySpec(srckey.getBytes(), &quot;AES&quot;);\n\n        Cipher cipher = Cipher.getInstance(&quot;AES/ECB/PKCS5Padding&quot;);\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n\n        byte[] result = cipher.doFinal(src.getBytes());\n\n\n        String resultJson =  Hex.encodeHexString(result);\n        System.out.println(&quot;jdk aes encrypt==&gt;&quot; +resultJson);\n\n\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        byte[] decrypt = cipher.doFinal(Hex.decodeHex(resultJson.toCharArray()));\n\n        System.out.println(&quot;jdk aes decrypt==&gt;&quot; + new String(decrypt));\n\n    }\n\n}\n</code></pre>"},{"title":"JMeter 测试工具 入门","date":"2017-02-13T03:00:17.000Z","layout":"jmeter","slug":"JMeter-测试工具-入门","_content":"### 说明(入门使用)：\n* jdk版本 1.7 \n* 下载 [apache-jmeter](http://jmeter.apache.org/download_jmeter.cgi) 版本随意 实例中使用的2.13\n* Test Plan 执行计划  执行使用  测试使用 如：回放测试\n* WorkBench 工作区域，准备使用，如：录制\n* --启动 ./bin/jmeter.sh \n\n\n###下面开始自动话测试，录制 ＋ 回放\n\n#####创建线程组和控制器\n \n ![1](http://ol5i7ltje.bkt.clouddn.com/69124311-7331-472F-B9CB-19D667B74D7E.png)\n ![2](http://ol5i7ltje.bkt.clouddn.com/76DDFAC0-EDB8-4378-A370-B0EAEBCABAEC.png)\n ![3](http://ol5i7ltje.bkt.clouddn.com/A850D422-5CF4-40FD-8657-964B3A3DA5C0.png)\n ![4](http://ol5i7ltje.bkt.clouddn.com/EB68A8DB-D06C-4B7C-806E-B0DDF988C9A2.png)\n ![5](http://ol5i7ltje.bkt.clouddn.com/D1658BF8-BF4D-432F-B681-3403C4D0A1C1.png)\n ![6](http://ol5i7ltje.bkt.clouddn.com/05067694-C406-4261-B40F-081A9CF60879.png)\n  \n#####选择目标控制器\n ![7](http://ol5i7ltje.bkt.clouddn.com/E9F57B0D-DD8F-4DA9-8DD9-51C96A325669.png)\n \n#####创建两个监听查询\n ![8](http://ol5i7ltje.bkt.clouddn.com/041812CA-5FD8-486F-B77E-44B65E0B69FC.png)\n ![9](http://ol5i7ltje.bkt.clouddn.com/43CEA00E-37B1-4DE0-A382-1E791A624BB4.png)\n ![10](http://ol5i7ltje.bkt.clouddn.com/9FC2876B-4DCF-4219-ACD7-31FDE6473981.png)\n \n#####开始录制\n ![10](http://ol5i7ltje.bkt.clouddn.com/B70872B0-209B-4F0A-BE8B-F8647B04DCF8.png)\n \n#####已经开始录制了\n ![11](http://ol5i7ltje.bkt.clouddn.com/5B221055-B544-468D-BD04-E434EC658201.png)\n \n#####准备回放，停止录制\n ![11](http://ol5i7ltje.bkt.clouddn.com/77BA9F59-AD43-480B-AACC-AC60E18D7EC6.png) \n \n#####开始回放\n  ![11](http://ol5i7ltje.bkt.clouddn.com/D219EB49-D5DB-4C1C-B6C5-827A36B0A6DB.png) \n ","source":"_posts/JMeter-测试工具-入门.md","raw":"---\ntitle: JMeter 测试工具 入门\ndate: 2017-02-13 11:00:17\ntags: java\nlayout: jmeter\nslug: apache-jmeter\n---\n### 说明(入门使用)：\n* jdk版本 1.7 \n* 下载 [apache-jmeter](http://jmeter.apache.org/download_jmeter.cgi) 版本随意 实例中使用的2.13\n* Test Plan 执行计划  执行使用  测试使用 如：回放测试\n* WorkBench 工作区域，准备使用，如：录制\n* --启动 ./bin/jmeter.sh \n\n\n###下面开始自动话测试，录制 ＋ 回放\n\n#####创建线程组和控制器\n \n ![1](http://ol5i7ltje.bkt.clouddn.com/69124311-7331-472F-B9CB-19D667B74D7E.png)\n ![2](http://ol5i7ltje.bkt.clouddn.com/76DDFAC0-EDB8-4378-A370-B0EAEBCABAEC.png)\n ![3](http://ol5i7ltje.bkt.clouddn.com/A850D422-5CF4-40FD-8657-964B3A3DA5C0.png)\n ![4](http://ol5i7ltje.bkt.clouddn.com/EB68A8DB-D06C-4B7C-806E-B0DDF988C9A2.png)\n ![5](http://ol5i7ltje.bkt.clouddn.com/D1658BF8-BF4D-432F-B681-3403C4D0A1C1.png)\n ![6](http://ol5i7ltje.bkt.clouddn.com/05067694-C406-4261-B40F-081A9CF60879.png)\n  \n#####选择目标控制器\n ![7](http://ol5i7ltje.bkt.clouddn.com/E9F57B0D-DD8F-4DA9-8DD9-51C96A325669.png)\n \n#####创建两个监听查询\n ![8](http://ol5i7ltje.bkt.clouddn.com/041812CA-5FD8-486F-B77E-44B65E0B69FC.png)\n ![9](http://ol5i7ltje.bkt.clouddn.com/43CEA00E-37B1-4DE0-A382-1E791A624BB4.png)\n ![10](http://ol5i7ltje.bkt.clouddn.com/9FC2876B-4DCF-4219-ACD7-31FDE6473981.png)\n \n#####开始录制\n ![10](http://ol5i7ltje.bkt.clouddn.com/B70872B0-209B-4F0A-BE8B-F8647B04DCF8.png)\n \n#####已经开始录制了\n ![11](http://ol5i7ltje.bkt.clouddn.com/5B221055-B544-468D-BD04-E434EC658201.png)\n \n#####准备回放，停止录制\n ![11](http://ol5i7ltje.bkt.clouddn.com/77BA9F59-AD43-480B-AACC-AC60E18D7EC6.png) \n \n#####开始回放\n  ![11](http://ol5i7ltje.bkt.clouddn.com/D219EB49-D5DB-4C1C-B6C5-827A36B0A6DB.png) \n ","published":1,"updated":"2017-02-13T06:16:16.000Z","comments":1,"photos":[],"link":"","_id":"cj0uc8d020001ey5rmaa3fs83","content":"<h3 id=\"说明-入门使用-：\"><a href=\"#说明-入门使用-：\" class=\"headerlink\" title=\"说明(入门使用)：\"></a>说明(入门使用)：</h3><ul>\n<li>jdk版本 1.7 </li>\n<li>下载 <a href=\"http://jmeter.apache.org/download_jmeter.cgi\" target=\"_blank\" rel=\"external\">apache-jmeter</a> 版本随意 实例中使用的2.13</li>\n<li>Test Plan 执行计划  执行使用  测试使用 如：回放测试</li>\n<li>WorkBench 工作区域，准备使用，如：录制</li>\n<li>–启动 ./bin/jmeter.sh </li>\n</ul>\n<p>###下面开始自动话测试，录制 ＋ 回放</p>\n<p>#####创建线程组和控制器</p>\n<p> <img src=\"http://ol5i7ltje.bkt.clouddn.com/69124311-7331-472F-B9CB-19D667B74D7E.png\" alt=\"1\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/76DDFAC0-EDB8-4378-A370-B0EAEBCABAEC.png\" alt=\"2\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/A850D422-5CF4-40FD-8657-964B3A3DA5C0.png\" alt=\"3\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/EB68A8DB-D06C-4B7C-806E-B0DDF988C9A2.png\" alt=\"4\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/D1658BF8-BF4D-432F-B681-3403C4D0A1C1.png\" alt=\"5\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/05067694-C406-4261-B40F-081A9CF60879.png\" alt=\"6\"></p>\n<p>#####选择目标控制器<br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/E9F57B0D-DD8F-4DA9-8DD9-51C96A325669.png\" alt=\"7\"></p>\n<p>#####创建两个监听查询<br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/041812CA-5FD8-486F-B77E-44B65E0B69FC.png\" alt=\"8\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/43CEA00E-37B1-4DE0-A382-1E791A624BB4.png\" alt=\"9\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/9FC2876B-4DCF-4219-ACD7-31FDE6473981.png\" alt=\"10\"></p>\n<p>#####开始录制<br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/B70872B0-209B-4F0A-BE8B-F8647B04DCF8.png\" alt=\"10\"></p>\n<p>#####已经开始录制了<br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/5B221055-B544-468D-BD04-E434EC658201.png\" alt=\"11\"></p>\n<p>#####准备回放，停止录制<br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/77BA9F59-AD43-480B-AACC-AC60E18D7EC6.png\" alt=\"11\"> </p>\n<p>#####开始回放<br>  <img src=\"http://ol5i7ltje.bkt.clouddn.com/D219EB49-D5DB-4C1C-B6C5-827A36B0A6DB.png\" alt=\"11\"> </p>\n","excerpt":"","more":"<h3 id=\"说明-入门使用-：\"><a href=\"#说明-入门使用-：\" class=\"headerlink\" title=\"说明(入门使用)：\"></a>说明(入门使用)：</h3><ul>\n<li>jdk版本 1.7 </li>\n<li>下载 <a href=\"http://jmeter.apache.org/download_jmeter.cgi\">apache-jmeter</a> 版本随意 实例中使用的2.13</li>\n<li>Test Plan 执行计划  执行使用  测试使用 如：回放测试</li>\n<li>WorkBench 工作区域，准备使用，如：录制</li>\n<li>–启动 ./bin/jmeter.sh </li>\n</ul>\n<p>###下面开始自动话测试，录制 ＋ 回放</p>\n<p>#####创建线程组和控制器</p>\n<p> <img src=\"http://ol5i7ltje.bkt.clouddn.com/69124311-7331-472F-B9CB-19D667B74D7E.png\" alt=\"1\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/76DDFAC0-EDB8-4378-A370-B0EAEBCABAEC.png\" alt=\"2\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/A850D422-5CF4-40FD-8657-964B3A3DA5C0.png\" alt=\"3\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/EB68A8DB-D06C-4B7C-806E-B0DDF988C9A2.png\" alt=\"4\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/D1658BF8-BF4D-432F-B681-3403C4D0A1C1.png\" alt=\"5\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/05067694-C406-4261-B40F-081A9CF60879.png\" alt=\"6\"></p>\n<p>#####选择目标控制器<br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/E9F57B0D-DD8F-4DA9-8DD9-51C96A325669.png\" alt=\"7\"></p>\n<p>#####创建两个监听查询<br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/041812CA-5FD8-486F-B77E-44B65E0B69FC.png\" alt=\"8\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/43CEA00E-37B1-4DE0-A382-1E791A624BB4.png\" alt=\"9\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/9FC2876B-4DCF-4219-ACD7-31FDE6473981.png\" alt=\"10\"></p>\n<p>#####开始录制<br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/B70872B0-209B-4F0A-BE8B-F8647B04DCF8.png\" alt=\"10\"></p>\n<p>#####已经开始录制了<br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/5B221055-B544-468D-BD04-E434EC658201.png\" alt=\"11\"></p>\n<p>#####准备回放，停止录制<br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/77BA9F59-AD43-480B-AACC-AC60E18D7EC6.png\" alt=\"11\"> </p>\n<p>#####开始回放<br>  <img src=\"http://ol5i7ltje.bkt.clouddn.com/D219EB49-D5DB-4C1C-B6C5-827A36B0A6DB.png\" alt=\"11\"> </p>\n"},{"title":"crontab 定时任务","date":"2017-02-13T06:43:34.000Z","layout":"crontab","slug":"crontab-定时任务","_content":"\n1 检查  crontab -l 是否安装\n \n 检查crond服务是否启动 service crond status\n\n 安装cron\n \n`\nyum install vixie-cron\n`\n\n`\nyum install crontabs\n`\n\n2.开始\ncrontab -e\n测试每分钟打印到文件中\n*/1 * * * * date >> /tmp/log.txt\n\n`\ncrontab -l  可以查看crontab 任务\n`\n\n查看日志\n\n`\n/var/mail\n`\n\n开机执行\n`\n@reboot 执行 xx.sh\n`\n\n或者\n\n`\nvim /etc/re.d/re.locate 执行  xx.sh\n`\n\n >\n*/1 * * * * date >> /tmp/log.txt\n* * * * * COMMAND\n分钟0–59  小时 0-23 日期 1-31 月份 1-12 星期 0-7\n\n每晚 21:30 重启服务\n30 21 * * *\n\n每月1 ，10 22 日 4:45 重启\n45 4 1,10,22 * *\n\n每月1到10日 4:45  重启\n45 4 1-10 * *\n\n每2分钟 重启\n*/2 * * * *\n\n1-59/2 * * * *\n\n晚上11点到 早7点 每隔一小时重启\n0 23-7/1 * * *\n\n每天 18:00 - 23:00 每30分钟\n0,30 18-23 * * *\n0-59/30 18-23 * * *\n >","source":"_posts/crontab-定时任务.md","raw":"---\ntitle: crontab 定时任务\ndate: 2017-02-13 14:43:34\ntags: linux\nlayout: crontab\nslug: linux-crontab\n---\n\n1 检查  crontab -l 是否安装\n \n 检查crond服务是否启动 service crond status\n\n 安装cron\n \n`\nyum install vixie-cron\n`\n\n`\nyum install crontabs\n`\n\n2.开始\ncrontab -e\n测试每分钟打印到文件中\n*/1 * * * * date >> /tmp/log.txt\n\n`\ncrontab -l  可以查看crontab 任务\n`\n\n查看日志\n\n`\n/var/mail\n`\n\n开机执行\n`\n@reboot 执行 xx.sh\n`\n\n或者\n\n`\nvim /etc/re.d/re.locate 执行  xx.sh\n`\n\n >\n*/1 * * * * date >> /tmp/log.txt\n* * * * * COMMAND\n分钟0–59  小时 0-23 日期 1-31 月份 1-12 星期 0-7\n\n每晚 21:30 重启服务\n30 21 * * *\n\n每月1 ，10 22 日 4:45 重启\n45 4 1,10,22 * *\n\n每月1到10日 4:45  重启\n45 4 1-10 * *\n\n每2分钟 重启\n*/2 * * * *\n\n1-59/2 * * * *\n\n晚上11点到 早7点 每隔一小时重启\n0 23-7/1 * * *\n\n每天 18:00 - 23:00 每30分钟\n0,30 18-23 * * *\n0-59/30 18-23 * * *\n >","published":1,"updated":"2017-02-13T06:48:53.000Z","comments":1,"photos":[],"link":"","_id":"cj0uc8d070003ey5rvrlkpad2","content":"<p>1 检查  crontab -l 是否安装</p>\n<p> 检查crond服务是否启动 service crond status</p>\n<p> 安装cron</p>\n<p><code>yum install vixie-cron</code></p>\n<p><code>yum install crontabs</code></p>\n<p>2.开始<br>crontab -e<br>测试每分钟打印到文件中<br><em>/1 </em> <em> </em> * date &gt;&gt; /tmp/log.txt</p>\n<p><code>crontab -l  可以查看crontab 任务</code></p>\n<p>查看日志</p>\n<p><code>/var/mail</code></p>\n<p>开机执行<br><code>@reboot 执行 xx.sh</code></p>\n<p>或者</p>\n<p><code>vim /etc/re.d/re.locate 执行  xx.sh</code></p>\n<p> &gt;<br><em>/1 </em> <em> </em> * date &gt;&gt; /tmp/log.txt</p>\n<ul>\n<li><ul>\n<li><ul>\n<li><ul>\n<li><ul>\n<li>COMMAND<br>分钟0–59  小时 0-23 日期 1-31 月份 1-12 星期 0-7</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>每晚 21:30 重启服务<br>30 21 <em> </em> *</p>\n<p>每月1 ，10 22 日 4:45 重启<br>45 4 1,10,22 <em> </em></p>\n<p>每月1到10日 4:45  重启<br>45 4 1-10 <em> </em></p>\n<p>每2分钟 重启<br><em>/2 </em> <em> </em> *</p>\n<p>1-59/2 <em> </em> <em> </em></p>\n<p>晚上11点到 早7点 每隔一小时重启<br>0 23-7/1 <em> </em> *</p>\n<p>每天 18:00 - 23:00 每30分钟<br>0,30 18-23 <em> </em> <em><br>0-59/30 18-23 </em> <em> </em><br> &gt;</p>\n","excerpt":"","more":"<p>1 检查  crontab -l 是否安装</p>\n<p> 检查crond服务是否启动 service crond status</p>\n<p> 安装cron</p>\n<p><code>yum install vixie-cron</code></p>\n<p><code>yum install crontabs</code></p>\n<p>2.开始<br>crontab -e<br>测试每分钟打印到文件中<br><em>/1 </em> <em> </em> * date &gt;&gt; /tmp/log.txt</p>\n<p><code>crontab -l  可以查看crontab 任务</code></p>\n<p>查看日志</p>\n<p><code>/var/mail</code></p>\n<p>开机执行<br><code>@reboot 执行 xx.sh</code></p>\n<p>或者</p>\n<p><code>vim /etc/re.d/re.locate 执行  xx.sh</code></p>\n<p> &gt;<br><em>/1 </em> <em> </em> * date &gt;&gt; /tmp/log.txt</p>\n<ul>\n<li><ul>\n<li><ul>\n<li><ul>\n<li><ul>\n<li>COMMAND<br>分钟0–59  小时 0-23 日期 1-31 月份 1-12 星期 0-7</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>每晚 21:30 重启服务<br>30 21 <em> </em> *</p>\n<p>每月1 ，10 22 日 4:45 重启<br>45 4 1,10,22 <em> </em></p>\n<p>每月1到10日 4:45  重启<br>45 4 1-10 <em> </em></p>\n<p>每2分钟 重启<br><em>/2 </em> <em> </em> *</p>\n<p>1-59/2 <em> </em> <em> </em></p>\n<p>晚上11点到 早7点 每隔一小时重启<br>0 23-7/1 <em> </em> *</p>\n<p>每天 18:00 - 23:00 每30分钟<br>0,30 18-23 <em> </em> <em><br>0-59/30 18-23 </em> <em> </em><br> &gt;</p>\n"},{"title":"java base64加密概述","date":"2017-03-22T03:02:19.000Z","layout":"clean-blog","slug":"java-base64加密概述","_content":" \n### 要点\n* 安全和密码\n* 常用安全体系介绍\n* 密码分类及java的安全组成\n* JDK相关包及第三扩展\n* Base64算法介绍\n\n>掌握用法\n深入理解\n不断实践\n反复总结\n再次深入理解实践\n\n\n\n### 密码常用术语（一）\n* 明文： 待加密信息\n* 密文: 经过加密后的明文\n* 加密：明文转为密文的过程\n* 加密算法：明文转为密文的转换算法\n* 加密密钥：通过加密算法进行加密操作用的密钥\n* 解密：将密文转化为明文的过层\n* 解密算法：密文转明文算法\n* 解密蜜钥：通过解密算法进行接密操作的密钥\n \n### 密码常用术语（二）\n* 密码分析：截获密文者试图通过分析截获得密文从而推断出原来的明文或密钥过程\n* 主动攻击：攻击者非法入侵密码系统，采用伪造，修改，删除等手段向系统注入假消息进进行欺骗(对密文具有破坏作用)\n* 被动攻击：对一个保密系统采取截获密文并对其进行分析和攻击（对密文没有破坏作用）\n* 密码体制：由明文空间，密文空间，密钥空间，加密算法和解密算法五部分构成\n \n### 密码常用术语（三）\n* 密码协议：也是安全协议,指以密码学为基础的消息交换的通信协议，目前是网络环境中提供安全的服务\n* 密码系统: 指用于加密，解密系统\n* 柯克霍夫原则：数据的安全基于密钥而不是算法的保密。既系统的安全取决于密钥，对密钥 保密，对算法公开 －－－ 现代密码学设计的基础原则\n\n\n### 密码分类\n * 古典密码：以字符为基本加密单位\n * 现代密码：以信息块为基本加密单元\n \n * 保密内容算法\n \n|名称 | 说明 | 应用领域 |类别|\n|----|------|--------|--- |\n|受限制算法 |  算法保密性基于保持算法的秘密，(算法保密)  | 军事    |  古典密码  |\n|基于密钥算法 | 算法的保密性基于对密钥的保密(算法公开)  |  |现代密码|\n \n * 密码体制\n \n|名称 | 别名 | 详细说明|\n|----|------|--------|---|\n|对称密码   |单钥密码或私钥密码 | 指加密密钥于解密密钥相同            |\n|非对称密码 |双钥密码或公钥密码 | 指加密密钥与解密密钥不同，密钥分公钥和私钥|\n|对称密码算法 | 单钥密码算法或私钥密码算法| 指应用于对称密码的加密，解密算法|\n|非对称密码算法| 双钥密码算法或公钥密码算法| 指对应非对称密码加密和解密算法|\n\n* 明文处理方法\n  * 分组加密: 指加密时将名分成固定长度的组，用同一密钥和算法对没一块加密，输出也是固定长度的密文。多用于网络加密\n  * 流密码：也称序列密码。指加密时每次加密一位或者一个字节明文(产生一串序列来作为加密的密钥流，从密钥流中按规则依次选取密钥，这些不同的密钥分别来加密每个字符)\n* 散列函数 \n  * 散列函数验证数据完整性: 长度不限制 哈希值容易计算 散列运算过程不可逆\n     * 消息摘要算法MD5等\n     * SHA --- 安全散列算法\n     * MAC --- 消息认证算法\n* 数字签名 主要针对以数字形式存储的消息进行的处理    \n     \n     \n###  安全体系 \n* OSI (Open System Interconnection) 开发通信 网络7层模型\n* TCP/IP安全体系 \n \n  \n\n### java安全组成部分 \n \n * JCA  \n * JCE \n * JSSE \n * JAAS \n \n 可以修改JDK添加第三方加解密提供者 $JAVA_HOME/jre/lib/security/java.security \n\n### 相关java包，类\n\n* java.security\n  * 消息摘要 \n* javax.crypot\n  * 安全消息摘要，消息认证（鉴别）码\n* java.net.ssl\n   * 安全套接字，网络传输\n### 第三方java扩展\n* Bouncy Castle\n  * 两种支持方案: 1) 配置  2) 调用\n* Commons CodeC\n  * Apache \n  * Base64 二进制 十六进制,字符集编码\n  * Url 编码/解码\n  \n\n### 实现Base64算法\n  \n  * Base64算法 提供者 1.Jdk 2.Commons Codec 3.Bouncy Castle\n\n创建maven项目，pom.xml\n\n````\n<dependencies>\n  <dependency>\n        <groupId>org.bouncycastle</groupId>\n        <artifactId>bcprov-jdk16</artifactId>\n        <version>1.46</version>\n    </dependency>\n    <dependency>\n        <groupId>commons-codec</groupId>\n        <artifactId>commons-codec</artifactId>\n        <version>1.10</version>\n    </dependency>\n    </dependencies>\n    \n````\n  \n\n\nBase64Test.java\n\n\n````\nimport org.apache.commons.codec.binary.Base64;\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n \npublic class Base64Test {\n\n    private static String src=\"yundongshequ security base64\";\n\n   public static void main(String [] args) throws  Exception{\n\n       System.out.println(\"-------jdkBase64---------\");\n       jdkBase64();\n\n       System.out.println(\"-------commonsCodeBase64---------\");\n       commonsCodeBase64();\n\n       System.out.println(\"-------bouncyCastleBase64---------\");\n       bouncyCastleBase64();\n   }\n\n    //jdk实现\n   public static void  jdkBase64()throws  Exception{\n\n       BASE64Encoder encoder = new BASE64Encoder();\n       String encode = encoder.encode(src.getBytes());\n       System.out.println(\"encode: \"+encode);\n\n       BASE64Decoder decoder = new BASE64Decoder();\n       byte[] decodeBuffer = decoder.decodeBuffer(encode);\n\n       System.out.println(\"decode: \"+new String(decodeBuffer));\n\n   }\n\n   //Commons Codec\n    public static void commonsCodeBase64(){\n\n       byte[] encodeBase64 = Base64.encodeBase64(src.getBytes());\n        System.out.println(\"encode: \"+new String(encodeBase64));\n\n        byte[] decodeBase64 =  Base64.decodeBase64(encodeBase64);\n\n        System.out.println(\"decode: \"+new String(decodeBase64));\n\n    }\n\n    //Bouncy Castle\n    public static void bouncyCastleBase64(){\n\n        byte[] encodeBase64=  org.bouncycastle.util.encoders.Base64.encode(src.getBytes());\n        System.out.println(\"encode: \"+new String(encodeBase64));\n        byte[] decodeBase64 =  org.bouncycastle.util.encoders.Base64.decode(encodeBase64);\n\n        System.out.println(\"decode: \"+new String(decodeBase64));\n\n    }\n\n\n\n}\n\n\n````\n\n### Base64算法应用场景\n\n * e-mail,密钥,证书文件\n * 产生： 邮件的历史问题\n * 定义: 基于64个字符的编码算法\n * 关于RFC2045\n * 衍生: Base16,32 Url Base64\n * Base64算法与加密算法都是公开的\n\n> 我们知道在计算机中任何数据都是按ascii码存储的，而ascii码的128～255之间的值是不可见字符。而在网络上交换数据时，比如说从A地传到B地，往往要经过多个路由设备，由于不同的设备对字符的处理方式有一些不同，这样那些不可见字符就有可能被处理错误，这是不利于传输的。所以就先把数据先做一个Base64编码，统统变成可见字符，这样出错的可能性就大降低了\n\n \n\n\n\n\n","source":"_posts/java-base64加密概述.md","raw":"---\ntitle: java base64加密概述\ndate: 2017-03-22 11:02:19\ntags: java\nlayout: clean-blog\nslug: java-base64\n\n---\n \n### 要点\n* 安全和密码\n* 常用安全体系介绍\n* 密码分类及java的安全组成\n* JDK相关包及第三扩展\n* Base64算法介绍\n\n>掌握用法\n深入理解\n不断实践\n反复总结\n再次深入理解实践\n\n\n\n### 密码常用术语（一）\n* 明文： 待加密信息\n* 密文: 经过加密后的明文\n* 加密：明文转为密文的过程\n* 加密算法：明文转为密文的转换算法\n* 加密密钥：通过加密算法进行加密操作用的密钥\n* 解密：将密文转化为明文的过层\n* 解密算法：密文转明文算法\n* 解密蜜钥：通过解密算法进行接密操作的密钥\n \n### 密码常用术语（二）\n* 密码分析：截获密文者试图通过分析截获得密文从而推断出原来的明文或密钥过程\n* 主动攻击：攻击者非法入侵密码系统，采用伪造，修改，删除等手段向系统注入假消息进进行欺骗(对密文具有破坏作用)\n* 被动攻击：对一个保密系统采取截获密文并对其进行分析和攻击（对密文没有破坏作用）\n* 密码体制：由明文空间，密文空间，密钥空间，加密算法和解密算法五部分构成\n \n### 密码常用术语（三）\n* 密码协议：也是安全协议,指以密码学为基础的消息交换的通信协议，目前是网络环境中提供安全的服务\n* 密码系统: 指用于加密，解密系统\n* 柯克霍夫原则：数据的安全基于密钥而不是算法的保密。既系统的安全取决于密钥，对密钥 保密，对算法公开 －－－ 现代密码学设计的基础原则\n\n\n### 密码分类\n * 古典密码：以字符为基本加密单位\n * 现代密码：以信息块为基本加密单元\n \n * 保密内容算法\n \n|名称 | 说明 | 应用领域 |类别|\n|----|------|--------|--- |\n|受限制算法 |  算法保密性基于保持算法的秘密，(算法保密)  | 军事    |  古典密码  |\n|基于密钥算法 | 算法的保密性基于对密钥的保密(算法公开)  |  |现代密码|\n \n * 密码体制\n \n|名称 | 别名 | 详细说明|\n|----|------|--------|---|\n|对称密码   |单钥密码或私钥密码 | 指加密密钥于解密密钥相同            |\n|非对称密码 |双钥密码或公钥密码 | 指加密密钥与解密密钥不同，密钥分公钥和私钥|\n|对称密码算法 | 单钥密码算法或私钥密码算法| 指应用于对称密码的加密，解密算法|\n|非对称密码算法| 双钥密码算法或公钥密码算法| 指对应非对称密码加密和解密算法|\n\n* 明文处理方法\n  * 分组加密: 指加密时将名分成固定长度的组，用同一密钥和算法对没一块加密，输出也是固定长度的密文。多用于网络加密\n  * 流密码：也称序列密码。指加密时每次加密一位或者一个字节明文(产生一串序列来作为加密的密钥流，从密钥流中按规则依次选取密钥，这些不同的密钥分别来加密每个字符)\n* 散列函数 \n  * 散列函数验证数据完整性: 长度不限制 哈希值容易计算 散列运算过程不可逆\n     * 消息摘要算法MD5等\n     * SHA --- 安全散列算法\n     * MAC --- 消息认证算法\n* 数字签名 主要针对以数字形式存储的消息进行的处理    \n     \n     \n###  安全体系 \n* OSI (Open System Interconnection) 开发通信 网络7层模型\n* TCP/IP安全体系 \n \n  \n\n### java安全组成部分 \n \n * JCA  \n * JCE \n * JSSE \n * JAAS \n \n 可以修改JDK添加第三方加解密提供者 $JAVA_HOME/jre/lib/security/java.security \n\n### 相关java包，类\n\n* java.security\n  * 消息摘要 \n* javax.crypot\n  * 安全消息摘要，消息认证（鉴别）码\n* java.net.ssl\n   * 安全套接字，网络传输\n### 第三方java扩展\n* Bouncy Castle\n  * 两种支持方案: 1) 配置  2) 调用\n* Commons CodeC\n  * Apache \n  * Base64 二进制 十六进制,字符集编码\n  * Url 编码/解码\n  \n\n### 实现Base64算法\n  \n  * Base64算法 提供者 1.Jdk 2.Commons Codec 3.Bouncy Castle\n\n创建maven项目，pom.xml\n\n````\n<dependencies>\n  <dependency>\n        <groupId>org.bouncycastle</groupId>\n        <artifactId>bcprov-jdk16</artifactId>\n        <version>1.46</version>\n    </dependency>\n    <dependency>\n        <groupId>commons-codec</groupId>\n        <artifactId>commons-codec</artifactId>\n        <version>1.10</version>\n    </dependency>\n    </dependencies>\n    \n````\n  \n\n\nBase64Test.java\n\n\n````\nimport org.apache.commons.codec.binary.Base64;\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n \npublic class Base64Test {\n\n    private static String src=\"yundongshequ security base64\";\n\n   public static void main(String [] args) throws  Exception{\n\n       System.out.println(\"-------jdkBase64---------\");\n       jdkBase64();\n\n       System.out.println(\"-------commonsCodeBase64---------\");\n       commonsCodeBase64();\n\n       System.out.println(\"-------bouncyCastleBase64---------\");\n       bouncyCastleBase64();\n   }\n\n    //jdk实现\n   public static void  jdkBase64()throws  Exception{\n\n       BASE64Encoder encoder = new BASE64Encoder();\n       String encode = encoder.encode(src.getBytes());\n       System.out.println(\"encode: \"+encode);\n\n       BASE64Decoder decoder = new BASE64Decoder();\n       byte[] decodeBuffer = decoder.decodeBuffer(encode);\n\n       System.out.println(\"decode: \"+new String(decodeBuffer));\n\n   }\n\n   //Commons Codec\n    public static void commonsCodeBase64(){\n\n       byte[] encodeBase64 = Base64.encodeBase64(src.getBytes());\n        System.out.println(\"encode: \"+new String(encodeBase64));\n\n        byte[] decodeBase64 =  Base64.decodeBase64(encodeBase64);\n\n        System.out.println(\"decode: \"+new String(decodeBase64));\n\n    }\n\n    //Bouncy Castle\n    public static void bouncyCastleBase64(){\n\n        byte[] encodeBase64=  org.bouncycastle.util.encoders.Base64.encode(src.getBytes());\n        System.out.println(\"encode: \"+new String(encodeBase64));\n        byte[] decodeBase64 =  org.bouncycastle.util.encoders.Base64.decode(encodeBase64);\n\n        System.out.println(\"decode: \"+new String(decodeBase64));\n\n    }\n\n\n\n}\n\n\n````\n\n### Base64算法应用场景\n\n * e-mail,密钥,证书文件\n * 产生： 邮件的历史问题\n * 定义: 基于64个字符的编码算法\n * 关于RFC2045\n * 衍生: Base16,32 Url Base64\n * Base64算法与加密算法都是公开的\n\n> 我们知道在计算机中任何数据都是按ascii码存储的，而ascii码的128～255之间的值是不可见字符。而在网络上交换数据时，比如说从A地传到B地，往往要经过多个路由设备，由于不同的设备对字符的处理方式有一些不同，这样那些不可见字符就有可能被处理错误，这是不利于传输的。所以就先把数据先做一个Base64编码，统统变成可见字符，这样出错的可能性就大降低了\n\n \n\n\n\n\n","published":1,"updated":"2017-03-29T01:56:59.000Z","comments":1,"photos":[],"link":"","_id":"cj0uc8d090004ey5rx8nktxla","content":"<h3 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h3><ul>\n<li>安全和密码</li>\n<li>常用安全体系介绍</li>\n<li>密码分类及java的安全组成</li>\n<li>JDK相关包及第三扩展</li>\n<li>Base64算法介绍</li>\n</ul>\n<blockquote>\n<p>掌握用法<br>深入理解<br>不断实践<br>反复总结<br>再次深入理解实践</p>\n</blockquote>\n<h3 id=\"密码常用术语（一）\"><a href=\"#密码常用术语（一）\" class=\"headerlink\" title=\"密码常用术语（一）\"></a>密码常用术语（一）</h3><ul>\n<li>明文： 待加密信息</li>\n<li>密文: 经过加密后的明文</li>\n<li>加密：明文转为密文的过程</li>\n<li>加密算法：明文转为密文的转换算法</li>\n<li>加密密钥：通过加密算法进行加密操作用的密钥</li>\n<li>解密：将密文转化为明文的过层</li>\n<li>解密算法：密文转明文算法</li>\n<li>解密蜜钥：通过解密算法进行接密操作的密钥</li>\n</ul>\n<h3 id=\"密码常用术语（二）\"><a href=\"#密码常用术语（二）\" class=\"headerlink\" title=\"密码常用术语（二）\"></a>密码常用术语（二）</h3><ul>\n<li>密码分析：截获密文者试图通过分析截获得密文从而推断出原来的明文或密钥过程</li>\n<li>主动攻击：攻击者非法入侵密码系统，采用伪造，修改，删除等手段向系统注入假消息进进行欺骗(对密文具有破坏作用)</li>\n<li>被动攻击：对一个保密系统采取截获密文并对其进行分析和攻击（对密文没有破坏作用）</li>\n<li>密码体制：由明文空间，密文空间，密钥空间，加密算法和解密算法五部分构成</li>\n</ul>\n<h3 id=\"密码常用术语（三）\"><a href=\"#密码常用术语（三）\" class=\"headerlink\" title=\"密码常用术语（三）\"></a>密码常用术语（三）</h3><ul>\n<li>密码协议：也是安全协议,指以密码学为基础的消息交换的通信协议，目前是网络环境中提供安全的服务</li>\n<li>密码系统: 指用于加密，解密系统</li>\n<li>柯克霍夫原则：数据的安全基于密钥而不是算法的保密。既系统的安全取决于密钥，对密钥 保密，对算法公开 －－－ 现代密码学设计的基础原则</li>\n</ul>\n<h3 id=\"密码分类\"><a href=\"#密码分类\" class=\"headerlink\" title=\"密码分类\"></a>密码分类</h3><ul>\n<li>古典密码：以字符为基本加密单位</li>\n<li><p>现代密码：以信息块为基本加密单元</p>\n</li>\n<li><p>保密内容算法</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>说明</th>\n<th>应用领域</th>\n<th>类别</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>受限制算法</td>\n<td>算法保密性基于保持算法的秘密，(算法保密)</td>\n<td>军事</td>\n<td>古典密码</td>\n</tr>\n<tr>\n<td>基于密钥算法</td>\n<td>算法的保密性基于对密钥的保密(算法公开)</td>\n<td></td>\n<td>现代密码</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>密码体制</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>别名</th>\n<th>详细说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>对称密码</td>\n<td>单钥密码或私钥密码</td>\n<td>指加密密钥于解密密钥相同</td>\n</tr>\n<tr>\n<td>非对称密码</td>\n<td>双钥密码或公钥密码</td>\n<td>指加密密钥与解密密钥不同，密钥分公钥和私钥</td>\n</tr>\n<tr>\n<td>对称密码算法</td>\n<td>单钥密码算法或私钥密码算法</td>\n<td>指应用于对称密码的加密，解密算法</td>\n</tr>\n<tr>\n<td>非对称密码算法</td>\n<td>双钥密码算法或公钥密码算法</td>\n<td>指对应非对称密码加密和解密算法</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>明文处理方法<ul>\n<li>分组加密: 指加密时将名分成固定长度的组，用同一密钥和算法对没一块加密，输出也是固定长度的密文。多用于网络加密</li>\n<li>流密码：也称序列密码。指加密时每次加密一位或者一个字节明文(产生一串序列来作为加密的密钥流，从密钥流中按规则依次选取密钥，这些不同的密钥分别来加密每个字符)</li>\n</ul>\n</li>\n<li>散列函数 <ul>\n<li>散列函数验证数据完整性: 长度不限制 哈希值容易计算 散列运算过程不可逆<ul>\n<li>消息摘要算法MD5等</li>\n<li>SHA — 安全散列算法</li>\n<li>MAC — 消息认证算法</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>数字签名 主要针对以数字形式存储的消息进行的处理    </li>\n</ul>\n<h3 id=\"安全体系\"><a href=\"#安全体系\" class=\"headerlink\" title=\"安全体系\"></a>安全体系</h3><ul>\n<li>OSI (Open System Interconnection) 开发通信 网络7层模型</li>\n<li>TCP/IP安全体系 </li>\n</ul>\n<h3 id=\"java安全组成部分\"><a href=\"#java安全组成部分\" class=\"headerlink\" title=\"java安全组成部分\"></a>java安全组成部分</h3><ul>\n<li>JCA  </li>\n<li>JCE </li>\n<li>JSSE </li>\n<li><p>JAAS </p>\n<p>可以修改JDK添加第三方加解密提供者 $JAVA_HOME/jre/lib/security/java.security </p>\n</li>\n</ul>\n<h3 id=\"相关java包，类\"><a href=\"#相关java包，类\" class=\"headerlink\" title=\"相关java包，类\"></a>相关java包，类</h3><ul>\n<li>java.security<ul>\n<li>消息摘要 </li>\n</ul>\n</li>\n<li>javax.crypot<ul>\n<li>安全消息摘要，消息认证（鉴别）码</li>\n</ul>\n</li>\n<li>java.net.ssl<ul>\n<li>安全套接字，网络传输<h3 id=\"第三方java扩展\"><a href=\"#第三方java扩展\" class=\"headerlink\" title=\"第三方java扩展\"></a>第三方java扩展</h3></li>\n</ul>\n</li>\n<li>Bouncy Castle<ul>\n<li>两种支持方案: 1) 配置  2) 调用</li>\n</ul>\n</li>\n<li>Commons CodeC<ul>\n<li>Apache </li>\n<li>Base64 二进制 十六进制,字符集编码</li>\n<li>Url 编码/解码</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"实现Base64算法\"><a href=\"#实现Base64算法\" class=\"headerlink\" title=\"实现Base64算法\"></a>实现Base64算法</h3><ul>\n<li>Base64算法 提供者 1.Jdk 2.Commons Codec 3.Bouncy Castle</li>\n</ul>\n<p>创建maven项目，pom.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;dependencies&gt;</div><div class=\"line\">  &lt;dependency&gt;</div><div class=\"line\">        &lt;groupId&gt;org.bouncycastle&lt;/groupId&gt;</div><div class=\"line\">        &lt;artifactId&gt;bcprov-jdk16&lt;/artifactId&gt;</div><div class=\"line\">        &lt;version&gt;1.46&lt;/version&gt;</div><div class=\"line\">    &lt;/dependency&gt;</div><div class=\"line\">    &lt;dependency&gt;</div><div class=\"line\">        &lt;groupId&gt;commons-codec&lt;/groupId&gt;</div><div class=\"line\">        &lt;artifactId&gt;commons-codec&lt;/artifactId&gt;</div><div class=\"line\">        &lt;version&gt;1.10&lt;/version&gt;</div><div class=\"line\">    &lt;/dependency&gt;</div><div class=\"line\">    &lt;/dependencies&gt;</div></pre></td></tr></table></figure>\n<p>Base64Test.java</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\">import org.apache.commons.codec.binary.Base64;</div><div class=\"line\">import sun.misc.BASE64Decoder;</div><div class=\"line\">import sun.misc.BASE64Encoder;</div><div class=\"line\"> </div><div class=\"line\">public class Base64Test &#123;</div><div class=\"line\"></div><div class=\"line\">    private static String src=&quot;yundongshequ security base64&quot;;</div><div class=\"line\"></div><div class=\"line\">   public static void main(String [] args) throws  Exception&#123;</div><div class=\"line\"></div><div class=\"line\">       System.out.println(&quot;-------jdkBase64---------&quot;);</div><div class=\"line\">       jdkBase64();</div><div class=\"line\"></div><div class=\"line\">       System.out.println(&quot;-------commonsCodeBase64---------&quot;);</div><div class=\"line\">       commonsCodeBase64();</div><div class=\"line\"></div><div class=\"line\">       System.out.println(&quot;-------bouncyCastleBase64---------&quot;);</div><div class=\"line\">       bouncyCastleBase64();</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">    //jdk实现</div><div class=\"line\">   public static void  jdkBase64()throws  Exception&#123;</div><div class=\"line\"></div><div class=\"line\">       BASE64Encoder encoder = new BASE64Encoder();</div><div class=\"line\">       String encode = encoder.encode(src.getBytes());</div><div class=\"line\">       System.out.println(&quot;encode: &quot;+encode);</div><div class=\"line\"></div><div class=\"line\">       BASE64Decoder decoder = new BASE64Decoder();</div><div class=\"line\">       byte[] decodeBuffer = decoder.decodeBuffer(encode);</div><div class=\"line\"></div><div class=\"line\">       System.out.println(&quot;decode: &quot;+new String(decodeBuffer));</div><div class=\"line\"></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   //Commons Codec</div><div class=\"line\">    public static void commonsCodeBase64()&#123;</div><div class=\"line\"></div><div class=\"line\">       byte[] encodeBase64 = Base64.encodeBase64(src.getBytes());</div><div class=\"line\">        System.out.println(&quot;encode: &quot;+new String(encodeBase64));</div><div class=\"line\"></div><div class=\"line\">        byte[] decodeBase64 =  Base64.decodeBase64(encodeBase64);</div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;decode: &quot;+new String(decodeBase64));</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //Bouncy Castle</div><div class=\"line\">    public static void bouncyCastleBase64()&#123;</div><div class=\"line\"></div><div class=\"line\">        byte[] encodeBase64=  org.bouncycastle.util.encoders.Base64.encode(src.getBytes());</div><div class=\"line\">        System.out.println(&quot;encode: &quot;+new String(encodeBase64));</div><div class=\"line\">        byte[] decodeBase64 =  org.bouncycastle.util.encoders.Base64.decode(encodeBase64);</div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;decode: &quot;+new String(decodeBase64));</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Base64算法应用场景\"><a href=\"#Base64算法应用场景\" class=\"headerlink\" title=\"Base64算法应用场景\"></a>Base64算法应用场景</h3><ul>\n<li>e-mail,密钥,证书文件</li>\n<li>产生： 邮件的历史问题</li>\n<li>定义: 基于64个字符的编码算法</li>\n<li>关于RFC2045</li>\n<li>衍生: Base16,32 Url Base64</li>\n<li>Base64算法与加密算法都是公开的</li>\n</ul>\n<blockquote>\n<p>我们知道在计算机中任何数据都是按ascii码存储的，而ascii码的128～255之间的值是不可见字符。而在网络上交换数据时，比如说从A地传到B地，往往要经过多个路由设备，由于不同的设备对字符的处理方式有一些不同，这样那些不可见字符就有可能被处理错误，这是不利于传输的。所以就先把数据先做一个Base64编码，统统变成可见字符，这样出错的可能性就大降低了</p>\n</blockquote>\n","excerpt":"","more":"<h3 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h3><ul>\n<li>安全和密码</li>\n<li>常用安全体系介绍</li>\n<li>密码分类及java的安全组成</li>\n<li>JDK相关包及第三扩展</li>\n<li>Base64算法介绍</li>\n</ul>\n<blockquote>\n<p>掌握用法<br>深入理解<br>不断实践<br>反复总结<br>再次深入理解实践</p>\n</blockquote>\n<h3 id=\"密码常用术语（一）\"><a href=\"#密码常用术语（一）\" class=\"headerlink\" title=\"密码常用术语（一）\"></a>密码常用术语（一）</h3><ul>\n<li>明文： 待加密信息</li>\n<li>密文: 经过加密后的明文</li>\n<li>加密：明文转为密文的过程</li>\n<li>加密算法：明文转为密文的转换算法</li>\n<li>加密密钥：通过加密算法进行加密操作用的密钥</li>\n<li>解密：将密文转化为明文的过层</li>\n<li>解密算法：密文转明文算法</li>\n<li>解密蜜钥：通过解密算法进行接密操作的密钥</li>\n</ul>\n<h3 id=\"密码常用术语（二）\"><a href=\"#密码常用术语（二）\" class=\"headerlink\" title=\"密码常用术语（二）\"></a>密码常用术语（二）</h3><ul>\n<li>密码分析：截获密文者试图通过分析截获得密文从而推断出原来的明文或密钥过程</li>\n<li>主动攻击：攻击者非法入侵密码系统，采用伪造，修改，删除等手段向系统注入假消息进进行欺骗(对密文具有破坏作用)</li>\n<li>被动攻击：对一个保密系统采取截获密文并对其进行分析和攻击（对密文没有破坏作用）</li>\n<li>密码体制：由明文空间，密文空间，密钥空间，加密算法和解密算法五部分构成</li>\n</ul>\n<h3 id=\"密码常用术语（三）\"><a href=\"#密码常用术语（三）\" class=\"headerlink\" title=\"密码常用术语（三）\"></a>密码常用术语（三）</h3><ul>\n<li>密码协议：也是安全协议,指以密码学为基础的消息交换的通信协议，目前是网络环境中提供安全的服务</li>\n<li>密码系统: 指用于加密，解密系统</li>\n<li>柯克霍夫原则：数据的安全基于密钥而不是算法的保密。既系统的安全取决于密钥，对密钥 保密，对算法公开 －－－ 现代密码学设计的基础原则</li>\n</ul>\n<h3 id=\"密码分类\"><a href=\"#密码分类\" class=\"headerlink\" title=\"密码分类\"></a>密码分类</h3><ul>\n<li>古典密码：以字符为基本加密单位</li>\n<li><p>现代密码：以信息块为基本加密单元</p>\n</li>\n<li><p>保密内容算法</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>说明</th>\n<th>应用领域</th>\n<th>类别</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>受限制算法</td>\n<td>算法保密性基于保持算法的秘密，(算法保密)</td>\n<td>军事</td>\n<td>古典密码</td>\n</tr>\n<tr>\n<td>基于密钥算法</td>\n<td>算法的保密性基于对密钥的保密(算法公开)</td>\n<td></td>\n<td>现代密码</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>密码体制</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>别名</th>\n<th>详细说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>对称密码</td>\n<td>单钥密码或私钥密码</td>\n<td>指加密密钥于解密密钥相同</td>\n</tr>\n<tr>\n<td>非对称密码</td>\n<td>双钥密码或公钥密码</td>\n<td>指加密密钥与解密密钥不同，密钥分公钥和私钥</td>\n</tr>\n<tr>\n<td>对称密码算法</td>\n<td>单钥密码算法或私钥密码算法</td>\n<td>指应用于对称密码的加密，解密算法</td>\n</tr>\n<tr>\n<td>非对称密码算法</td>\n<td>双钥密码算法或公钥密码算法</td>\n<td>指对应非对称密码加密和解密算法</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>明文处理方法<ul>\n<li>分组加密: 指加密时将名分成固定长度的组，用同一密钥和算法对没一块加密，输出也是固定长度的密文。多用于网络加密</li>\n<li>流密码：也称序列密码。指加密时每次加密一位或者一个字节明文(产生一串序列来作为加密的密钥流，从密钥流中按规则依次选取密钥，这些不同的密钥分别来加密每个字符)</li>\n</ul>\n</li>\n<li>散列函数 <ul>\n<li>散列函数验证数据完整性: 长度不限制 哈希值容易计算 散列运算过程不可逆<ul>\n<li>消息摘要算法MD5等</li>\n<li>SHA — 安全散列算法</li>\n<li>MAC — 消息认证算法</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>数字签名 主要针对以数字形式存储的消息进行的处理    </li>\n</ul>\n<h3 id=\"安全体系\"><a href=\"#安全体系\" class=\"headerlink\" title=\"安全体系\"></a>安全体系</h3><ul>\n<li>OSI (Open System Interconnection) 开发通信 网络7层模型</li>\n<li>TCP/IP安全体系 </li>\n</ul>\n<h3 id=\"java安全组成部分\"><a href=\"#java安全组成部分\" class=\"headerlink\" title=\"java安全组成部分\"></a>java安全组成部分</h3><ul>\n<li>JCA  </li>\n<li>JCE </li>\n<li>JSSE </li>\n<li><p>JAAS </p>\n<p>可以修改JDK添加第三方加解密提供者 $JAVA_HOME/jre/lib/security/java.security </p>\n</li>\n</ul>\n<h3 id=\"相关java包，类\"><a href=\"#相关java包，类\" class=\"headerlink\" title=\"相关java包，类\"></a>相关java包，类</h3><ul>\n<li>java.security<ul>\n<li>消息摘要 </li>\n</ul>\n</li>\n<li>javax.crypot<ul>\n<li>安全消息摘要，消息认证（鉴别）码</li>\n</ul>\n</li>\n<li>java.net.ssl<ul>\n<li>安全套接字，网络传输<h3 id=\"第三方java扩展\"><a href=\"#第三方java扩展\" class=\"headerlink\" title=\"第三方java扩展\"></a>第三方java扩展</h3></li>\n</ul>\n</li>\n<li>Bouncy Castle<ul>\n<li>两种支持方案: 1) 配置  2) 调用</li>\n</ul>\n</li>\n<li>Commons CodeC<ul>\n<li>Apache </li>\n<li>Base64 二进制 十六进制,字符集编码</li>\n<li>Url 编码/解码</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"实现Base64算法\"><a href=\"#实现Base64算法\" class=\"headerlink\" title=\"实现Base64算法\"></a>实现Base64算法</h3><ul>\n<li>Base64算法 提供者 1.Jdk 2.Commons Codec 3.Bouncy Castle</li>\n</ul>\n<p>创建maven项目，pom.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;dependencies&gt;</div><div class=\"line\">  &lt;dependency&gt;</div><div class=\"line\">        &lt;groupId&gt;org.bouncycastle&lt;/groupId&gt;</div><div class=\"line\">        &lt;artifactId&gt;bcprov-jdk16&lt;/artifactId&gt;</div><div class=\"line\">        &lt;version&gt;1.46&lt;/version&gt;</div><div class=\"line\">    &lt;/dependency&gt;</div><div class=\"line\">    &lt;dependency&gt;</div><div class=\"line\">        &lt;groupId&gt;commons-codec&lt;/groupId&gt;</div><div class=\"line\">        &lt;artifactId&gt;commons-codec&lt;/artifactId&gt;</div><div class=\"line\">        &lt;version&gt;1.10&lt;/version&gt;</div><div class=\"line\">    &lt;/dependency&gt;</div><div class=\"line\">    &lt;/dependencies&gt;</div></pre></td></tr></table></figure>\n<p>Base64Test.java</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\">import org.apache.commons.codec.binary.Base64;</div><div class=\"line\">import sun.misc.BASE64Decoder;</div><div class=\"line\">import sun.misc.BASE64Encoder;</div><div class=\"line\"> </div><div class=\"line\">public class Base64Test &#123;</div><div class=\"line\"></div><div class=\"line\">    private static String src=&quot;yundongshequ security base64&quot;;</div><div class=\"line\"></div><div class=\"line\">   public static void main(String [] args) throws  Exception&#123;</div><div class=\"line\"></div><div class=\"line\">       System.out.println(&quot;-------jdkBase64---------&quot;);</div><div class=\"line\">       jdkBase64();</div><div class=\"line\"></div><div class=\"line\">       System.out.println(&quot;-------commonsCodeBase64---------&quot;);</div><div class=\"line\">       commonsCodeBase64();</div><div class=\"line\"></div><div class=\"line\">       System.out.println(&quot;-------bouncyCastleBase64---------&quot;);</div><div class=\"line\">       bouncyCastleBase64();</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">    //jdk实现</div><div class=\"line\">   public static void  jdkBase64()throws  Exception&#123;</div><div class=\"line\"></div><div class=\"line\">       BASE64Encoder encoder = new BASE64Encoder();</div><div class=\"line\">       String encode = encoder.encode(src.getBytes());</div><div class=\"line\">       System.out.println(&quot;encode: &quot;+encode);</div><div class=\"line\"></div><div class=\"line\">       BASE64Decoder decoder = new BASE64Decoder();</div><div class=\"line\">       byte[] decodeBuffer = decoder.decodeBuffer(encode);</div><div class=\"line\"></div><div class=\"line\">       System.out.println(&quot;decode: &quot;+new String(decodeBuffer));</div><div class=\"line\"></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   //Commons Codec</div><div class=\"line\">    public static void commonsCodeBase64()&#123;</div><div class=\"line\"></div><div class=\"line\">       byte[] encodeBase64 = Base64.encodeBase64(src.getBytes());</div><div class=\"line\">        System.out.println(&quot;encode: &quot;+new String(encodeBase64));</div><div class=\"line\"></div><div class=\"line\">        byte[] decodeBase64 =  Base64.decodeBase64(encodeBase64);</div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;decode: &quot;+new String(decodeBase64));</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //Bouncy Castle</div><div class=\"line\">    public static void bouncyCastleBase64()&#123;</div><div class=\"line\"></div><div class=\"line\">        byte[] encodeBase64=  org.bouncycastle.util.encoders.Base64.encode(src.getBytes());</div><div class=\"line\">        System.out.println(&quot;encode: &quot;+new String(encodeBase64));</div><div class=\"line\">        byte[] decodeBase64 =  org.bouncycastle.util.encoders.Base64.decode(encodeBase64);</div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;decode: &quot;+new String(decodeBase64));</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Base64算法应用场景\"><a href=\"#Base64算法应用场景\" class=\"headerlink\" title=\"Base64算法应用场景\"></a>Base64算法应用场景</h3><ul>\n<li>e-mail,密钥,证书文件</li>\n<li>产生： 邮件的历史问题</li>\n<li>定义: 基于64个字符的编码算法</li>\n<li>关于RFC2045</li>\n<li>衍生: Base16,32 Url Base64</li>\n<li>Base64算法与加密算法都是公开的</li>\n</ul>\n<blockquote>\n<p>我们知道在计算机中任何数据都是按ascii码存储的，而ascii码的128～255之间的值是不可见字符。而在网络上交换数据时，比如说从A地传到B地，往往要经过多个路由设备，由于不同的设备对字符的处理方式有一些不同，这样那些不可见字符就有可能被处理错误，这是不利于传输的。所以就先把数据先做一个Base64编码，统统变成可见字符，这样出错的可能性就大降低了</p>\n</blockquote>\n"},{"title":"spring-boot 完成版本－不解释","date":"2017-03-09T09:47:31.000Z","layout":"clean-blog","slug":"spring-boot-完成版本－不解释","_content":"## 本文为Spring-boot 完整版本，可用于基础开发\n  \n  \n  \n###### 上一文中我们介绍了如何搭建sprign-boot 服务，下面我们一起来搞出完整版本（以下是包含使用到的技术）\n   \n   \n  1. Swagger2 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。总体目标是使客户端和文件系统作为服务器以同样的速度来更新。文件的方法，参数和模型紧密集成到服务器端的代码，允许API来始终保持同步。 \n  2. Spring jap 已经实现了很多数据库操作相关功能，但是拼写SQL是个硬伤，当前项目中实现了一种方式，将 resources/dbsql下的 XXX.xml 映射到全局map中，下面会有详细介绍\n \n   \n---\n####  项目源码:[github源码地址](https://github.com/zccccccc/cici) \n---\n\n  \n\n\n  \n  ---\n#### Swagger2介绍 开始\n   \n   \n ***pom.xml 添加***\n \n ```\n \n     <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger2</artifactId>\n            <version>2.2.2</version>\n        </dependency>\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger-ui</artifactId>\n            <version>2.2.2</version>\n        </dependency>\n \n ```\n   \n***在MainApplication平级创建 Swagger2.java***\n\n```\n\n@Configuration\n@EnableSwagger2\npublic class Swagger2 {\n\n    @Bean\n    public Docket createRestApi() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.springboot.demo\"))\n                .paths(PathSelectors.any())\n                .build();\n    }\n\n\n    private ApiInfo apiInfo() {\n\n\n                return new ApiInfoBuilder()\n                .title(\"Spring Boot 中使用Swagger2构建RESTful APIs\").version(\"2.0\").build();\n\n    }\n\n}\n\n\n```\n\n*** API接口方法中加入下面注解，就可以了使用了，访问地址 http://localhost:7777 /swagger-ui.html 就可以访问了***  \n \n ```\n    @ApiOperation(value = \"获取用户列表\", notes = \"需要传入json参数\")\n    @ApiImplicitParams({\n            @ApiImplicitParam(name = \"sysUserDomain\", value = \"系统用户实体\", required = true, dataType = \"SysUserDomain\")\n    })\n    @ApiResponses(value = {\n            @ApiResponse(code = 200, message = \"Success\", response = BaseOutput.class),\n            @ApiResponse(code = 401, message = \"Unauthorized\"),\n            @ApiResponse(code = 403, message = \"Forbidden\"),\n            @ApiResponse(code = 404, message = \"Not Found\"),\n            @ApiResponse(code = 500, message = \"Failure\")})\n    @PostMapping(value = \"list\")\n    public BaseOutput<SysUser> list(HttpServletRequest request, HttpServletResponse response, @RequestBody SysUserDomain sysUserDomain) {\n        BaseOutput<SysUser> baseOutput = null;\n        try {\n\n            baseOutput = sysUserService.findList(sysUserDomain);\n\n        } catch (Exception ex) {\n\n            baseOutput = baseOutput == null ? (baseOutput = new BaseOutput<SysUser>()) : baseOutput;\n            baseOutput.setReturnCode(new ReturnCode(ReturnCodeDict.ERROR.k, ReturnCodeDict.ERROR.m, ex.getMessage()));\n\n\n        } finally {\n            return baseOutput;\n        }\n\n    }\n \n ```\n  \n---  \n####  将sql放到xml中，系统启动时候加载到各个模块中\n*** 在resources 下创建dbsql文件夹 里面包含各种sql的xml: namespace(具体使用实现类，获取sql时使用),version(版本控制后期会加入自动热部署) ***\n\n```\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<db-sql>\n<mapper namespace=\"com.springboot.demo.usercenter.usermanager.serve.SysUserServiceImpl\" version=\"1.0\" >\n\n    <sql id=\"findListNativeSql\">\n        SELECT\n        distinct\n        XX.module_id,\n        XX.action_code,\n        XX.action_name,\n        ZZ.name module_name,\n        ZZ.url,\n        ZZ.order_id,\n        ZZ.module_desc,\n        ZZ.code module_code,\n        ZZ.parent_id\n        FROM SYS_PRIVILEGE XX,\n        SYS_MODULE ZZ\n        WHERE XX.module_id =ZZ.id\n        AND ZZ.enable_state='10'\n        and exists\n        ( SELECT 1\n        FROM SYS_USER_AUTH AA,SYS_ROLE BB\n        WHERE AA.user_id =  ?1\n        AND AA.role_id = BB.id\n        AND BB.enable_state='10'\n        and AA.role_id = XX.role_id\n        AND EXISTS\n        ( SELECT 1\n        FROM sys_system SS\n        WHERE SS.id = BB.sys_id\n        AND SS.code =  ?2 )\n        AND AA.role_id=BB.id)\n    </sql>\n\n</mapper>\n</db-sql>\n\n```\n  \n  \n***读取XML并映射到HashMap中 创建LoadingSqlXml.java***\n\n \n*** 完整版本 ***\n\n```\npublic enum LoadingSqlXml {\n\n    INSTANCE;\n\n    //获取dbsql绝对路径\n    private final static String dbSqlPath = ClassUtils.getDefaultClassLoader().getResource(\"dbsql\").getPath();\n    //定义私有SQLMap  XML中的namespace,version 该文件下的sql集合\n    private static final Map<String, HashMap<Double, HashMap<String, String>>> myHashMaps = new HashMap<String, HashMap<Double, HashMap<String, String>>>();\n\n    //定义私有SQLMap集合\n    private static HashMap sqlMap = null;\n\n    //定义版本集合\n    private static final HashMap<Double, HashMap<String, String>> versionMap = new HashMap();\n\n\n    //根据名称找到当前实现类下需要使用的SQL集合\n    //如:   private HashMap<String, String> dbSqlMap = LoadingSqlXml.INSTANCE.findSqlMap(this.getClass().getName());\n    //  dbSqlMap.get(\"sqlId\");\n    public HashMap<String, String> findSqlMap(String c) {\n\n        if (myHashMaps.isEmpty()) {\n            try {\n                init();\n            } catch (Exception ex) {\n                ex.printStackTrace();\n            }\n        }\n\n        HashMap<String, String> _h = null;\n        for (Map.Entry<Double, HashMap<String, String>> entry0 : myHashMaps.get(c).entrySet()) {\n            _h = entry0.getValue();\n        }\n        return _h;\n    }\n\n    //初始化执行\n    public void init() throws InitDataSqlReaderException, DocumentException {\n        if (!myHashMaps.isEmpty()) {\n            return;\n        }\n        File file = new File(dbSqlPath);\n        File[] files = file.listFiles();\n        for (File f : files) {\n            ReadDbSqlXml(f);\n        }\n    }\n\n    //读取文件XML并解析到 数据集合中\n    private void ReadDbSqlXml(File f) throws InitDataSqlReaderException, DocumentException {\n\n        SAXReader reader = new SAXReader();\n        Document doc = reader.read(f);\n        Element root = doc.getRootElement();\n        Element fo;\n        Element value;\n        String fileName = f.getName();\n\n        //迭代器查看有几个\n        for (Iterator i = root.elementIterator(\"mapper\"); i.hasNext(); ) {\n\n            fo = (Element) i.next();\n\n            List<String> attributes = fo.attributes();\n            if (attributes.size() == 0) {\n                throw new InitDataSqlReaderException(fileName.concat(\" 在mapper节点找不到属性,请定义 [namespace,version] \"));\n            }\n\n            String namespace = fo.attribute(\"namespace\").getValue();\n            String version = fo.attribute(\"version\").getValue();\n\n            if (StringUtils.isEmpty(namespace)) {\n                throw new InitDataSqlReaderException(fileName.concat(\" 在mapper节点找不到属性,请定义 namespace \"));\n            }\n            if (StringUtils.isEmpty(version)) {\n                throw new InitDataSqlReaderException(fileName.concat(\" 在mapper节点找不到属性,请定义 version \"));\n            }\n\n            if (myHashMaps.get(namespace) != null) {\n                throw new InitDataSqlReaderException(fileName.concat(\" 在mapper节点 中的 namespace 定义重复 ==>\" + namespace));\n            }\n\n            for (Iterator k = fo.elementIterator(\"sql\"); k.hasNext(); ) {\n                sqlMap = new HashMap();\n                value = (Element) k.next();\n                String id = value.attribute(\"id\").getValue();\n\n                if (id.equals(\"\")) {\n                    throw new InitDataSqlReaderException(fileName.concat(\"在mapper下sql未定义id\"));\n                }\n\n                String sql = String.valueOf(value.getData());\n                if (sqlMap.get(id) == null) {\n                    sqlMap.put(id, sql);\n                } else {\n                    throw new InitDataSqlReaderException(fileName.concat(\"sql 节点 ID 定义重复 当前ID=\" + id));\n                }\n\n            }\n            versionMap.put(Double.parseDouble(version), sqlMap);\n            myHashMaps.put(namespace, versionMap);\n        }\n    }\n    }\n    \n ```\n \n \n \t *具体实现代码就不在这里展示了直接看源码吧，比较简单，目录结构 下载到源码后从com.springboot.demo.usercenter.usermanager.web.SysUserController 开始向上阅读*\n \t   \n \t   \n     \n  *目前只是简单实现，后续会介绍完整版本 基于spring cloud 微服务架构整合*\n    \n    \n---\n####  项目源码:[github源码地址](https://github.com/zccccccc/cici) \n---\n\n    \n    \n \n   \n\n\n\n\n\n\n\n  \n  ","source":"_posts/spring-boot-完成版本－不解释.md","raw":"---\ntitle: spring-boot 完成版本－不解释\ndate: 2017-03-09 17:47:31\ntags: java\nlayout: clean-blog\nslug: spring-boot-first2\n\n---\n## 本文为Spring-boot 完整版本，可用于基础开发\n  \n  \n  \n###### 上一文中我们介绍了如何搭建sprign-boot 服务，下面我们一起来搞出完整版本（以下是包含使用到的技术）\n   \n   \n  1. Swagger2 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。总体目标是使客户端和文件系统作为服务器以同样的速度来更新。文件的方法，参数和模型紧密集成到服务器端的代码，允许API来始终保持同步。 \n  2. Spring jap 已经实现了很多数据库操作相关功能，但是拼写SQL是个硬伤，当前项目中实现了一种方式，将 resources/dbsql下的 XXX.xml 映射到全局map中，下面会有详细介绍\n \n   \n---\n####  项目源码:[github源码地址](https://github.com/zccccccc/cici) \n---\n\n  \n\n\n  \n  ---\n#### Swagger2介绍 开始\n   \n   \n ***pom.xml 添加***\n \n ```\n \n     <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger2</artifactId>\n            <version>2.2.2</version>\n        </dependency>\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger-ui</artifactId>\n            <version>2.2.2</version>\n        </dependency>\n \n ```\n   \n***在MainApplication平级创建 Swagger2.java***\n\n```\n\n@Configuration\n@EnableSwagger2\npublic class Swagger2 {\n\n    @Bean\n    public Docket createRestApi() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.springboot.demo\"))\n                .paths(PathSelectors.any())\n                .build();\n    }\n\n\n    private ApiInfo apiInfo() {\n\n\n                return new ApiInfoBuilder()\n                .title(\"Spring Boot 中使用Swagger2构建RESTful APIs\").version(\"2.0\").build();\n\n    }\n\n}\n\n\n```\n\n*** API接口方法中加入下面注解，就可以了使用了，访问地址 http://localhost:7777 /swagger-ui.html 就可以访问了***  \n \n ```\n    @ApiOperation(value = \"获取用户列表\", notes = \"需要传入json参数\")\n    @ApiImplicitParams({\n            @ApiImplicitParam(name = \"sysUserDomain\", value = \"系统用户实体\", required = true, dataType = \"SysUserDomain\")\n    })\n    @ApiResponses(value = {\n            @ApiResponse(code = 200, message = \"Success\", response = BaseOutput.class),\n            @ApiResponse(code = 401, message = \"Unauthorized\"),\n            @ApiResponse(code = 403, message = \"Forbidden\"),\n            @ApiResponse(code = 404, message = \"Not Found\"),\n            @ApiResponse(code = 500, message = \"Failure\")})\n    @PostMapping(value = \"list\")\n    public BaseOutput<SysUser> list(HttpServletRequest request, HttpServletResponse response, @RequestBody SysUserDomain sysUserDomain) {\n        BaseOutput<SysUser> baseOutput = null;\n        try {\n\n            baseOutput = sysUserService.findList(sysUserDomain);\n\n        } catch (Exception ex) {\n\n            baseOutput = baseOutput == null ? (baseOutput = new BaseOutput<SysUser>()) : baseOutput;\n            baseOutput.setReturnCode(new ReturnCode(ReturnCodeDict.ERROR.k, ReturnCodeDict.ERROR.m, ex.getMessage()));\n\n\n        } finally {\n            return baseOutput;\n        }\n\n    }\n \n ```\n  \n---  \n####  将sql放到xml中，系统启动时候加载到各个模块中\n*** 在resources 下创建dbsql文件夹 里面包含各种sql的xml: namespace(具体使用实现类，获取sql时使用),version(版本控制后期会加入自动热部署) ***\n\n```\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<db-sql>\n<mapper namespace=\"com.springboot.demo.usercenter.usermanager.serve.SysUserServiceImpl\" version=\"1.0\" >\n\n    <sql id=\"findListNativeSql\">\n        SELECT\n        distinct\n        XX.module_id,\n        XX.action_code,\n        XX.action_name,\n        ZZ.name module_name,\n        ZZ.url,\n        ZZ.order_id,\n        ZZ.module_desc,\n        ZZ.code module_code,\n        ZZ.parent_id\n        FROM SYS_PRIVILEGE XX,\n        SYS_MODULE ZZ\n        WHERE XX.module_id =ZZ.id\n        AND ZZ.enable_state='10'\n        and exists\n        ( SELECT 1\n        FROM SYS_USER_AUTH AA,SYS_ROLE BB\n        WHERE AA.user_id =  ?1\n        AND AA.role_id = BB.id\n        AND BB.enable_state='10'\n        and AA.role_id = XX.role_id\n        AND EXISTS\n        ( SELECT 1\n        FROM sys_system SS\n        WHERE SS.id = BB.sys_id\n        AND SS.code =  ?2 )\n        AND AA.role_id=BB.id)\n    </sql>\n\n</mapper>\n</db-sql>\n\n```\n  \n  \n***读取XML并映射到HashMap中 创建LoadingSqlXml.java***\n\n \n*** 完整版本 ***\n\n```\npublic enum LoadingSqlXml {\n\n    INSTANCE;\n\n    //获取dbsql绝对路径\n    private final static String dbSqlPath = ClassUtils.getDefaultClassLoader().getResource(\"dbsql\").getPath();\n    //定义私有SQLMap  XML中的namespace,version 该文件下的sql集合\n    private static final Map<String, HashMap<Double, HashMap<String, String>>> myHashMaps = new HashMap<String, HashMap<Double, HashMap<String, String>>>();\n\n    //定义私有SQLMap集合\n    private static HashMap sqlMap = null;\n\n    //定义版本集合\n    private static final HashMap<Double, HashMap<String, String>> versionMap = new HashMap();\n\n\n    //根据名称找到当前实现类下需要使用的SQL集合\n    //如:   private HashMap<String, String> dbSqlMap = LoadingSqlXml.INSTANCE.findSqlMap(this.getClass().getName());\n    //  dbSqlMap.get(\"sqlId\");\n    public HashMap<String, String> findSqlMap(String c) {\n\n        if (myHashMaps.isEmpty()) {\n            try {\n                init();\n            } catch (Exception ex) {\n                ex.printStackTrace();\n            }\n        }\n\n        HashMap<String, String> _h = null;\n        for (Map.Entry<Double, HashMap<String, String>> entry0 : myHashMaps.get(c).entrySet()) {\n            _h = entry0.getValue();\n        }\n        return _h;\n    }\n\n    //初始化执行\n    public void init() throws InitDataSqlReaderException, DocumentException {\n        if (!myHashMaps.isEmpty()) {\n            return;\n        }\n        File file = new File(dbSqlPath);\n        File[] files = file.listFiles();\n        for (File f : files) {\n            ReadDbSqlXml(f);\n        }\n    }\n\n    //读取文件XML并解析到 数据集合中\n    private void ReadDbSqlXml(File f) throws InitDataSqlReaderException, DocumentException {\n\n        SAXReader reader = new SAXReader();\n        Document doc = reader.read(f);\n        Element root = doc.getRootElement();\n        Element fo;\n        Element value;\n        String fileName = f.getName();\n\n        //迭代器查看有几个\n        for (Iterator i = root.elementIterator(\"mapper\"); i.hasNext(); ) {\n\n            fo = (Element) i.next();\n\n            List<String> attributes = fo.attributes();\n            if (attributes.size() == 0) {\n                throw new InitDataSqlReaderException(fileName.concat(\" 在mapper节点找不到属性,请定义 [namespace,version] \"));\n            }\n\n            String namespace = fo.attribute(\"namespace\").getValue();\n            String version = fo.attribute(\"version\").getValue();\n\n            if (StringUtils.isEmpty(namespace)) {\n                throw new InitDataSqlReaderException(fileName.concat(\" 在mapper节点找不到属性,请定义 namespace \"));\n            }\n            if (StringUtils.isEmpty(version)) {\n                throw new InitDataSqlReaderException(fileName.concat(\" 在mapper节点找不到属性,请定义 version \"));\n            }\n\n            if (myHashMaps.get(namespace) != null) {\n                throw new InitDataSqlReaderException(fileName.concat(\" 在mapper节点 中的 namespace 定义重复 ==>\" + namespace));\n            }\n\n            for (Iterator k = fo.elementIterator(\"sql\"); k.hasNext(); ) {\n                sqlMap = new HashMap();\n                value = (Element) k.next();\n                String id = value.attribute(\"id\").getValue();\n\n                if (id.equals(\"\")) {\n                    throw new InitDataSqlReaderException(fileName.concat(\"在mapper下sql未定义id\"));\n                }\n\n                String sql = String.valueOf(value.getData());\n                if (sqlMap.get(id) == null) {\n                    sqlMap.put(id, sql);\n                } else {\n                    throw new InitDataSqlReaderException(fileName.concat(\"sql 节点 ID 定义重复 当前ID=\" + id));\n                }\n\n            }\n            versionMap.put(Double.parseDouble(version), sqlMap);\n            myHashMaps.put(namespace, versionMap);\n        }\n    }\n    }\n    \n ```\n \n \n \t *具体实现代码就不在这里展示了直接看源码吧，比较简单，目录结构 下载到源码后从com.springboot.demo.usercenter.usermanager.web.SysUserController 开始向上阅读*\n \t   \n \t   \n     \n  *目前只是简单实现，后续会介绍完整版本 基于spring cloud 微服务架构整合*\n    \n    \n---\n####  项目源码:[github源码地址](https://github.com/zccccccc/cici) \n---\n\n    \n    \n \n   \n\n\n\n\n\n\n\n  \n  ","published":1,"updated":"2017-03-10T02:01:26.000Z","comments":1,"photos":[],"link":"","_id":"cj0uc8d0b0005ey5rboq72178","content":"<h2 id=\"本文为Spring-boot-完整版本，可用于基础开发\"><a href=\"#本文为Spring-boot-完整版本，可用于基础开发\" class=\"headerlink\" title=\"本文为Spring-boot 完整版本，可用于基础开发\"></a>本文为Spring-boot 完整版本，可用于基础开发</h2><h6 id=\"上一文中我们介绍了如何搭建sprign-boot-服务，下面我们一起来搞出完整版本（以下是包含使用到的技术）\"><a href=\"#上一文中我们介绍了如何搭建sprign-boot-服务，下面我们一起来搞出完整版本（以下是包含使用到的技术）\" class=\"headerlink\" title=\"上一文中我们介绍了如何搭建sprign-boot 服务，下面我们一起来搞出完整版本（以下是包含使用到的技术）\"></a>上一文中我们介绍了如何搭建sprign-boot 服务，下面我们一起来搞出完整版本（以下是包含使用到的技术）</h6><ol>\n<li>Swagger2 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。总体目标是使客户端和文件系统作为服务器以同样的速度来更新。文件的方法，参数和模型紧密集成到服务器端的代码，允许API来始终保持同步。 </li>\n<li>Spring jap 已经实现了很多数据库操作相关功能，但是拼写SQL是个硬伤，当前项目中实现了一种方式，将 resources/dbsql下的 XXX.xml 映射到全局map中，下面会有详细介绍</li>\n</ol>\n<hr>\n<h4 id=\"项目源码-github源码地址\"><a href=\"#项目源码-github源码地址\" class=\"headerlink\" title=\"项目源码:github源码地址\"></a>项目源码:<a href=\"https://github.com/zccccccc/cici\">github源码地址</a></h4><hr>\n<hr>\n<h4 id=\"Swagger2介绍-开始\"><a href=\"#Swagger2介绍-开始\" class=\"headerlink\" title=\"Swagger2介绍 开始\"></a>Swagger2介绍 开始</h4><p> <strong><em>pom.xml 添加</em></strong></p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div><div class=\"line\">&lt;dependency&gt;</div><div class=\"line\">       &lt;groupId&gt;io.springfox&lt;/groupId&gt;</div><div class=\"line\">       &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</div><div class=\"line\">       &lt;version&gt;2.2.2&lt;/version&gt;</div><div class=\"line\">   &lt;/dependency&gt;</div><div class=\"line\">   &lt;dependency&gt;</div><div class=\"line\">       &lt;groupId&gt;io.springfox&lt;/groupId&gt;</div><div class=\"line\">       &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</div><div class=\"line\">       &lt;version&gt;2.2.2&lt;/version&gt;</div><div class=\"line\">   &lt;/dependency&gt;</div></pre></td></tr></table></figure>\n<p><strong><em>在MainApplication平级创建 Swagger2.java</em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@Configuration</div><div class=\"line\">@EnableSwagger2</div><div class=\"line\">public class Swagger2 &#123;</div><div class=\"line\"></div><div class=\"line\">    @Bean</div><div class=\"line\">    public Docket createRestApi() &#123;</div><div class=\"line\">        return new Docket(DocumentationType.SWAGGER_2)</div><div class=\"line\">                .apiInfo(apiInfo())</div><div class=\"line\">                .select()</div><div class=\"line\">                .apis(RequestHandlerSelectors.basePackage(&quot;com.springboot.demo&quot;))</div><div class=\"line\">                .paths(PathSelectors.any())</div><div class=\"line\">                .build();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    private ApiInfo apiInfo() &#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">                return new ApiInfoBuilder()</div><div class=\"line\">                .title(&quot;Spring Boot 中使用Swagger2构建RESTful APIs&quot;).version(&quot;2.0&quot;).build();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong><em> API接口方法中加入下面注解，就可以了使用了，访问地址 <a href=\"http://localhost:7777\" target=\"_blank\" rel=\"external\">http://localhost:7777</a> /swagger-ui.html 就可以访问了</em></strong>  </p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">@ApiOperation(value = &quot;获取用户列表&quot;, notes = &quot;需要传入json参数&quot;)</div><div class=\"line\">@ApiImplicitParams(&#123;</div><div class=\"line\">        @ApiImplicitParam(name = &quot;sysUserDomain&quot;, value = &quot;系统用户实体&quot;, required = true, dataType = &quot;SysUserDomain&quot;)</div><div class=\"line\">&#125;)</div><div class=\"line\">@ApiResponses(value = &#123;</div><div class=\"line\">        @ApiResponse(code = 200, message = &quot;Success&quot;, response = BaseOutput.class),</div><div class=\"line\">        @ApiResponse(code = 401, message = &quot;Unauthorized&quot;),</div><div class=\"line\">        @ApiResponse(code = 403, message = &quot;Forbidden&quot;),</div><div class=\"line\">        @ApiResponse(code = 404, message = &quot;Not Found&quot;),</div><div class=\"line\">        @ApiResponse(code = 500, message = &quot;Failure&quot;)&#125;)</div><div class=\"line\">@PostMapping(value = &quot;list&quot;)</div><div class=\"line\">public BaseOutput&lt;SysUser&gt; list(HttpServletRequest request, HttpServletResponse response, @RequestBody SysUserDomain sysUserDomain) &#123;</div><div class=\"line\">    BaseOutput&lt;SysUser&gt; baseOutput = null;</div><div class=\"line\">    try &#123;</div><div class=\"line\"></div><div class=\"line\">        baseOutput = sysUserService.findList(sysUserDomain);</div><div class=\"line\"></div><div class=\"line\">    &#125; catch (Exception ex) &#123;</div><div class=\"line\"></div><div class=\"line\">        baseOutput = baseOutput == null ? (baseOutput = new BaseOutput&lt;SysUser&gt;()) : baseOutput;</div><div class=\"line\">        baseOutput.setReturnCode(new ReturnCode(ReturnCodeDict.ERROR.k, ReturnCodeDict.ERROR.m, ex.getMessage()));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125; finally &#123;</div><div class=\"line\">        return baseOutput;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"将sql放到xml中，系统启动时候加载到各个模块中\"><a href=\"#将sql放到xml中，系统启动时候加载到各个模块中\" class=\"headerlink\" title=\"将sql放到xml中，系统启动时候加载到各个模块中\"></a>将sql放到xml中，系统启动时候加载到各个模块中</h4><p><strong><em> 在resources 下创建dbsql文件夹 里面包含各种sql的xml: namespace(具体使用实现类，获取sql时使用),version(版本控制后期会加入自动热部署) </em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;db-sql&gt;</div><div class=\"line\">&lt;mapper namespace=&quot;com.springboot.demo.usercenter.usermanager.serve.SysUserServiceImpl&quot; version=&quot;1.0&quot; &gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;sql id=&quot;findListNativeSql&quot;&gt;</div><div class=\"line\">        SELECT</div><div class=\"line\">        distinct</div><div class=\"line\">        XX.module_id,</div><div class=\"line\">        XX.action_code,</div><div class=\"line\">        XX.action_name,</div><div class=\"line\">        ZZ.name module_name,</div><div class=\"line\">        ZZ.url,</div><div class=\"line\">        ZZ.order_id,</div><div class=\"line\">        ZZ.module_desc,</div><div class=\"line\">        ZZ.code module_code,</div><div class=\"line\">        ZZ.parent_id</div><div class=\"line\">        FROM SYS_PRIVILEGE XX,</div><div class=\"line\">        SYS_MODULE ZZ</div><div class=\"line\">        WHERE XX.module_id =ZZ.id</div><div class=\"line\">        AND ZZ.enable_state=&apos;10&apos;</div><div class=\"line\">        and exists</div><div class=\"line\">        ( SELECT 1</div><div class=\"line\">        FROM SYS_USER_AUTH AA,SYS_ROLE BB</div><div class=\"line\">        WHERE AA.user_id =  ?1</div><div class=\"line\">        AND AA.role_id = BB.id</div><div class=\"line\">        AND BB.enable_state=&apos;10&apos;</div><div class=\"line\">        and AA.role_id = XX.role_id</div><div class=\"line\">        AND EXISTS</div><div class=\"line\">        ( SELECT 1</div><div class=\"line\">        FROM sys_system SS</div><div class=\"line\">        WHERE SS.id = BB.sys_id</div><div class=\"line\">        AND SS.code =  ?2 )</div><div class=\"line\">        AND AA.role_id=BB.id)</div><div class=\"line\">    &lt;/sql&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/mapper&gt;</div><div class=\"line\">&lt;/db-sql&gt;</div></pre></td></tr></table></figure>\n<p><strong><em>读取XML并映射到HashMap中 创建LoadingSqlXml.java</em></strong></p>\n<p><strong><em> 完整版本 </em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div></pre></td><td class=\"code\"><pre><div class=\"line\">public enum LoadingSqlXml &#123;</div><div class=\"line\"></div><div class=\"line\">    INSTANCE;</div><div class=\"line\"></div><div class=\"line\">    //获取dbsql绝对路径</div><div class=\"line\">    private final static String dbSqlPath = ClassUtils.getDefaultClassLoader().getResource(&quot;dbsql&quot;).getPath();</div><div class=\"line\">    //定义私有SQLMap  XML中的namespace,version 该文件下的sql集合</div><div class=\"line\">    private static final Map&lt;String, HashMap&lt;Double, HashMap&lt;String, String&gt;&gt;&gt; myHashMaps = new HashMap&lt;String, HashMap&lt;Double, HashMap&lt;String, String&gt;&gt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    //定义私有SQLMap集合</div><div class=\"line\">    private static HashMap sqlMap = null;</div><div class=\"line\"></div><div class=\"line\">    //定义版本集合</div><div class=\"line\">    private static final HashMap&lt;Double, HashMap&lt;String, String&gt;&gt; versionMap = new HashMap();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    //根据名称找到当前实现类下需要使用的SQL集合</div><div class=\"line\">    //如:   private HashMap&lt;String, String&gt; dbSqlMap = LoadingSqlXml.INSTANCE.findSqlMap(this.getClass().getName());</div><div class=\"line\">    //  dbSqlMap.get(&quot;sqlId&quot;);</div><div class=\"line\">    public HashMap&lt;String, String&gt; findSqlMap(String c) &#123;</div><div class=\"line\"></div><div class=\"line\">        if (myHashMaps.isEmpty()) &#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                init();</div><div class=\"line\">            &#125; catch (Exception ex) &#123;</div><div class=\"line\">                ex.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        HashMap&lt;String, String&gt; _h = null;</div><div class=\"line\">        for (Map.Entry&lt;Double, HashMap&lt;String, String&gt;&gt; entry0 : myHashMaps.get(c).entrySet()) &#123;</div><div class=\"line\">            _h = entry0.getValue();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return _h;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //初始化执行</div><div class=\"line\">    public void init() throws InitDataSqlReaderException, DocumentException &#123;</div><div class=\"line\">        if (!myHashMaps.isEmpty()) &#123;</div><div class=\"line\">            return;</div><div class=\"line\">        &#125;</div><div class=\"line\">        File file = new File(dbSqlPath);</div><div class=\"line\">        File[] files = file.listFiles();</div><div class=\"line\">        for (File f : files) &#123;</div><div class=\"line\">            ReadDbSqlXml(f);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //读取文件XML并解析到 数据集合中</div><div class=\"line\">    private void ReadDbSqlXml(File f) throws InitDataSqlReaderException, DocumentException &#123;</div><div class=\"line\"></div><div class=\"line\">        SAXReader reader = new SAXReader();</div><div class=\"line\">        Document doc = reader.read(f);</div><div class=\"line\">        Element root = doc.getRootElement();</div><div class=\"line\">        Element fo;</div><div class=\"line\">        Element value;</div><div class=\"line\">        String fileName = f.getName();</div><div class=\"line\"></div><div class=\"line\">        //迭代器查看有几个</div><div class=\"line\">        for (Iterator i = root.elementIterator(&quot;mapper&quot;); i.hasNext(); ) &#123;</div><div class=\"line\"></div><div class=\"line\">            fo = (Element) i.next();</div><div class=\"line\"></div><div class=\"line\">            List&lt;String&gt; attributes = fo.attributes();</div><div class=\"line\">            if (attributes.size() == 0) &#123;</div><div class=\"line\">                throw new InitDataSqlReaderException(fileName.concat(&quot; 在mapper节点找不到属性,请定义 [namespace,version] &quot;));</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            String namespace = fo.attribute(&quot;namespace&quot;).getValue();</div><div class=\"line\">            String version = fo.attribute(&quot;version&quot;).getValue();</div><div class=\"line\"></div><div class=\"line\">            if (StringUtils.isEmpty(namespace)) &#123;</div><div class=\"line\">                throw new InitDataSqlReaderException(fileName.concat(&quot; 在mapper节点找不到属性,请定义 namespace &quot;));</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (StringUtils.isEmpty(version)) &#123;</div><div class=\"line\">                throw new InitDataSqlReaderException(fileName.concat(&quot; 在mapper节点找不到属性,请定义 version &quot;));</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (myHashMaps.get(namespace) != null) &#123;</div><div class=\"line\">                throw new InitDataSqlReaderException(fileName.concat(&quot; 在mapper节点 中的 namespace 定义重复 ==&gt;&quot; + namespace));</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (Iterator k = fo.elementIterator(&quot;sql&quot;); k.hasNext(); ) &#123;</div><div class=\"line\">                sqlMap = new HashMap();</div><div class=\"line\">                value = (Element) k.next();</div><div class=\"line\">                String id = value.attribute(&quot;id&quot;).getValue();</div><div class=\"line\"></div><div class=\"line\">                if (id.equals(&quot;&quot;)) &#123;</div><div class=\"line\">                    throw new InitDataSqlReaderException(fileName.concat(&quot;在mapper下sql未定义id&quot;));</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                String sql = String.valueOf(value.getData());</div><div class=\"line\">                if (sqlMap.get(id) == null) &#123;</div><div class=\"line\">                    sqlMap.put(id, sql);</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    throw new InitDataSqlReaderException(fileName.concat(&quot;sql 节点 ID 定义重复 当前ID=&quot; + id));</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">            versionMap.put(Double.parseDouble(version), sqlMap);</div><div class=\"line\">            myHashMaps.put(namespace, versionMap);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<pre><code>*具体实现代码就不在这里展示了直接看源码吧，比较简单，目录结构 下载到源码后从com.springboot.demo.usercenter.usermanager.web.SysUserController 开始向上阅读*\n</code></pre><p>  <em>目前只是简单实现，后续会介绍完整版本 基于spring cloud 微服务架构整合</em></p>\n<hr>\n<h4 id=\"项目源码-github源码地址-1\"><a href=\"#项目源码-github源码地址-1\" class=\"headerlink\" title=\"项目源码:github源码地址\"></a>项目源码:<a href=\"https://github.com/zccccccc/cici\">github源码地址</a></h4><hr>\n","excerpt":"","more":"<h2 id=\"本文为Spring-boot-完整版本，可用于基础开发\"><a href=\"#本文为Spring-boot-完整版本，可用于基础开发\" class=\"headerlink\" title=\"本文为Spring-boot 完整版本，可用于基础开发\"></a>本文为Spring-boot 完整版本，可用于基础开发</h2><h6 id=\"上一文中我们介绍了如何搭建sprign-boot-服务，下面我们一起来搞出完整版本（以下是包含使用到的技术）\"><a href=\"#上一文中我们介绍了如何搭建sprign-boot-服务，下面我们一起来搞出完整版本（以下是包含使用到的技术）\" class=\"headerlink\" title=\"上一文中我们介绍了如何搭建sprign-boot 服务，下面我们一起来搞出完整版本（以下是包含使用到的技术）\"></a>上一文中我们介绍了如何搭建sprign-boot 服务，下面我们一起来搞出完整版本（以下是包含使用到的技术）</h6><ol>\n<li>Swagger2 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。总体目标是使客户端和文件系统作为服务器以同样的速度来更新。文件的方法，参数和模型紧密集成到服务器端的代码，允许API来始终保持同步。 </li>\n<li>Spring jap 已经实现了很多数据库操作相关功能，但是拼写SQL是个硬伤，当前项目中实现了一种方式，将 resources/dbsql下的 XXX.xml 映射到全局map中，下面会有详细介绍</li>\n</ol>\n<hr>\n<h4 id=\"项目源码-github源码地址\"><a href=\"#项目源码-github源码地址\" class=\"headerlink\" title=\"项目源码:github源码地址\"></a>项目源码:<a href=\"https://github.com/zccccccc/cici\">github源码地址</a></h4><hr>\n<hr>\n<h4 id=\"Swagger2介绍-开始\"><a href=\"#Swagger2介绍-开始\" class=\"headerlink\" title=\"Swagger2介绍 开始\"></a>Swagger2介绍 开始</h4><p> <strong><em>pom.xml 添加</em></strong></p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div><div class=\"line\">&lt;dependency&gt;</div><div class=\"line\">       &lt;groupId&gt;io.springfox&lt;/groupId&gt;</div><div class=\"line\">       &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</div><div class=\"line\">       &lt;version&gt;2.2.2&lt;/version&gt;</div><div class=\"line\">   &lt;/dependency&gt;</div><div class=\"line\">   &lt;dependency&gt;</div><div class=\"line\">       &lt;groupId&gt;io.springfox&lt;/groupId&gt;</div><div class=\"line\">       &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</div><div class=\"line\">       &lt;version&gt;2.2.2&lt;/version&gt;</div><div class=\"line\">   &lt;/dependency&gt;</div></pre></td></tr></table></figure>\n<p><strong><em>在MainApplication平级创建 Swagger2.java</em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@Configuration</div><div class=\"line\">@EnableSwagger2</div><div class=\"line\">public class Swagger2 &#123;</div><div class=\"line\"></div><div class=\"line\">    @Bean</div><div class=\"line\">    public Docket createRestApi() &#123;</div><div class=\"line\">        return new Docket(DocumentationType.SWAGGER_2)</div><div class=\"line\">                .apiInfo(apiInfo())</div><div class=\"line\">                .select()</div><div class=\"line\">                .apis(RequestHandlerSelectors.basePackage(&quot;com.springboot.demo&quot;))</div><div class=\"line\">                .paths(PathSelectors.any())</div><div class=\"line\">                .build();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    private ApiInfo apiInfo() &#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">                return new ApiInfoBuilder()</div><div class=\"line\">                .title(&quot;Spring Boot 中使用Swagger2构建RESTful APIs&quot;).version(&quot;2.0&quot;).build();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong><em> API接口方法中加入下面注解，就可以了使用了，访问地址 <a href=\"http://localhost:7777\">http://localhost:7777</a> /swagger-ui.html 就可以访问了</em></strong>  </p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">@ApiOperation(value = &quot;获取用户列表&quot;, notes = &quot;需要传入json参数&quot;)</div><div class=\"line\">@ApiImplicitParams(&#123;</div><div class=\"line\">        @ApiImplicitParam(name = &quot;sysUserDomain&quot;, value = &quot;系统用户实体&quot;, required = true, dataType = &quot;SysUserDomain&quot;)</div><div class=\"line\">&#125;)</div><div class=\"line\">@ApiResponses(value = &#123;</div><div class=\"line\">        @ApiResponse(code = 200, message = &quot;Success&quot;, response = BaseOutput.class),</div><div class=\"line\">        @ApiResponse(code = 401, message = &quot;Unauthorized&quot;),</div><div class=\"line\">        @ApiResponse(code = 403, message = &quot;Forbidden&quot;),</div><div class=\"line\">        @ApiResponse(code = 404, message = &quot;Not Found&quot;),</div><div class=\"line\">        @ApiResponse(code = 500, message = &quot;Failure&quot;)&#125;)</div><div class=\"line\">@PostMapping(value = &quot;list&quot;)</div><div class=\"line\">public BaseOutput&lt;SysUser&gt; list(HttpServletRequest request, HttpServletResponse response, @RequestBody SysUserDomain sysUserDomain) &#123;</div><div class=\"line\">    BaseOutput&lt;SysUser&gt; baseOutput = null;</div><div class=\"line\">    try &#123;</div><div class=\"line\"></div><div class=\"line\">        baseOutput = sysUserService.findList(sysUserDomain);</div><div class=\"line\"></div><div class=\"line\">    &#125; catch (Exception ex) &#123;</div><div class=\"line\"></div><div class=\"line\">        baseOutput = baseOutput == null ? (baseOutput = new BaseOutput&lt;SysUser&gt;()) : baseOutput;</div><div class=\"line\">        baseOutput.setReturnCode(new ReturnCode(ReturnCodeDict.ERROR.k, ReturnCodeDict.ERROR.m, ex.getMessage()));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125; finally &#123;</div><div class=\"line\">        return baseOutput;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"将sql放到xml中，系统启动时候加载到各个模块中\"><a href=\"#将sql放到xml中，系统启动时候加载到各个模块中\" class=\"headerlink\" title=\"将sql放到xml中，系统启动时候加载到各个模块中\"></a>将sql放到xml中，系统启动时候加载到各个模块中</h4><p><strong><em> 在resources 下创建dbsql文件夹 里面包含各种sql的xml: namespace(具体使用实现类，获取sql时使用),version(版本控制后期会加入自动热部署) </em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;db-sql&gt;</div><div class=\"line\">&lt;mapper namespace=&quot;com.springboot.demo.usercenter.usermanager.serve.SysUserServiceImpl&quot; version=&quot;1.0&quot; &gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;sql id=&quot;findListNativeSql&quot;&gt;</div><div class=\"line\">        SELECT</div><div class=\"line\">        distinct</div><div class=\"line\">        XX.module_id,</div><div class=\"line\">        XX.action_code,</div><div class=\"line\">        XX.action_name,</div><div class=\"line\">        ZZ.name module_name,</div><div class=\"line\">        ZZ.url,</div><div class=\"line\">        ZZ.order_id,</div><div class=\"line\">        ZZ.module_desc,</div><div class=\"line\">        ZZ.code module_code,</div><div class=\"line\">        ZZ.parent_id</div><div class=\"line\">        FROM SYS_PRIVILEGE XX,</div><div class=\"line\">        SYS_MODULE ZZ</div><div class=\"line\">        WHERE XX.module_id =ZZ.id</div><div class=\"line\">        AND ZZ.enable_state=&apos;10&apos;</div><div class=\"line\">        and exists</div><div class=\"line\">        ( SELECT 1</div><div class=\"line\">        FROM SYS_USER_AUTH AA,SYS_ROLE BB</div><div class=\"line\">        WHERE AA.user_id =  ?1</div><div class=\"line\">        AND AA.role_id = BB.id</div><div class=\"line\">        AND BB.enable_state=&apos;10&apos;</div><div class=\"line\">        and AA.role_id = XX.role_id</div><div class=\"line\">        AND EXISTS</div><div class=\"line\">        ( SELECT 1</div><div class=\"line\">        FROM sys_system SS</div><div class=\"line\">        WHERE SS.id = BB.sys_id</div><div class=\"line\">        AND SS.code =  ?2 )</div><div class=\"line\">        AND AA.role_id=BB.id)</div><div class=\"line\">    &lt;/sql&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/mapper&gt;</div><div class=\"line\">&lt;/db-sql&gt;</div></pre></td></tr></table></figure>\n<p><strong><em>读取XML并映射到HashMap中 创建LoadingSqlXml.java</em></strong></p>\n<p><strong><em> 完整版本 </em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div></pre></td><td class=\"code\"><pre><div class=\"line\">public enum LoadingSqlXml &#123;</div><div class=\"line\"></div><div class=\"line\">    INSTANCE;</div><div class=\"line\"></div><div class=\"line\">    //获取dbsql绝对路径</div><div class=\"line\">    private final static String dbSqlPath = ClassUtils.getDefaultClassLoader().getResource(&quot;dbsql&quot;).getPath();</div><div class=\"line\">    //定义私有SQLMap  XML中的namespace,version 该文件下的sql集合</div><div class=\"line\">    private static final Map&lt;String, HashMap&lt;Double, HashMap&lt;String, String&gt;&gt;&gt; myHashMaps = new HashMap&lt;String, HashMap&lt;Double, HashMap&lt;String, String&gt;&gt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    //定义私有SQLMap集合</div><div class=\"line\">    private static HashMap sqlMap = null;</div><div class=\"line\"></div><div class=\"line\">    //定义版本集合</div><div class=\"line\">    private static final HashMap&lt;Double, HashMap&lt;String, String&gt;&gt; versionMap = new HashMap();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    //根据名称找到当前实现类下需要使用的SQL集合</div><div class=\"line\">    //如:   private HashMap&lt;String, String&gt; dbSqlMap = LoadingSqlXml.INSTANCE.findSqlMap(this.getClass().getName());</div><div class=\"line\">    //  dbSqlMap.get(&quot;sqlId&quot;);</div><div class=\"line\">    public HashMap&lt;String, String&gt; findSqlMap(String c) &#123;</div><div class=\"line\"></div><div class=\"line\">        if (myHashMaps.isEmpty()) &#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                init();</div><div class=\"line\">            &#125; catch (Exception ex) &#123;</div><div class=\"line\">                ex.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        HashMap&lt;String, String&gt; _h = null;</div><div class=\"line\">        for (Map.Entry&lt;Double, HashMap&lt;String, String&gt;&gt; entry0 : myHashMaps.get(c).entrySet()) &#123;</div><div class=\"line\">            _h = entry0.getValue();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return _h;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //初始化执行</div><div class=\"line\">    public void init() throws InitDataSqlReaderException, DocumentException &#123;</div><div class=\"line\">        if (!myHashMaps.isEmpty()) &#123;</div><div class=\"line\">            return;</div><div class=\"line\">        &#125;</div><div class=\"line\">        File file = new File(dbSqlPath);</div><div class=\"line\">        File[] files = file.listFiles();</div><div class=\"line\">        for (File f : files) &#123;</div><div class=\"line\">            ReadDbSqlXml(f);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //读取文件XML并解析到 数据集合中</div><div class=\"line\">    private void ReadDbSqlXml(File f) throws InitDataSqlReaderException, DocumentException &#123;</div><div class=\"line\"></div><div class=\"line\">        SAXReader reader = new SAXReader();</div><div class=\"line\">        Document doc = reader.read(f);</div><div class=\"line\">        Element root = doc.getRootElement();</div><div class=\"line\">        Element fo;</div><div class=\"line\">        Element value;</div><div class=\"line\">        String fileName = f.getName();</div><div class=\"line\"></div><div class=\"line\">        //迭代器查看有几个</div><div class=\"line\">        for (Iterator i = root.elementIterator(&quot;mapper&quot;); i.hasNext(); ) &#123;</div><div class=\"line\"></div><div class=\"line\">            fo = (Element) i.next();</div><div class=\"line\"></div><div class=\"line\">            List&lt;String&gt; attributes = fo.attributes();</div><div class=\"line\">            if (attributes.size() == 0) &#123;</div><div class=\"line\">                throw new InitDataSqlReaderException(fileName.concat(&quot; 在mapper节点找不到属性,请定义 [namespace,version] &quot;));</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            String namespace = fo.attribute(&quot;namespace&quot;).getValue();</div><div class=\"line\">            String version = fo.attribute(&quot;version&quot;).getValue();</div><div class=\"line\"></div><div class=\"line\">            if (StringUtils.isEmpty(namespace)) &#123;</div><div class=\"line\">                throw new InitDataSqlReaderException(fileName.concat(&quot; 在mapper节点找不到属性,请定义 namespace &quot;));</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (StringUtils.isEmpty(version)) &#123;</div><div class=\"line\">                throw new InitDataSqlReaderException(fileName.concat(&quot; 在mapper节点找不到属性,请定义 version &quot;));</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (myHashMaps.get(namespace) != null) &#123;</div><div class=\"line\">                throw new InitDataSqlReaderException(fileName.concat(&quot; 在mapper节点 中的 namespace 定义重复 ==&gt;&quot; + namespace));</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (Iterator k = fo.elementIterator(&quot;sql&quot;); k.hasNext(); ) &#123;</div><div class=\"line\">                sqlMap = new HashMap();</div><div class=\"line\">                value = (Element) k.next();</div><div class=\"line\">                String id = value.attribute(&quot;id&quot;).getValue();</div><div class=\"line\"></div><div class=\"line\">                if (id.equals(&quot;&quot;)) &#123;</div><div class=\"line\">                    throw new InitDataSqlReaderException(fileName.concat(&quot;在mapper下sql未定义id&quot;));</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                String sql = String.valueOf(value.getData());</div><div class=\"line\">                if (sqlMap.get(id) == null) &#123;</div><div class=\"line\">                    sqlMap.put(id, sql);</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    throw new InitDataSqlReaderException(fileName.concat(&quot;sql 节点 ID 定义重复 当前ID=&quot; + id));</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">            versionMap.put(Double.parseDouble(version), sqlMap);</div><div class=\"line\">            myHashMaps.put(namespace, versionMap);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<pre><code>*具体实现代码就不在这里展示了直接看源码吧，比较简单，目录结构 下载到源码后从com.springboot.demo.usercenter.usermanager.web.SysUserController 开始向上阅读*\n</code></pre><p>  <em>目前只是简单实现，后续会介绍完整版本 基于spring cloud 微服务架构整合</em></p>\n<hr>\n<h4 id=\"项目源码-github源码地址-1\"><a href=\"#项目源码-github源码地址-1\" class=\"headerlink\" title=\"项目源码:github源码地址\"></a>项目源码:<a href=\"https://github.com/zccccccc/cici\">github源码地址</a></h4><hr>\n"},{"title":"spring-boot 搭建-不解释","date":"2017-03-06T06:21:59.000Z","layout":"clean-blog","slug":"spring-boot-搭建-不解释","_content":"\n## 本文为Spring-boot入门篇,老司机跳过\n  \n  1. 服务创建\n  2. RestAPI创建(配置文件)\n  3. 数据层（链接池）/服务层实现(事务，单表更新级查询)/整合接口服务\n \n    \n    \n  \n\n> ** 知识准备。 **\n>  spring boot 基于 maven创建，如果不熟悉请先学习[maven 教程](http://www.yiibai.com/maven/)  \n\n---\n####  项目源码:[github源码地址](https://github.com/zccccccc/cici) \n---\n\n\n### 1.创建maven web项目 (如果选择 springBoot模版创建速度非常慢，个人感觉直接创建比较简单)  \n \n  * 创建maven web项目 (如果选择 springBoot模版创建速度非常慢，个人感觉直接创建比较)\n  修改pom.xml,添加springboot依赖\n  \n  ```\n   <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.4.1.RELEASE</version>\n    </parent>\n\n    <dependencies>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-thymeleaf</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\n        </dependency>\n\n\n        <dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-lang3</artifactId>\n            <version>3.0</version>\n        </dependency>\n\n\n        <dependency>\n            <groupId>com.oracle</groupId>\n            <artifactId>ojdbc14</artifactId>\n            <version>10.2.0.4.0</version>\n        </dependency>\n\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>druid</artifactId>\n            <version>1.0.18</version>\n        </dependency>\n\n\n    </dependencies>\n  \n  ```\n \n  * 创建启动入口文件 运行main方法，服务搭建就OK啦\n  \n  ```\n  @SpringBootApplication\npublic class MainApp extends WebMvcConfigurerAdapter {\n\n    //第一种\n    //1 cd  当前项目根目录下\n    //1 mvn spring-boot:run\n\n    //第二种\n    //2 cd  当前项目根目录下\n    //2. mvn install\n    //2.  cd target/\n    //2. java -jar cici-log.jar\n\n    //第三种\n    //直接运行main方法\n\n    //启动时候选择配置文件启动\n    //3 application.yml application-dev.yml application-pro.yml\n    //3. mvn install\n    //3.  cd target/\n    //3. java -jar cici-log.jar -spring.profies.active=pro\n\n    //后台启动\n    /**\n     *  nohup java -jar cici-log.jar &\n     *  nohup java -jar cici-log.jar  /dev/null 2>&1 &\n     *\n     * */\n    public static void main(String[] args){\n        SpringApplication.run(MainApplation.class,args);\n    }\n\n  }\n  \n  ```\n    \n### 2.RestAPI创建   \n   \n   创建服务接口包括post/put/get/delete\n   创建 SysUserController.java \n   添加注解\n   \n   ```\n   @RestController\n   @RequestMapping(\"/api/sysUser\")\n   ```\n  \n   完整服务接口代码\n   \n   ```\n@RestController\n@RequestMapping(\"/api/sysUser\")\npublic class SysUserController {\n\n    @GetMapping(value = \"list\")\n    public List<CatUser> catalog(){\n        return null;\n    }\n\n    //获取数据\n    @GetMapping(value = \"update/{id}\")\n    public CatUser get(@PathVariable(\"id\")String id){\n        return null;\n    }\n\n    //新增\n    @PostMapping(value = \"update\")\n    public Object add(@RequestBody Object c){\n\n        return null;\n    }\n\n    //更新\n    @PutMapping(value = \"update\")\n    public CatUser update(@RequestBody CatUser c){\n\n        return null;\n    }\n\n    //删除\n    @DeleteMapping(value = \"update/{id}\")\n    public void add(@PathVariable(\"id\")String id){\n\n    }\n}\n\n```\n \n###  3. 数据层/服务层实现（事务，链接池）  \n  \n  当我们接口服务创建完成后开始创建服务层数据层代码\n  \n#### 1. 配置文件 spring boot 推荐使用.yml 配置，此方法少去很多冗余字段\n#### 2. 我们创建 application.yml \n  \n ```\n\nspring:\n  profiles:\n    active: dev\n  jpa:\n     hibernate:\n       ddl-auto: none\n     show-sql: true\n\n\n ```\n - spring.profiles.active: dev 读取配置文件为 application-dev.yml 的配置文件,目前用于测试环境和生   产环境配置分类 \n - jpa.hibernate.ddl-auto:  会根据绑定的实体(@Entity)生成 ,建议使用 none\n \n \t\t+ validate   加载hibernate时，验证创建数据库表结构\n \t\t+ create      每次加载hibernate，重新创建数据库表结构，这就是导致数据库表数据丢失的原因。\n \t\t+ create-drop  加载hibernate时创建，退出是删除表结构\n \t\t+ update        加载hibernate自动更新数据库结构\n - jpa.hibernate.show-sql: true 显示sql \n  \n \n#### 3. 创建数据库配置 application-dev.yml \n\n```\nserver:\n    port: 7777\nspring:\n  datasource:\n      driver-class-name: oracle.jdbc.driver.OracleDriver\n      url: jdbc:oracle:thin:@172.25.13.98:1521:data98\n      username: HHZY_TEST\n      password: HHZY_TEST\n      type: com.alibaba.druid.pool.DruidDataSource\n      spring.datasource.initialSize: 5\n      spring.datasource.minIdle: 5\n      spring.datasource.maxActive: 20\n      spring.datasource.maxWait: 60000\n      timeBetweenEvictionRunsMillis: 60000\n      minEvictableIdleTimeMillis: 300000\n      validationQuery: SELECT 1 FROM DUAL\n      testWhileIdle: true\n      testOnBorrow: false\n      testOnReturn: false\n      poolPreparedStatements: true\n      maxPoolPreparedStatementPerConnectionSize: 20\n      filters: stat,wall,log4j\n      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000\n      useGlobalDataSourceStat: true\nlogging.level.root: DEBUG\nlogging.level.org.springframework.web: DEBUG\nlogging.level.org.hibernate: DEBUG\n\n\n```\n \n   \n   \n- server.port: 7777 为当前服务端口\n\n\n- \nspring.datasource 数据库连接配置当前使用连接池的是 [DruidDataSource](https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8)\n  + 创建 druid 访问[http://localhost:7777/druid/index.html](http://localhost:7777/druid/index.html)\n  \n      \n  ```  \n@SuppressWarnings(\"serial\")\n@WebServlet(urlPatterns = \"/druid/*\",  initParams = {\n                @WebInitParam(name = \"allow\", value = \"127.0.0.1\"),// IP白名单 (没有配置或者为空，则允许所有访问)\n                @WebInitParam(name = \"deny\", value = \"192.168.16.111\"),// IP黑名单 (存在共同时，deny优先于allow)\n                @WebInitParam(name = \"loginUsername\", value = \"zc\"),// 用户名\n                @WebInitParam(name = \"loginPassword\", value = \"zc\"),// 密码\n                @WebInitParam(name = \"resetEnable\", value = \"false\")// 禁用HTML页面上的“Reset All”功能\n        })\npublic class DruidStatViewServlet extends StatViewServlet {\n}\n\n  ```\n    \n   + 创建druid 过滤器\n   \n```\n   \n   @WebFilter(filterName = \"druidWebStatFilter\", urlPatterns = \"/*\",\n        initParams = {\n                @WebInitParam(name = \"exclusions\", value = \"*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*\")// 忽略资源\n        })\npublic class DruidStatFilter extends WebStatFilter {\n}\n\n```\n    \n   \n#### 4. 创建数据模型\n   创建实体类添加数据注解（@Entity）\n   SysUser.java \n   非完整代码\n \n ```\n\n @Entity\n public class SysUser extends BaseDomain {\n \n    private String id;\n    ...\n    ...\n  \n ```\n   \n   \n####  5. 创建服务层(事务，单表更新级查询)及数据访问层\n   创建数据库层接口 SysUserRepository.java 继承 JpaRepository<SysUser(当前对象),String(当前对象主键ID)>  \n    \n  ```\n   \n    public interface SysUserRepository  extends JpaRepository<SysUser,String> { }\n   \n  ```\n    \n   创建服务层类 SysUserService.java (新增修改删除查询，不用写sql)\n   \n   \n   ```\n   @Service\npublic class SysUserService {\n\n    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n\n\n    @Autowired\n    private SysUserRepository sysUserRepository;\n\n\n    public List<SysUser> findAll() {\n        return sysUserRepository.findAll();\n    }\n\n    public SysUser update(SysUser sysUser) {\n\n        if (StringUtils.isEmpty(sysUser.getId())) {\n            sysUser.setId(\"ID存在更新,否则新增\");\n        }\n\n        logger.debug(\"新增了用户\");\n        return sysUserRepository.saveAndFlush(sysUser);\n    }\n\n\n    public void delete(String id) {\n        logger.debug(\"删除了用户\");\n         sysUserRepository.delete(id);\n    }\n\n    public SysUser findOne(String id) {\n        return sysUserRepository.findOne(id);\n    }\n\n}\n  \n   ```\n   \n \n   \n     \n#### 6. 控制层调用 \n  创建SysUserController.java \n  \n  \n  \n```\n\n  \n//系统用户管理\n@RestController\n@RequestMapping(\"/api/sysUser\")\npublic class SysUserController {\n\n    @Autowired\n    SysUserService sysUserService;\n\n    @GetMapping(value = \"list\")\n    public List<SysUser> list(){\n        return sysUserService.findAll();\n    }\n\n    //获取数据\n    @GetMapping(value = \"update/{id}\")\n    public SysUser get(@PathVariable(\"id\")String id){\n        return sysUserService.findOne(id);\n    }\n\n    //新增\n    @PostMapping(value = \"update\")\n    public Object add(@RequestBody SysUser c){\n        return sysUserService.update(c);\n    }\n\n    //更新\n    @PutMapping(value = \"update\")\n    public SysUser update(@RequestBody SysUser c){\n        return sysUserService.update(c);\n    }\n\n    //删除\n    @DeleteMapping(value = \"update/{id}\")\n    public void add(@PathVariable(\"id\")String id){\n        sysUserService.delete(id);\n    }\n}\n\n  \n```\n  \n  到目前为止，我们实现了对单表的增删改查所有操作，没有写一句sql，下面我们将添加复杂sql查询，以及最终版本入门框架搭建\n\n### 后续会介绍整体架构，可以应用于项目开发\n\n\n---\n####  项目源码:[github源码地址](https://github.com/zccccccc/cici) \n---\n   \n  \n    \n     \n   \n   \n  \n  \n \n  \n  \n       \n  \n   ","source":"_posts/spring-boot-搭建-不解释.md","raw":"---\ntitle: spring-boot 搭建-不解释\ndate: 2017-03-06 14:21:59\ntags: java\nlayout: clean-blog\nslug: spring-boot-first\n\n---\n\n## 本文为Spring-boot入门篇,老司机跳过\n  \n  1. 服务创建\n  2. RestAPI创建(配置文件)\n  3. 数据层（链接池）/服务层实现(事务，单表更新级查询)/整合接口服务\n \n    \n    \n  \n\n> ** 知识准备。 **\n>  spring boot 基于 maven创建，如果不熟悉请先学习[maven 教程](http://www.yiibai.com/maven/)  \n\n---\n####  项目源码:[github源码地址](https://github.com/zccccccc/cici) \n---\n\n\n### 1.创建maven web项目 (如果选择 springBoot模版创建速度非常慢，个人感觉直接创建比较简单)  \n \n  * 创建maven web项目 (如果选择 springBoot模版创建速度非常慢，个人感觉直接创建比较)\n  修改pom.xml,添加springboot依赖\n  \n  ```\n   <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.4.1.RELEASE</version>\n    </parent>\n\n    <dependencies>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-thymeleaf</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\n        </dependency>\n\n\n        <dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-lang3</artifactId>\n            <version>3.0</version>\n        </dependency>\n\n\n        <dependency>\n            <groupId>com.oracle</groupId>\n            <artifactId>ojdbc14</artifactId>\n            <version>10.2.0.4.0</version>\n        </dependency>\n\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>druid</artifactId>\n            <version>1.0.18</version>\n        </dependency>\n\n\n    </dependencies>\n  \n  ```\n \n  * 创建启动入口文件 运行main方法，服务搭建就OK啦\n  \n  ```\n  @SpringBootApplication\npublic class MainApp extends WebMvcConfigurerAdapter {\n\n    //第一种\n    //1 cd  当前项目根目录下\n    //1 mvn spring-boot:run\n\n    //第二种\n    //2 cd  当前项目根目录下\n    //2. mvn install\n    //2.  cd target/\n    //2. java -jar cici-log.jar\n\n    //第三种\n    //直接运行main方法\n\n    //启动时候选择配置文件启动\n    //3 application.yml application-dev.yml application-pro.yml\n    //3. mvn install\n    //3.  cd target/\n    //3. java -jar cici-log.jar -spring.profies.active=pro\n\n    //后台启动\n    /**\n     *  nohup java -jar cici-log.jar &\n     *  nohup java -jar cici-log.jar  /dev/null 2>&1 &\n     *\n     * */\n    public static void main(String[] args){\n        SpringApplication.run(MainApplation.class,args);\n    }\n\n  }\n  \n  ```\n    \n### 2.RestAPI创建   \n   \n   创建服务接口包括post/put/get/delete\n   创建 SysUserController.java \n   添加注解\n   \n   ```\n   @RestController\n   @RequestMapping(\"/api/sysUser\")\n   ```\n  \n   完整服务接口代码\n   \n   ```\n@RestController\n@RequestMapping(\"/api/sysUser\")\npublic class SysUserController {\n\n    @GetMapping(value = \"list\")\n    public List<CatUser> catalog(){\n        return null;\n    }\n\n    //获取数据\n    @GetMapping(value = \"update/{id}\")\n    public CatUser get(@PathVariable(\"id\")String id){\n        return null;\n    }\n\n    //新增\n    @PostMapping(value = \"update\")\n    public Object add(@RequestBody Object c){\n\n        return null;\n    }\n\n    //更新\n    @PutMapping(value = \"update\")\n    public CatUser update(@RequestBody CatUser c){\n\n        return null;\n    }\n\n    //删除\n    @DeleteMapping(value = \"update/{id}\")\n    public void add(@PathVariable(\"id\")String id){\n\n    }\n}\n\n```\n \n###  3. 数据层/服务层实现（事务，链接池）  \n  \n  当我们接口服务创建完成后开始创建服务层数据层代码\n  \n#### 1. 配置文件 spring boot 推荐使用.yml 配置，此方法少去很多冗余字段\n#### 2. 我们创建 application.yml \n  \n ```\n\nspring:\n  profiles:\n    active: dev\n  jpa:\n     hibernate:\n       ddl-auto: none\n     show-sql: true\n\n\n ```\n - spring.profiles.active: dev 读取配置文件为 application-dev.yml 的配置文件,目前用于测试环境和生   产环境配置分类 \n - jpa.hibernate.ddl-auto:  会根据绑定的实体(@Entity)生成 ,建议使用 none\n \n \t\t+ validate   加载hibernate时，验证创建数据库表结构\n \t\t+ create      每次加载hibernate，重新创建数据库表结构，这就是导致数据库表数据丢失的原因。\n \t\t+ create-drop  加载hibernate时创建，退出是删除表结构\n \t\t+ update        加载hibernate自动更新数据库结构\n - jpa.hibernate.show-sql: true 显示sql \n  \n \n#### 3. 创建数据库配置 application-dev.yml \n\n```\nserver:\n    port: 7777\nspring:\n  datasource:\n      driver-class-name: oracle.jdbc.driver.OracleDriver\n      url: jdbc:oracle:thin:@172.25.13.98:1521:data98\n      username: HHZY_TEST\n      password: HHZY_TEST\n      type: com.alibaba.druid.pool.DruidDataSource\n      spring.datasource.initialSize: 5\n      spring.datasource.minIdle: 5\n      spring.datasource.maxActive: 20\n      spring.datasource.maxWait: 60000\n      timeBetweenEvictionRunsMillis: 60000\n      minEvictableIdleTimeMillis: 300000\n      validationQuery: SELECT 1 FROM DUAL\n      testWhileIdle: true\n      testOnBorrow: false\n      testOnReturn: false\n      poolPreparedStatements: true\n      maxPoolPreparedStatementPerConnectionSize: 20\n      filters: stat,wall,log4j\n      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000\n      useGlobalDataSourceStat: true\nlogging.level.root: DEBUG\nlogging.level.org.springframework.web: DEBUG\nlogging.level.org.hibernate: DEBUG\n\n\n```\n \n   \n   \n- server.port: 7777 为当前服务端口\n\n\n- \nspring.datasource 数据库连接配置当前使用连接池的是 [DruidDataSource](https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8)\n  + 创建 druid 访问[http://localhost:7777/druid/index.html](http://localhost:7777/druid/index.html)\n  \n      \n  ```  \n@SuppressWarnings(\"serial\")\n@WebServlet(urlPatterns = \"/druid/*\",  initParams = {\n                @WebInitParam(name = \"allow\", value = \"127.0.0.1\"),// IP白名单 (没有配置或者为空，则允许所有访问)\n                @WebInitParam(name = \"deny\", value = \"192.168.16.111\"),// IP黑名单 (存在共同时，deny优先于allow)\n                @WebInitParam(name = \"loginUsername\", value = \"zc\"),// 用户名\n                @WebInitParam(name = \"loginPassword\", value = \"zc\"),// 密码\n                @WebInitParam(name = \"resetEnable\", value = \"false\")// 禁用HTML页面上的“Reset All”功能\n        })\npublic class DruidStatViewServlet extends StatViewServlet {\n}\n\n  ```\n    \n   + 创建druid 过滤器\n   \n```\n   \n   @WebFilter(filterName = \"druidWebStatFilter\", urlPatterns = \"/*\",\n        initParams = {\n                @WebInitParam(name = \"exclusions\", value = \"*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*\")// 忽略资源\n        })\npublic class DruidStatFilter extends WebStatFilter {\n}\n\n```\n    \n   \n#### 4. 创建数据模型\n   创建实体类添加数据注解（@Entity）\n   SysUser.java \n   非完整代码\n \n ```\n\n @Entity\n public class SysUser extends BaseDomain {\n \n    private String id;\n    ...\n    ...\n  \n ```\n   \n   \n####  5. 创建服务层(事务，单表更新级查询)及数据访问层\n   创建数据库层接口 SysUserRepository.java 继承 JpaRepository<SysUser(当前对象),String(当前对象主键ID)>  \n    \n  ```\n   \n    public interface SysUserRepository  extends JpaRepository<SysUser,String> { }\n   \n  ```\n    \n   创建服务层类 SysUserService.java (新增修改删除查询，不用写sql)\n   \n   \n   ```\n   @Service\npublic class SysUserService {\n\n    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n\n\n    @Autowired\n    private SysUserRepository sysUserRepository;\n\n\n    public List<SysUser> findAll() {\n        return sysUserRepository.findAll();\n    }\n\n    public SysUser update(SysUser sysUser) {\n\n        if (StringUtils.isEmpty(sysUser.getId())) {\n            sysUser.setId(\"ID存在更新,否则新增\");\n        }\n\n        logger.debug(\"新增了用户\");\n        return sysUserRepository.saveAndFlush(sysUser);\n    }\n\n\n    public void delete(String id) {\n        logger.debug(\"删除了用户\");\n         sysUserRepository.delete(id);\n    }\n\n    public SysUser findOne(String id) {\n        return sysUserRepository.findOne(id);\n    }\n\n}\n  \n   ```\n   \n \n   \n     \n#### 6. 控制层调用 \n  创建SysUserController.java \n  \n  \n  \n```\n\n  \n//系统用户管理\n@RestController\n@RequestMapping(\"/api/sysUser\")\npublic class SysUserController {\n\n    @Autowired\n    SysUserService sysUserService;\n\n    @GetMapping(value = \"list\")\n    public List<SysUser> list(){\n        return sysUserService.findAll();\n    }\n\n    //获取数据\n    @GetMapping(value = \"update/{id}\")\n    public SysUser get(@PathVariable(\"id\")String id){\n        return sysUserService.findOne(id);\n    }\n\n    //新增\n    @PostMapping(value = \"update\")\n    public Object add(@RequestBody SysUser c){\n        return sysUserService.update(c);\n    }\n\n    //更新\n    @PutMapping(value = \"update\")\n    public SysUser update(@RequestBody SysUser c){\n        return sysUserService.update(c);\n    }\n\n    //删除\n    @DeleteMapping(value = \"update/{id}\")\n    public void add(@PathVariable(\"id\")String id){\n        sysUserService.delete(id);\n    }\n}\n\n  \n```\n  \n  到目前为止，我们实现了对单表的增删改查所有操作，没有写一句sql，下面我们将添加复杂sql查询，以及最终版本入门框架搭建\n\n### 后续会介绍整体架构，可以应用于项目开发\n\n\n---\n####  项目源码:[github源码地址](https://github.com/zccccccc/cici) \n---\n   \n  \n    \n     \n   \n   \n  \n  \n \n  \n  \n       \n  \n   ","published":1,"updated":"2017-03-10T02:01:14.000Z","comments":1,"photos":[],"link":"","_id":"cj0uc8d0e0008ey5rm9yenpdf","content":"<h2 id=\"本文为Spring-boot入门篇-老司机跳过\"><a href=\"#本文为Spring-boot入门篇-老司机跳过\" class=\"headerlink\" title=\"本文为Spring-boot入门篇,老司机跳过\"></a>本文为Spring-boot入门篇,老司机跳过</h2><ol>\n<li>服务创建</li>\n<li>RestAPI创建(配置文件)</li>\n<li>数据层（链接池）/服务层实现(事务，单表更新级查询)/整合接口服务</li>\n</ol>\n<blockquote>\n<p><strong> 知识准备。 </strong><br> spring boot 基于 maven创建，如果不熟悉请先学习<a href=\"http://www.yiibai.com/maven/\" target=\"_blank\" rel=\"external\">maven 教程</a>  </p>\n</blockquote>\n<hr>\n<h4 id=\"项目源码-github源码地址\"><a href=\"#项目源码-github源码地址\" class=\"headerlink\" title=\"项目源码:github源码地址\"></a>项目源码:<a href=\"https://github.com/zccccccc/cici\">github源码地址</a></h4><hr>\n<h3 id=\"1-创建maven-web项目-如果选择-springBoot模版创建速度非常慢，个人感觉直接创建比较简单\"><a href=\"#1-创建maven-web项目-如果选择-springBoot模版创建速度非常慢，个人感觉直接创建比较简单\" class=\"headerlink\" title=\"1.创建maven web项目 (如果选择 springBoot模版创建速度非常慢，个人感觉直接创建比较简单)\"></a>1.创建maven web项目 (如果选择 springBoot模版创建速度非常慢，个人感觉直接创建比较简单)</h3><ul>\n<li><p>创建maven web项目 (如果选择 springBoot模版创建速度非常慢，个人感觉直接创建比较)<br>修改pom.xml,添加springboot依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;parent&gt;</div><div class=\"line\">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">     &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class=\"line\">     &lt;version&gt;1.4.1.RELEASE&lt;/version&gt;</div><div class=\"line\"> &lt;/parent&gt;</div><div class=\"line\"></div><div class=\"line\"> &lt;dependencies&gt;</div><div class=\"line\"></div><div class=\"line\">     &lt;dependency&gt;</div><div class=\"line\">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class=\"line\">     &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">     &lt;dependency&gt;</div><div class=\"line\">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</div><div class=\"line\">         &lt;scope&gt;test&lt;/scope&gt;</div><div class=\"line\">     &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">     &lt;dependency&gt;</div><div class=\"line\">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</div><div class=\"line\">     &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">     &lt;dependency&gt;</div><div class=\"line\">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</div><div class=\"line\">     &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">     &lt;dependency&gt;</div><div class=\"line\">         &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</div><div class=\"line\">         &lt;version&gt;3.0&lt;/version&gt;</div><div class=\"line\">     &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">     &lt;dependency&gt;</div><div class=\"line\">         &lt;groupId&gt;com.oracle&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;ojdbc14&lt;/artifactId&gt;</div><div class=\"line\">         &lt;version&gt;10.2.0.4.0&lt;/version&gt;</div><div class=\"line\">     &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">     &lt;dependency&gt;</div><div class=\"line\">         &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;druid&lt;/artifactId&gt;</div><div class=\"line\">         &lt;version&gt;1.0.18&lt;/version&gt;</div><div class=\"line\">     &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> &lt;/dependencies&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>创建启动入口文件 运行main方法，服务搭建就OK啦</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">  @SpringBootApplication</div><div class=\"line\">public class MainApp extends WebMvcConfigurerAdapter &#123;</div><div class=\"line\"></div><div class=\"line\">    //第一种</div><div class=\"line\">    //1 cd  当前项目根目录下</div><div class=\"line\">    //1 mvn spring-boot:run</div><div class=\"line\"></div><div class=\"line\">    //第二种</div><div class=\"line\">    //2 cd  当前项目根目录下</div><div class=\"line\">    //2. mvn install</div><div class=\"line\">    //2.  cd target/</div><div class=\"line\">    //2. java -jar cici-log.jar</div><div class=\"line\"></div><div class=\"line\">    //第三种</div><div class=\"line\">    //直接运行main方法</div><div class=\"line\"></div><div class=\"line\">    //启动时候选择配置文件启动</div><div class=\"line\">    //3 application.yml application-dev.yml application-pro.yml</div><div class=\"line\">    //3. mvn install</div><div class=\"line\">    //3.  cd target/</div><div class=\"line\">    //3. java -jar cici-log.jar -spring.profies.active=pro</div><div class=\"line\"></div><div class=\"line\">    //后台启动</div><div class=\"line\">    /**</div><div class=\"line\">     *  nohup java -jar cici-log.jar &amp;</div><div class=\"line\">     *  nohup java -jar cici-log.jar  /dev/null 2&gt;&amp;1 &amp;</div><div class=\"line\">     *</div><div class=\"line\">     * */</div><div class=\"line\">    public static void main(String[] args)&#123;</div><div class=\"line\">        SpringApplication.run(MainApplation.class,args);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2-RestAPI创建\"><a href=\"#2-RestAPI创建\" class=\"headerlink\" title=\"2.RestAPI创建\"></a>2.RestAPI创建</h3><p>   创建服务接口包括post/put/get/delete<br>   创建 SysUserController.java<br>   添加注解</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">@RestController</div><div class=\"line\">@RequestMapping(&quot;/api/sysUser&quot;)</div></pre></td></tr></table></figure>\n<p>   完整服务接口代码</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">@RestController</div><div class=\"line\">@RequestMapping(&quot;/api/sysUser&quot;)</div><div class=\"line\">public class SysUserController &#123;</div><div class=\"line\"></div><div class=\"line\">    @GetMapping(value = &quot;list&quot;)</div><div class=\"line\">    public List&lt;CatUser&gt; catalog()&#123;</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //获取数据</div><div class=\"line\">    @GetMapping(value = &quot;update/&#123;id&#125;&quot;)</div><div class=\"line\">    public CatUser get(@PathVariable(&quot;id&quot;)String id)&#123;</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //新增</div><div class=\"line\">    @PostMapping(value = &quot;update&quot;)</div><div class=\"line\">    public Object add(@RequestBody Object c)&#123;</div><div class=\"line\"></div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //更新</div><div class=\"line\">    @PutMapping(value = &quot;update&quot;)</div><div class=\"line\">    public CatUser update(@RequestBody CatUser c)&#123;</div><div class=\"line\"></div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //删除</div><div class=\"line\">    @DeleteMapping(value = &quot;update/&#123;id&#125;&quot;)</div><div class=\"line\">    public void add(@PathVariable(&quot;id&quot;)String id)&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-数据层-服务层实现（事务，链接池）\"><a href=\"#3-数据层-服务层实现（事务，链接池）\" class=\"headerlink\" title=\"3. 数据层/服务层实现（事务，链接池）\"></a>3. 数据层/服务层实现（事务，链接池）</h3><p>  当我们接口服务创建完成后开始创建服务层数据层代码</p>\n<h4 id=\"1-配置文件-spring-boot-推荐使用-yml-配置，此方法少去很多冗余字段\"><a href=\"#1-配置文件-spring-boot-推荐使用-yml-配置，此方法少去很多冗余字段\" class=\"headerlink\" title=\"1. 配置文件 spring boot 推荐使用.yml 配置，此方法少去很多冗余字段\"></a>1. 配置文件 spring boot 推荐使用.yml 配置，此方法少去很多冗余字段</h4><h4 id=\"2-我们创建-application-yml\"><a href=\"#2-我们创建-application-yml\" class=\"headerlink\" title=\"2. 我们创建 application.yml\"></a>2. 我们创建 application.yml</h4> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">spring:</div><div class=\"line\">  profiles:</div><div class=\"line\">    active: dev</div><div class=\"line\">  jpa:</div><div class=\"line\">     hibernate:</div><div class=\"line\">       ddl-auto: none</div><div class=\"line\">     show-sql: true</div></pre></td></tr></table></figure>\n<ul>\n<li>spring.profiles.active: dev 读取配置文件为 application-dev.yml 的配置文件,目前用于测试环境和生   产环境配置分类 </li>\n<li><p>jpa.hibernate.ddl-auto:  会根据绑定的实体(@Entity)生成 ,建议使用 none</p>\n<pre><code>+ validate   加载hibernate时，验证创建数据库表结构\n+ create      每次加载hibernate，重新创建数据库表结构，这就是导致数据库表数据丢失的原因。\n+ create-drop  加载hibernate时创建，退出是删除表结构\n+ update        加载hibernate自动更新数据库结构\n</code></pre></li>\n<li>jpa.hibernate.show-sql: true 显示sql </li>\n</ul>\n<h4 id=\"3-创建数据库配置-application-dev-yml\"><a href=\"#3-创建数据库配置-application-dev-yml\" class=\"headerlink\" title=\"3. 创建数据库配置 application-dev.yml\"></a>3. 创建数据库配置 application-dev.yml</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">server:</div><div class=\"line\">    port: 7777</div><div class=\"line\">spring:</div><div class=\"line\">  datasource:</div><div class=\"line\">      driver-class-name: oracle.jdbc.driver.OracleDriver</div><div class=\"line\">      url: jdbc:oracle:thin:@172.25.13.98:1521:data98</div><div class=\"line\">      username: HHZY_TEST</div><div class=\"line\">      password: HHZY_TEST</div><div class=\"line\">      type: com.alibaba.druid.pool.DruidDataSource</div><div class=\"line\">      spring.datasource.initialSize: 5</div><div class=\"line\">      spring.datasource.minIdle: 5</div><div class=\"line\">      spring.datasource.maxActive: 20</div><div class=\"line\">      spring.datasource.maxWait: 60000</div><div class=\"line\">      timeBetweenEvictionRunsMillis: 60000</div><div class=\"line\">      minEvictableIdleTimeMillis: 300000</div><div class=\"line\">      validationQuery: SELECT 1 FROM DUAL</div><div class=\"line\">      testWhileIdle: true</div><div class=\"line\">      testOnBorrow: false</div><div class=\"line\">      testOnReturn: false</div><div class=\"line\">      poolPreparedStatements: true</div><div class=\"line\">      maxPoolPreparedStatementPerConnectionSize: 20</div><div class=\"line\">      filters: stat,wall,log4j</div><div class=\"line\">      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</div><div class=\"line\">      useGlobalDataSourceStat: true</div><div class=\"line\">logging.level.root: DEBUG</div><div class=\"line\">logging.level.org.springframework.web: DEBUG</div><div class=\"line\">logging.level.org.hibernate: DEBUG</div></pre></td></tr></table></figure>\n<ul>\n<li>server.port: 7777 为当前服务端口</li>\n</ul>\n<ul>\n<li>spring.datasource 数据库连接配置当前使用连接池的是 <a href=\"https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8\">DruidDataSource</a><ul>\n<li>创建 druid 访问<a href=\"http://localhost:7777/druid/index.html\" target=\"_blank\" rel=\"external\">http://localhost:7777/druid/index.html</a></li>\n</ul>\n</li>\n</ul>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">@SuppressWarnings(&quot;serial&quot;)</div><div class=\"line\">@WebServlet(urlPatterns = &quot;/druid/*&quot;,  initParams = &#123;</div><div class=\"line\">                @WebInitParam(name = &quot;allow&quot;, value = &quot;127.0.0.1&quot;),// IP白名单 (没有配置或者为空，则允许所有访问)</div><div class=\"line\">                @WebInitParam(name = &quot;deny&quot;, value = &quot;192.168.16.111&quot;),// IP黑名单 (存在共同时，deny优先于allow)</div><div class=\"line\">                @WebInitParam(name = &quot;loginUsername&quot;, value = &quot;zc&quot;),// 用户名</div><div class=\"line\">                @WebInitParam(name = &quot;loginPassword&quot;, value = &quot;zc&quot;),// 密码</div><div class=\"line\">                @WebInitParam(name = &quot;resetEnable&quot;, value = &quot;false&quot;)// 禁用HTML页面上的“Reset All”功能</div><div class=\"line\">        &#125;)</div><div class=\"line\">public class DruidStatViewServlet extends StatViewServlet &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>创建druid 过滤器</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">   </div><div class=\"line\">   @WebFilter(filterName = &quot;druidWebStatFilter&quot;, urlPatterns = &quot;/*&quot;,</div><div class=\"line\">        initParams = &#123;</div><div class=\"line\">                @WebInitParam(name = &quot;exclusions&quot;, value = &quot;*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*&quot;)// 忽略资源</div><div class=\"line\">        &#125;)</div><div class=\"line\">public class DruidStatFilter extends WebStatFilter &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-创建数据模型\"><a href=\"#4-创建数据模型\" class=\"headerlink\" title=\"4. 创建数据模型\"></a>4. 创建数据模型</h4><p>   创建实体类添加数据注解（@Entity）<br>   SysUser.java<br>   非完整代码</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@Entity</div><div class=\"line\">public class SysUser extends BaseDomain &#123;</div><div class=\"line\"></div><div class=\"line\">   private String id;</div><div class=\"line\">   ...</div><div class=\"line\">   ...</div></pre></td></tr></table></figure>\n<h4 id=\"5-创建服务层-事务，单表更新级查询-及数据访问层\"><a href=\"#5-创建服务层-事务，单表更新级查询-及数据访问层\" class=\"headerlink\" title=\"5. 创建服务层(事务，单表更新级查询)及数据访问层\"></a>5. 创建服务层(事务，单表更新级查询)及数据访问层</h4><p>   创建数据库层接口 SysUserRepository.java 继承 JpaRepository<sysuser(当前对象),string(当前对象主键id)>  </sysuser(当前对象),string(当前对象主键id)></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">   </div><div class=\"line\">public interface SysUserRepository  extends JpaRepository&lt;SysUser,String&gt; &#123; &#125;</div></pre></td></tr></table></figure>\n<p>   创建服务层类 SysUserService.java (新增修改删除查询，不用写sql)</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">   @Service</div><div class=\"line\">public class SysUserService &#123;</div><div class=\"line\"></div><div class=\"line\">    private final Logger logger = LoggerFactory.getLogger(this.getClass());</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    @Autowired</div><div class=\"line\">    private SysUserRepository sysUserRepository;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public List&lt;SysUser&gt; findAll() &#123;</div><div class=\"line\">        return sysUserRepository.findAll();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public SysUser update(SysUser sysUser) &#123;</div><div class=\"line\"></div><div class=\"line\">        if (StringUtils.isEmpty(sysUser.getId())) &#123;</div><div class=\"line\">            sysUser.setId(&quot;ID存在更新,否则新增&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        logger.debug(&quot;新增了用户&quot;);</div><div class=\"line\">        return sysUserRepository.saveAndFlush(sysUser);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public void delete(String id) &#123;</div><div class=\"line\">        logger.debug(&quot;删除了用户&quot;);</div><div class=\"line\">         sysUserRepository.delete(id);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public SysUser findOne(String id) &#123;</div><div class=\"line\">        return sysUserRepository.findOne(id);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"6-控制层调用\"><a href=\"#6-控制层调用\" class=\"headerlink\" title=\"6. 控制层调用\"></a>6. 控制层调用</h4><p>  创建SysUserController.java </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\">//系统用户管理</div><div class=\"line\">@RestController</div><div class=\"line\">@RequestMapping(&quot;/api/sysUser&quot;)</div><div class=\"line\">public class SysUserController &#123;</div><div class=\"line\"></div><div class=\"line\">    @Autowired</div><div class=\"line\">    SysUserService sysUserService;</div><div class=\"line\"></div><div class=\"line\">    @GetMapping(value = &quot;list&quot;)</div><div class=\"line\">    public List&lt;SysUser&gt; list()&#123;</div><div class=\"line\">        return sysUserService.findAll();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //获取数据</div><div class=\"line\">    @GetMapping(value = &quot;update/&#123;id&#125;&quot;)</div><div class=\"line\">    public SysUser get(@PathVariable(&quot;id&quot;)String id)&#123;</div><div class=\"line\">        return sysUserService.findOne(id);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //新增</div><div class=\"line\">    @PostMapping(value = &quot;update&quot;)</div><div class=\"line\">    public Object add(@RequestBody SysUser c)&#123;</div><div class=\"line\">        return sysUserService.update(c);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //更新</div><div class=\"line\">    @PutMapping(value = &quot;update&quot;)</div><div class=\"line\">    public SysUser update(@RequestBody SysUser c)&#123;</div><div class=\"line\">        return sysUserService.update(c);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //删除</div><div class=\"line\">    @DeleteMapping(value = &quot;update/&#123;id&#125;&quot;)</div><div class=\"line\">    public void add(@PathVariable(&quot;id&quot;)String id)&#123;</div><div class=\"line\">        sysUserService.delete(id);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  到目前为止，我们实现了对单表的增删改查所有操作，没有写一句sql，下面我们将添加复杂sql查询，以及最终版本入门框架搭建</p>\n<h3 id=\"后续会介绍整体架构，可以应用于项目开发\"><a href=\"#后续会介绍整体架构，可以应用于项目开发\" class=\"headerlink\" title=\"后续会介绍整体架构，可以应用于项目开发\"></a>后续会介绍整体架构，可以应用于项目开发</h3><hr>\n<h4 id=\"项目源码-github源码地址-1\"><a href=\"#项目源码-github源码地址-1\" class=\"headerlink\" title=\"项目源码:github源码地址\"></a>项目源码:<a href=\"https://github.com/zccccccc/cici\">github源码地址</a></h4><hr>\n","excerpt":"","more":"<h2 id=\"本文为Spring-boot入门篇-老司机跳过\"><a href=\"#本文为Spring-boot入门篇-老司机跳过\" class=\"headerlink\" title=\"本文为Spring-boot入门篇,老司机跳过\"></a>本文为Spring-boot入门篇,老司机跳过</h2><ol>\n<li>服务创建</li>\n<li>RestAPI创建(配置文件)</li>\n<li>数据层（链接池）/服务层实现(事务，单表更新级查询)/整合接口服务</li>\n</ol>\n<blockquote>\n<p><strong> 知识准备。 </strong><br> spring boot 基于 maven创建，如果不熟悉请先学习<a href=\"http://www.yiibai.com/maven/\">maven 教程</a>  </p>\n</blockquote>\n<hr>\n<h4 id=\"项目源码-github源码地址\"><a href=\"#项目源码-github源码地址\" class=\"headerlink\" title=\"项目源码:github源码地址\"></a>项目源码:<a href=\"https://github.com/zccccccc/cici\">github源码地址</a></h4><hr>\n<h3 id=\"1-创建maven-web项目-如果选择-springBoot模版创建速度非常慢，个人感觉直接创建比较简单\"><a href=\"#1-创建maven-web项目-如果选择-springBoot模版创建速度非常慢，个人感觉直接创建比较简单\" class=\"headerlink\" title=\"1.创建maven web项目 (如果选择 springBoot模版创建速度非常慢，个人感觉直接创建比较简单)\"></a>1.创建maven web项目 (如果选择 springBoot模版创建速度非常慢，个人感觉直接创建比较简单)</h3><ul>\n<li><p>创建maven web项目 (如果选择 springBoot模版创建速度非常慢，个人感觉直接创建比较)<br>修改pom.xml,添加springboot依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;parent&gt;</div><div class=\"line\">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">     &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class=\"line\">     &lt;version&gt;1.4.1.RELEASE&lt;/version&gt;</div><div class=\"line\"> &lt;/parent&gt;</div><div class=\"line\"></div><div class=\"line\"> &lt;dependencies&gt;</div><div class=\"line\"></div><div class=\"line\">     &lt;dependency&gt;</div><div class=\"line\">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class=\"line\">     &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">     &lt;dependency&gt;</div><div class=\"line\">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</div><div class=\"line\">         &lt;scope&gt;test&lt;/scope&gt;</div><div class=\"line\">     &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">     &lt;dependency&gt;</div><div class=\"line\">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</div><div class=\"line\">     &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">     &lt;dependency&gt;</div><div class=\"line\">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</div><div class=\"line\">     &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">     &lt;dependency&gt;</div><div class=\"line\">         &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</div><div class=\"line\">         &lt;version&gt;3.0&lt;/version&gt;</div><div class=\"line\">     &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">     &lt;dependency&gt;</div><div class=\"line\">         &lt;groupId&gt;com.oracle&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;ojdbc14&lt;/artifactId&gt;</div><div class=\"line\">         &lt;version&gt;10.2.0.4.0&lt;/version&gt;</div><div class=\"line\">     &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">     &lt;dependency&gt;</div><div class=\"line\">         &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;druid&lt;/artifactId&gt;</div><div class=\"line\">         &lt;version&gt;1.0.18&lt;/version&gt;</div><div class=\"line\">     &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> &lt;/dependencies&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>创建启动入口文件 运行main方法，服务搭建就OK啦</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">  @SpringBootApplication</div><div class=\"line\">public class MainApp extends WebMvcConfigurerAdapter &#123;</div><div class=\"line\"></div><div class=\"line\">    //第一种</div><div class=\"line\">    //1 cd  当前项目根目录下</div><div class=\"line\">    //1 mvn spring-boot:run</div><div class=\"line\"></div><div class=\"line\">    //第二种</div><div class=\"line\">    //2 cd  当前项目根目录下</div><div class=\"line\">    //2. mvn install</div><div class=\"line\">    //2.  cd target/</div><div class=\"line\">    //2. java -jar cici-log.jar</div><div class=\"line\"></div><div class=\"line\">    //第三种</div><div class=\"line\">    //直接运行main方法</div><div class=\"line\"></div><div class=\"line\">    //启动时候选择配置文件启动</div><div class=\"line\">    //3 application.yml application-dev.yml application-pro.yml</div><div class=\"line\">    //3. mvn install</div><div class=\"line\">    //3.  cd target/</div><div class=\"line\">    //3. java -jar cici-log.jar -spring.profies.active=pro</div><div class=\"line\"></div><div class=\"line\">    //后台启动</div><div class=\"line\">    /**</div><div class=\"line\">     *  nohup java -jar cici-log.jar &amp;</div><div class=\"line\">     *  nohup java -jar cici-log.jar  /dev/null 2&gt;&amp;1 &amp;</div><div class=\"line\">     *</div><div class=\"line\">     * */</div><div class=\"line\">    public static void main(String[] args)&#123;</div><div class=\"line\">        SpringApplication.run(MainApplation.class,args);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2-RestAPI创建\"><a href=\"#2-RestAPI创建\" class=\"headerlink\" title=\"2.RestAPI创建\"></a>2.RestAPI创建</h3><p>   创建服务接口包括post/put/get/delete<br>   创建 SysUserController.java<br>   添加注解</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">@RestController</div><div class=\"line\">@RequestMapping(&quot;/api/sysUser&quot;)</div></pre></td></tr></table></figure>\n<p>   完整服务接口代码</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">@RestController</div><div class=\"line\">@RequestMapping(&quot;/api/sysUser&quot;)</div><div class=\"line\">public class SysUserController &#123;</div><div class=\"line\"></div><div class=\"line\">    @GetMapping(value = &quot;list&quot;)</div><div class=\"line\">    public List&lt;CatUser&gt; catalog()&#123;</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //获取数据</div><div class=\"line\">    @GetMapping(value = &quot;update/&#123;id&#125;&quot;)</div><div class=\"line\">    public CatUser get(@PathVariable(&quot;id&quot;)String id)&#123;</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //新增</div><div class=\"line\">    @PostMapping(value = &quot;update&quot;)</div><div class=\"line\">    public Object add(@RequestBody Object c)&#123;</div><div class=\"line\"></div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //更新</div><div class=\"line\">    @PutMapping(value = &quot;update&quot;)</div><div class=\"line\">    public CatUser update(@RequestBody CatUser c)&#123;</div><div class=\"line\"></div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //删除</div><div class=\"line\">    @DeleteMapping(value = &quot;update/&#123;id&#125;&quot;)</div><div class=\"line\">    public void add(@PathVariable(&quot;id&quot;)String id)&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-数据层-服务层实现（事务，链接池）\"><a href=\"#3-数据层-服务层实现（事务，链接池）\" class=\"headerlink\" title=\"3. 数据层/服务层实现（事务，链接池）\"></a>3. 数据层/服务层实现（事务，链接池）</h3><p>  当我们接口服务创建完成后开始创建服务层数据层代码</p>\n<h4 id=\"1-配置文件-spring-boot-推荐使用-yml-配置，此方法少去很多冗余字段\"><a href=\"#1-配置文件-spring-boot-推荐使用-yml-配置，此方法少去很多冗余字段\" class=\"headerlink\" title=\"1. 配置文件 spring boot 推荐使用.yml 配置，此方法少去很多冗余字段\"></a>1. 配置文件 spring boot 推荐使用.yml 配置，此方法少去很多冗余字段</h4><h4 id=\"2-我们创建-application-yml\"><a href=\"#2-我们创建-application-yml\" class=\"headerlink\" title=\"2. 我们创建 application.yml\"></a>2. 我们创建 application.yml</h4> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">spring:</div><div class=\"line\">  profiles:</div><div class=\"line\">    active: dev</div><div class=\"line\">  jpa:</div><div class=\"line\">     hibernate:</div><div class=\"line\">       ddl-auto: none</div><div class=\"line\">     show-sql: true</div></pre></td></tr></table></figure>\n<ul>\n<li>spring.profiles.active: dev 读取配置文件为 application-dev.yml 的配置文件,目前用于测试环境和生   产环境配置分类 </li>\n<li><p>jpa.hibernate.ddl-auto:  会根据绑定的实体(@Entity)生成 ,建议使用 none</p>\n<pre><code>+ validate   加载hibernate时，验证创建数据库表结构\n+ create      每次加载hibernate，重新创建数据库表结构，这就是导致数据库表数据丢失的原因。\n+ create-drop  加载hibernate时创建，退出是删除表结构\n+ update        加载hibernate自动更新数据库结构\n</code></pre></li>\n<li>jpa.hibernate.show-sql: true 显示sql </li>\n</ul>\n<h4 id=\"3-创建数据库配置-application-dev-yml\"><a href=\"#3-创建数据库配置-application-dev-yml\" class=\"headerlink\" title=\"3. 创建数据库配置 application-dev.yml\"></a>3. 创建数据库配置 application-dev.yml</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">server:</div><div class=\"line\">    port: 7777</div><div class=\"line\">spring:</div><div class=\"line\">  datasource:</div><div class=\"line\">      driver-class-name: oracle.jdbc.driver.OracleDriver</div><div class=\"line\">      url: jdbc:oracle:thin:@172.25.13.98:1521:data98</div><div class=\"line\">      username: HHZY_TEST</div><div class=\"line\">      password: HHZY_TEST</div><div class=\"line\">      type: com.alibaba.druid.pool.DruidDataSource</div><div class=\"line\">      spring.datasource.initialSize: 5</div><div class=\"line\">      spring.datasource.minIdle: 5</div><div class=\"line\">      spring.datasource.maxActive: 20</div><div class=\"line\">      spring.datasource.maxWait: 60000</div><div class=\"line\">      timeBetweenEvictionRunsMillis: 60000</div><div class=\"line\">      minEvictableIdleTimeMillis: 300000</div><div class=\"line\">      validationQuery: SELECT 1 FROM DUAL</div><div class=\"line\">      testWhileIdle: true</div><div class=\"line\">      testOnBorrow: false</div><div class=\"line\">      testOnReturn: false</div><div class=\"line\">      poolPreparedStatements: true</div><div class=\"line\">      maxPoolPreparedStatementPerConnectionSize: 20</div><div class=\"line\">      filters: stat,wall,log4j</div><div class=\"line\">      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</div><div class=\"line\">      useGlobalDataSourceStat: true</div><div class=\"line\">logging.level.root: DEBUG</div><div class=\"line\">logging.level.org.springframework.web: DEBUG</div><div class=\"line\">logging.level.org.hibernate: DEBUG</div></pre></td></tr></table></figure>\n<ul>\n<li>server.port: 7777 为当前服务端口</li>\n</ul>\n<ul>\n<li>spring.datasource 数据库连接配置当前使用连接池的是 <a href=\"https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8\">DruidDataSource</a><ul>\n<li>创建 druid 访问<a href=\"http://localhost:7777/druid/index.html\">http://localhost:7777/druid/index.html</a></li>\n</ul>\n</li>\n</ul>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">@SuppressWarnings(&quot;serial&quot;)</div><div class=\"line\">@WebServlet(urlPatterns = &quot;/druid/*&quot;,  initParams = &#123;</div><div class=\"line\">                @WebInitParam(name = &quot;allow&quot;, value = &quot;127.0.0.1&quot;),// IP白名单 (没有配置或者为空，则允许所有访问)</div><div class=\"line\">                @WebInitParam(name = &quot;deny&quot;, value = &quot;192.168.16.111&quot;),// IP黑名单 (存在共同时，deny优先于allow)</div><div class=\"line\">                @WebInitParam(name = &quot;loginUsername&quot;, value = &quot;zc&quot;),// 用户名</div><div class=\"line\">                @WebInitParam(name = &quot;loginPassword&quot;, value = &quot;zc&quot;),// 密码</div><div class=\"line\">                @WebInitParam(name = &quot;resetEnable&quot;, value = &quot;false&quot;)// 禁用HTML页面上的“Reset All”功能</div><div class=\"line\">        &#125;)</div><div class=\"line\">public class DruidStatViewServlet extends StatViewServlet &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>创建druid 过滤器</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">   </div><div class=\"line\">   @WebFilter(filterName = &quot;druidWebStatFilter&quot;, urlPatterns = &quot;/*&quot;,</div><div class=\"line\">        initParams = &#123;</div><div class=\"line\">                @WebInitParam(name = &quot;exclusions&quot;, value = &quot;*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*&quot;)// 忽略资源</div><div class=\"line\">        &#125;)</div><div class=\"line\">public class DruidStatFilter extends WebStatFilter &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-创建数据模型\"><a href=\"#4-创建数据模型\" class=\"headerlink\" title=\"4. 创建数据模型\"></a>4. 创建数据模型</h4><p>   创建实体类添加数据注解（@Entity）<br>   SysUser.java<br>   非完整代码</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@Entity</div><div class=\"line\">public class SysUser extends BaseDomain &#123;</div><div class=\"line\"></div><div class=\"line\">   private String id;</div><div class=\"line\">   ...</div><div class=\"line\">   ...</div></pre></td></tr></table></figure>\n<h4 id=\"5-创建服务层-事务，单表更新级查询-及数据访问层\"><a href=\"#5-创建服务层-事务，单表更新级查询-及数据访问层\" class=\"headerlink\" title=\"5. 创建服务层(事务，单表更新级查询)及数据访问层\"></a>5. 创建服务层(事务，单表更新级查询)及数据访问层</h4><p>   创建数据库层接口 SysUserRepository.java 继承 JpaRepository<SysUser(当前对象),String(当前对象主键ID)>  </p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">   </div><div class=\"line\">public interface SysUserRepository  extends JpaRepository&lt;SysUser,String&gt; &#123; &#125;</div></pre></td></tr></table></figure>\n<p>   创建服务层类 SysUserService.java (新增修改删除查询，不用写sql)</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">   @Service</div><div class=\"line\">public class SysUserService &#123;</div><div class=\"line\"></div><div class=\"line\">    private final Logger logger = LoggerFactory.getLogger(this.getClass());</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    @Autowired</div><div class=\"line\">    private SysUserRepository sysUserRepository;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public List&lt;SysUser&gt; findAll() &#123;</div><div class=\"line\">        return sysUserRepository.findAll();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public SysUser update(SysUser sysUser) &#123;</div><div class=\"line\"></div><div class=\"line\">        if (StringUtils.isEmpty(sysUser.getId())) &#123;</div><div class=\"line\">            sysUser.setId(&quot;ID存在更新,否则新增&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        logger.debug(&quot;新增了用户&quot;);</div><div class=\"line\">        return sysUserRepository.saveAndFlush(sysUser);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public void delete(String id) &#123;</div><div class=\"line\">        logger.debug(&quot;删除了用户&quot;);</div><div class=\"line\">         sysUserRepository.delete(id);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public SysUser findOne(String id) &#123;</div><div class=\"line\">        return sysUserRepository.findOne(id);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"6-控制层调用\"><a href=\"#6-控制层调用\" class=\"headerlink\" title=\"6. 控制层调用\"></a>6. 控制层调用</h4><p>  创建SysUserController.java </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\">//系统用户管理</div><div class=\"line\">@RestController</div><div class=\"line\">@RequestMapping(&quot;/api/sysUser&quot;)</div><div class=\"line\">public class SysUserController &#123;</div><div class=\"line\"></div><div class=\"line\">    @Autowired</div><div class=\"line\">    SysUserService sysUserService;</div><div class=\"line\"></div><div class=\"line\">    @GetMapping(value = &quot;list&quot;)</div><div class=\"line\">    public List&lt;SysUser&gt; list()&#123;</div><div class=\"line\">        return sysUserService.findAll();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //获取数据</div><div class=\"line\">    @GetMapping(value = &quot;update/&#123;id&#125;&quot;)</div><div class=\"line\">    public SysUser get(@PathVariable(&quot;id&quot;)String id)&#123;</div><div class=\"line\">        return sysUserService.findOne(id);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //新增</div><div class=\"line\">    @PostMapping(value = &quot;update&quot;)</div><div class=\"line\">    public Object add(@RequestBody SysUser c)&#123;</div><div class=\"line\">        return sysUserService.update(c);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //更新</div><div class=\"line\">    @PutMapping(value = &quot;update&quot;)</div><div class=\"line\">    public SysUser update(@RequestBody SysUser c)&#123;</div><div class=\"line\">        return sysUserService.update(c);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //删除</div><div class=\"line\">    @DeleteMapping(value = &quot;update/&#123;id&#125;&quot;)</div><div class=\"line\">    public void add(@PathVariable(&quot;id&quot;)String id)&#123;</div><div class=\"line\">        sysUserService.delete(id);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  到目前为止，我们实现了对单表的增删改查所有操作，没有写一句sql，下面我们将添加复杂sql查询，以及最终版本入门框架搭建</p>\n<h3 id=\"后续会介绍整体架构，可以应用于项目开发\"><a href=\"#后续会介绍整体架构，可以应用于项目开发\" class=\"headerlink\" title=\"后续会介绍整体架构，可以应用于项目开发\"></a>后续会介绍整体架构，可以应用于项目开发</h3><hr>\n<h4 id=\"项目源码-github源码地址-1\"><a href=\"#项目源码-github源码地址-1\" class=\"headerlink\" title=\"项目源码:github源码地址\"></a>项目源码:<a href=\"https://github.com/zccccccc/cici\">github源码地址</a></h4><hr>\n"},{"title":"设计模式单件模式-不解释","date":"2017-03-10T09:07:35.000Z","layout":"clean-blog","slug":"设计模式单件模式-不解释","_content":"\n### 单件模式(确保一个类只有一个实例,并提供一个全局访问点),最简单: 使用枚举(enum)\n\n\n```\n\n\n/**\n * 单件模式(确保一个类只有一个实例,并提供一个全局访问点),最简单: 使用枚举(enum)\n */\npublic class   SingletonPattern {\n\n\n    public static void main(String[] args){\n        System.out.println( EnumSingletonPattern.INSTANCE.methodB());\n        System.out.println( EnumSingletonPattern.INSTANCE.methodA());\n\n    }\n\n\n}\n\n/**\n * 强烈推荐使用枚举,非常食用...食用\n * 线程安全、防反射攻击、防止序列化生成新的实例\n * */\nenum EnumSingletonPattern{\n\n    INSTANCE{\n        @Override\n        protected String methodA() {\n            return \"methodA\";\n        }\n    };\n\n    public String methodB(){\n        return \"methodB\";\n    }\n\n    protected abstract String methodA();\n\n}\n\n\n/**\n * 最简单的单件模式\n * */\nclass SimpleSingletonPattern{\n\n    //饿\n    private static SimpleSingletonPattern uniqueInstance = new SimpleSingletonPattern();\n\n    //懒\n    private static SimpleSingletonPattern uniqueInstance2 =null;\n\n    //枚举实现\n    private static enum Singleton{\n        INSTANCE;\n\n        private SimpleSingletonPattern simpleSingletonPattern;\n        private Singleton(){\n            simpleSingletonPattern = new SimpleSingletonPattern();\n        }\n\n        public SimpleSingletonPattern getInstance(){\n            return simpleSingletonPattern;\n        }\n    }\n\n\n    private SimpleSingletonPattern(){}\n\n    public static SimpleSingletonPattern getInstance(){\n\n        //懒\n        //uniqueInstance2 = new SimpleSingletonPattern();\n\n        //枚举\n       // Singleton.INSTANCE.getInstance();\n\n        //饿\n        return uniqueInstance;\n    }\n\n}\n\n/**\n * 双重检查加锁\n * jdk版本 >= 5\n * */\nclass DoubleCheckedSingletonPattern{\n\n    //懒\n    //volatile 内存共享,多线程访问\n    private volatile static DoubleCheckedSingletonPattern uniqueInstance;\n\n\n    private DoubleCheckedSingletonPattern(){}\n\n    public static DoubleCheckedSingletonPattern getInstance(){\n\n        if(uniqueInstance == null){\n            synchronized (DoubleCheckedSingletonPattern.class){\n                if(uniqueInstance == null){\n                    uniqueInstance = new DoubleCheckedSingletonPattern();\n                }\n            }\n        }\n\n        return uniqueInstance;\n    }\n\n}\n\n\n```","source":"_posts/设计模式单件模式-不解释.md","raw":"---\ntitle: 设计模式单件模式-不解释\ndate: 2017-03-10 17:07:35\ntags: 设计模式\nlayout: clean-blog\nslug: SingletonPattern\n\n---\n\n### 单件模式(确保一个类只有一个实例,并提供一个全局访问点),最简单: 使用枚举(enum)\n\n\n```\n\n\n/**\n * 单件模式(确保一个类只有一个实例,并提供一个全局访问点),最简单: 使用枚举(enum)\n */\npublic class   SingletonPattern {\n\n\n    public static void main(String[] args){\n        System.out.println( EnumSingletonPattern.INSTANCE.methodB());\n        System.out.println( EnumSingletonPattern.INSTANCE.methodA());\n\n    }\n\n\n}\n\n/**\n * 强烈推荐使用枚举,非常食用...食用\n * 线程安全、防反射攻击、防止序列化生成新的实例\n * */\nenum EnumSingletonPattern{\n\n    INSTANCE{\n        @Override\n        protected String methodA() {\n            return \"methodA\";\n        }\n    };\n\n    public String methodB(){\n        return \"methodB\";\n    }\n\n    protected abstract String methodA();\n\n}\n\n\n/**\n * 最简单的单件模式\n * */\nclass SimpleSingletonPattern{\n\n    //饿\n    private static SimpleSingletonPattern uniqueInstance = new SimpleSingletonPattern();\n\n    //懒\n    private static SimpleSingletonPattern uniqueInstance2 =null;\n\n    //枚举实现\n    private static enum Singleton{\n        INSTANCE;\n\n        private SimpleSingletonPattern simpleSingletonPattern;\n        private Singleton(){\n            simpleSingletonPattern = new SimpleSingletonPattern();\n        }\n\n        public SimpleSingletonPattern getInstance(){\n            return simpleSingletonPattern;\n        }\n    }\n\n\n    private SimpleSingletonPattern(){}\n\n    public static SimpleSingletonPattern getInstance(){\n\n        //懒\n        //uniqueInstance2 = new SimpleSingletonPattern();\n\n        //枚举\n       // Singleton.INSTANCE.getInstance();\n\n        //饿\n        return uniqueInstance;\n    }\n\n}\n\n/**\n * 双重检查加锁\n * jdk版本 >= 5\n * */\nclass DoubleCheckedSingletonPattern{\n\n    //懒\n    //volatile 内存共享,多线程访问\n    private volatile static DoubleCheckedSingletonPattern uniqueInstance;\n\n\n    private DoubleCheckedSingletonPattern(){}\n\n    public static DoubleCheckedSingletonPattern getInstance(){\n\n        if(uniqueInstance == null){\n            synchronized (DoubleCheckedSingletonPattern.class){\n                if(uniqueInstance == null){\n                    uniqueInstance = new DoubleCheckedSingletonPattern();\n                }\n            }\n        }\n\n        return uniqueInstance;\n    }\n\n}\n\n\n```","published":1,"updated":"2017-03-10T09:29:31.000Z","comments":1,"photos":[],"link":"","_id":"cj0uc8d0f000aey5r4l3skwg5","content":"<h3 id=\"单件模式-确保一个类只有一个实例-并提供一个全局访问点-最简单-使用枚举-enum\"><a href=\"#单件模式-确保一个类只有一个实例-并提供一个全局访问点-最简单-使用枚举-enum\" class=\"headerlink\" title=\"单件模式(确保一个类只有一个实例,并提供一个全局访问点),最简单: 使用枚举(enum)\"></a>单件模式(确保一个类只有一个实例,并提供一个全局访问点),最简单: 使用枚举(enum)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 单件模式(确保一个类只有一个实例,并提供一个全局访问点),最简单: 使用枚举(enum)</div><div class=\"line\"> */</div><div class=\"line\">public class   SingletonPattern &#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args)&#123;</div><div class=\"line\">        System.out.println( EnumSingletonPattern.INSTANCE.methodB());</div><div class=\"line\">        System.out.println( EnumSingletonPattern.INSTANCE.methodA());</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 强烈推荐使用枚举,非常食用...食用</div><div class=\"line\"> * 线程安全、防反射攻击、防止序列化生成新的实例</div><div class=\"line\"> * */</div><div class=\"line\">enum EnumSingletonPattern&#123;</div><div class=\"line\"></div><div class=\"line\">    INSTANCE&#123;</div><div class=\"line\">        @Override</div><div class=\"line\">        protected String methodA() &#123;</div><div class=\"line\">            return &quot;methodA&quot;;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    public String methodB()&#123;</div><div class=\"line\">        return &quot;methodB&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected abstract String methodA();</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 最简单的单件模式</div><div class=\"line\"> * */</div><div class=\"line\">class SimpleSingletonPattern&#123;</div><div class=\"line\"></div><div class=\"line\">    //饿</div><div class=\"line\">    private static SimpleSingletonPattern uniqueInstance = new SimpleSingletonPattern();</div><div class=\"line\"></div><div class=\"line\">    //懒</div><div class=\"line\">    private static SimpleSingletonPattern uniqueInstance2 =null;</div><div class=\"line\"></div><div class=\"line\">    //枚举实现</div><div class=\"line\">    private static enum Singleton&#123;</div><div class=\"line\">        INSTANCE;</div><div class=\"line\"></div><div class=\"line\">        private SimpleSingletonPattern simpleSingletonPattern;</div><div class=\"line\">        private Singleton()&#123;</div><div class=\"line\">            simpleSingletonPattern = new SimpleSingletonPattern();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public SimpleSingletonPattern getInstance()&#123;</div><div class=\"line\">            return simpleSingletonPattern;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    private SimpleSingletonPattern()&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    public static SimpleSingletonPattern getInstance()&#123;</div><div class=\"line\"></div><div class=\"line\">        //懒</div><div class=\"line\">        //uniqueInstance2 = new SimpleSingletonPattern();</div><div class=\"line\"></div><div class=\"line\">        //枚举</div><div class=\"line\">       // Singleton.INSTANCE.getInstance();</div><div class=\"line\"></div><div class=\"line\">        //饿</div><div class=\"line\">        return uniqueInstance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 双重检查加锁</div><div class=\"line\"> * jdk版本 &gt;= 5</div><div class=\"line\"> * */</div><div class=\"line\">class DoubleCheckedSingletonPattern&#123;</div><div class=\"line\"></div><div class=\"line\">    //懒</div><div class=\"line\">    //volatile 内存共享,多线程访问</div><div class=\"line\">    private volatile static DoubleCheckedSingletonPattern uniqueInstance;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    private DoubleCheckedSingletonPattern()&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    public static DoubleCheckedSingletonPattern getInstance()&#123;</div><div class=\"line\"></div><div class=\"line\">        if(uniqueInstance == null)&#123;</div><div class=\"line\">            synchronized (DoubleCheckedSingletonPattern.class)&#123;</div><div class=\"line\">                if(uniqueInstance == null)&#123;</div><div class=\"line\">                    uniqueInstance = new DoubleCheckedSingletonPattern();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        return uniqueInstance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h3 id=\"单件模式-确保一个类只有一个实例-并提供一个全局访问点-最简单-使用枚举-enum\"><a href=\"#单件模式-确保一个类只有一个实例-并提供一个全局访问点-最简单-使用枚举-enum\" class=\"headerlink\" title=\"单件模式(确保一个类只有一个实例,并提供一个全局访问点),最简单: 使用枚举(enum)\"></a>单件模式(确保一个类只有一个实例,并提供一个全局访问点),最简单: 使用枚举(enum)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 单件模式(确保一个类只有一个实例,并提供一个全局访问点),最简单: 使用枚举(enum)</div><div class=\"line\"> */</div><div class=\"line\">public class   SingletonPattern &#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args)&#123;</div><div class=\"line\">        System.out.println( EnumSingletonPattern.INSTANCE.methodB());</div><div class=\"line\">        System.out.println( EnumSingletonPattern.INSTANCE.methodA());</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 强烈推荐使用枚举,非常食用...食用</div><div class=\"line\"> * 线程安全、防反射攻击、防止序列化生成新的实例</div><div class=\"line\"> * */</div><div class=\"line\">enum EnumSingletonPattern&#123;</div><div class=\"line\"></div><div class=\"line\">    INSTANCE&#123;</div><div class=\"line\">        @Override</div><div class=\"line\">        protected String methodA() &#123;</div><div class=\"line\">            return &quot;methodA&quot;;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    public String methodB()&#123;</div><div class=\"line\">        return &quot;methodB&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected abstract String methodA();</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 最简单的单件模式</div><div class=\"line\"> * */</div><div class=\"line\">class SimpleSingletonPattern&#123;</div><div class=\"line\"></div><div class=\"line\">    //饿</div><div class=\"line\">    private static SimpleSingletonPattern uniqueInstance = new SimpleSingletonPattern();</div><div class=\"line\"></div><div class=\"line\">    //懒</div><div class=\"line\">    private static SimpleSingletonPattern uniqueInstance2 =null;</div><div class=\"line\"></div><div class=\"line\">    //枚举实现</div><div class=\"line\">    private static enum Singleton&#123;</div><div class=\"line\">        INSTANCE;</div><div class=\"line\"></div><div class=\"line\">        private SimpleSingletonPattern simpleSingletonPattern;</div><div class=\"line\">        private Singleton()&#123;</div><div class=\"line\">            simpleSingletonPattern = new SimpleSingletonPattern();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public SimpleSingletonPattern getInstance()&#123;</div><div class=\"line\">            return simpleSingletonPattern;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    private SimpleSingletonPattern()&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    public static SimpleSingletonPattern getInstance()&#123;</div><div class=\"line\"></div><div class=\"line\">        //懒</div><div class=\"line\">        //uniqueInstance2 = new SimpleSingletonPattern();</div><div class=\"line\"></div><div class=\"line\">        //枚举</div><div class=\"line\">       // Singleton.INSTANCE.getInstance();</div><div class=\"line\"></div><div class=\"line\">        //饿</div><div class=\"line\">        return uniqueInstance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 双重检查加锁</div><div class=\"line\"> * jdk版本 &gt;= 5</div><div class=\"line\"> * */</div><div class=\"line\">class DoubleCheckedSingletonPattern&#123;</div><div class=\"line\"></div><div class=\"line\">    //懒</div><div class=\"line\">    //volatile 内存共享,多线程访问</div><div class=\"line\">    private volatile static DoubleCheckedSingletonPattern uniqueInstance;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    private DoubleCheckedSingletonPattern()&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    public static DoubleCheckedSingletonPattern getInstance()&#123;</div><div class=\"line\"></div><div class=\"line\">        if(uniqueInstance == null)&#123;</div><div class=\"line\">            synchronized (DoubleCheckedSingletonPattern.class)&#123;</div><div class=\"line\">                if(uniqueInstance == null)&#123;</div><div class=\"line\">                    uniqueInstance = new DoubleCheckedSingletonPattern();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        return uniqueInstance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"设计模式命令模式-不解释","date":"2017-03-10T09:16:35.000Z","layout":"clean-blog","slug":"设计模式命令模式-不解释","_content":"\n\n###  命令模式 (当需要将发出请求的对象和执行请求的对象解耦合的时候使用命令模式)\n\n```\n\n/**\n * 命令模式 (当需要将发出请求的对象和执行请求的对象解耦合的时候使用命令模式)\n * ` 将请求封装成对象,这可以让你使不同的请求,队列,或者日志来参数化其他对象,\n * 命令模式也可以支持撤销操作 `\n * 要点:\n * 1.命令模式将发出请求的对象和执行请求对象解耦\n * 2.在被解耦的两者之间是通过命令对象进行沟通的,命令对象封装了接受者和一个或一组动作\n * 3.调用者通过调用命令对象的 execute() 发出请求,这会使得接受者的动作被调用\n * 4.调用者可以接受命令当作参数,甚至在运行时动态地执行\n * 5.名利可以支持撤销,做法是实现一个undo()方法来回到execute()被执行前的状态\n * 6.宏命令是命令的一种简单延伸,允许调用多个命令,同时支持撤销\n * 7.命令也可以来实现日志和事务系统\n *\n * 提供简单版本和复杂版本\n *\n * 场景描述:\n *  英雄 超人 和蜘蛛侠\n *  每个人的技能都不相同,统一交给按钮控制(命令模式将发出请求的对象和执行请求对象解耦)\n *  英雄 和 控制器调用之间 完全解耦\n *\n */\npublic class CommandPattern {\n\n\n    public static void main(String[] args){\n\n\n        //简单版本实现\n        SimpleRemoteDemo();\n\n        //复杂模式\n        ComplexRemoteDemo();\n\n    }\n\n    //简单版本实现\n    static void SimpleRemoteDemo(){\n        SimpleRemoteControl remote = new SimpleRemoteControl();\n        Light light = new Light();\n        LightOnCommand lightOnCommand = new LightOnCommand(light);\n        remote.setCommand(lightOnCommand);\n        remote.buttonWasPressed();\n        remote.undoButtonWasPressed();\n    }\n\n    //复杂模式\n    static void ComplexRemoteDemo(){\n\n        //初始化控制器 传入控制英雄数量\n        RemoteControl remoteControl = new RemoteControl(3);\n\n        //创建两个英雄\n         HeroSuperman heroSuperman = new HeroSuperman(\"超人\");\n\n        //创建命令\n         HeroSupermanCommand heroSupermanCommand = new HeroSupermanCommand(heroSuperman);\n\n        //将对象放到插槽中\n        remoteControl.setCommand(0,heroSupermanCommand);\n        remoteControl.setCommand(1,new HeroSpiderManCommand(new HeroSpiderMan(\"蜘蛛侠\")));\n\n\n        //点下按钮一\n        remoteControl.buttonWasPressed(0);\n        //撤销\n        remoteControl.undoButtonWasPressed();\n        //点下按钮2\n        remoteControl.buttonWasPressed(1);\n        remoteControl.undoButtonWasPressed();\n\n        //在实现按下一个按钮把上述全部执行\n\n        Command[] commands = {heroSupermanCommand,new HeroSpiderManCommand(new HeroSpiderMan(\"蜘蛛侠\"))};\n        MacroCommand macroCommand = new MacroCommand(commands);\n        //将对象放到插槽中\n\n        System.out.println(\"----------------多重控制------------------------\");\n\n        remoteControl.setCommand(2,macroCommand);\n        System.out.println(\"----------------多重控制 开始攻击------------------------\");\n        remoteControl.buttonWasPressed(2);\n        System.out.println(\"----------------多重控制 开始撤回------------------------\");\n        remoteControl.undoButtonWasPressed();\n\n    }\n\n}\n\n\n\n\n/***Simple Demo BEN************************************************************************************/\n/**\n * 命令基类\n * 让所有命令对象实现相同的包含一个方法的接口\n * **/\ninterface Command{\n    void execute();\n    void undo();\n}\n\n\n/**\n * 控制器 总控\n * 请求的对象\n * 调用者可以接受命令当作参数,甚至在运行时动态地执行\n * **/\nclass SimpleRemoteControl{\n\n    Command slot;\n\n    public SimpleRemoteControl(){}\n\n    public void setCommand(Command command){\n        this.slot = command;\n    }\n\n    public void buttonWasPressed(){\n        slot.execute();\n    }\n\n    public void undoButtonWasPressed(){\n        slot.undo();\n    }\n}\n\n\n/**\n * 某一种产品\n * 具体实现\n * 执行请求对象\n * */\nclass Light{\n    public void on(){\n        System.out.println(\"灯量了\");\n    }\n    public void off(){\n        System.out.println(\"灯熄灭了\");\n    }\n}\n\n/**\n * 某一种产品的某一种执行方法\n * 创建命令\n * 命令对象封装了接受者和一个或一组动作\n * */\nclass LightOnCommand implements Command{\n\n    Light light;\n    public LightOnCommand(Light light){\n        this.light = light;\n    }\n\n    @Override\n    public void execute() {\n        light.on();\n    }\n\n    @Override\n    public void undo() {\n        light.off();\n    }\n}\n/***Simple Demo   END************************************************************************************/\n\n\n\n\n/***Complex Demo   BEN************************************************************************************/\n\nclass NoCommand implements Command{\n    @Override\n    public void execute() {\n\n    }\n\n    @Override\n    public void undo() {\n\n    }\n}\n\n/**\n * 英雄超人\n * */\nclass HeroSuperman{\n\n    private String name;\n\n    public HeroSuperman(String name){\n        this.name=name;\n    }\n\n    /**\n     * 攻击A\n     * */\n    public void attackA(){\n        System.out.println(name+\"send......>>>>>> attackA\");\n    }\n\n    /**\n     * 攻击B\n     * */\n    public void attackB(){\n        System.out.println(name+\"send......>>>>>> attackB\");\n    }\n\n    /**\n     * 撤销攻击\n     * */\n    public void attackUndo(){\n        System.out.println(name+\"undo......>>>>>> attackB\");\n    }\n}\n/**\n * 英雄蜘蛛侠\n * */\nclass HeroSpiderMan{\n\n\n    private String name;\n\n    public HeroSpiderMan(String name){\n        this.name=name;\n    }\n\n\n    /**\n     * 攻击A\n     * */\n    public void attackC(){\n        System.out.println(name+\"send......>>>>>> attackC\");\n    }\n\n    /**\n     * 攻击B\n     * */\n    public void attackD(){\n        System.out.println(name+\"send......>>>>>> attackD\");\n    }\n    /**\n     * 攻击B\n     * */\n    public void attackE(){\n        System.out.println(name+\"send......>>>>>> attackE\");\n    }\n    /**\n     * 撤销攻击\n     * */\n    public void attackUndoA(){\n        System.out.println(name+\"undo......>>>>>> attackA-B-C-D\");\n    }\n\n\n}\n\n/***\n * 创建英雄超人攻击命令\n * */\nclass HeroSupermanCommand implements Command{\n\n    private HeroSuperman heroSuperman;\n\n    public HeroSupermanCommand(HeroSuperman heroSuperman) {\n        this.heroSuperman = heroSuperman;\n    }\n\n    @Override\n    public void undo() {\n        heroSuperman.attackUndo();\n    }\n\n    @Override\n    public void execute() {\n        heroSuperman.attackA();\n        heroSuperman.attackB();\n    }\n}\n\n/***\n * 创建英雄蜘蛛侠攻击命令\n * */\nclass HeroSpiderManCommand implements Command{\n\n    private HeroSpiderMan heroSpiderMan;\n\n    public HeroSpiderManCommand(HeroSpiderMan heroSpiderMan) {\n        this.heroSpiderMan=heroSpiderMan;\n    }\n\n    @Override\n    public void undo() {\n        heroSpiderMan.attackUndoA();\n    }\n\n    @Override\n    public void execute() {\n        heroSpiderMan.attackC();\n        heroSpiderMan.attackD();\n    }\n}\n\nclass MacroCommand implements Command{\n\n    private Command[] commands;\n\n    public MacroCommand(Command[] commands){\n        this.commands = commands;\n    }\n\n    @Override\n    public void execute() {\n        for(Command c : commands){\n            c.execute();\n        }\n    }\n\n    @Override\n    public void undo() {\n        for(Command c : commands){\n            c.undo();\n        }\n    }\n}\n\n\n\n/**\n * 控制器 总控\n * 请求的对象\n * 调用者可以接受命令当作参数,甚至在运行时动态地执行\n * **/\nclass RemoteControl{\n\n    private Command[] buttonCommand;\n\n    //撤销命令\n    private Command undoCommand;\n\n    public RemoteControl(int slot){\n\n        buttonCommand  = new Command[slot];\n        NoCommand noCommand = new NoCommand();\n        for(int i=0;i<slot;i++){\n            //避免出现null异常\n            buttonCommand[i] =noCommand;\n        }\n    }\n\n    public void setCommand(int slot,Command command){\n        buttonCommand[slot]=command;\n\n    }\n\n    //按钮按下事件\n    public void buttonWasPressed(int slot){\n        buttonCommand[slot].execute();\n        undoCommand= buttonCommand[slot];\n    }\n\n    //取消事件\n    public void undoButtonWasPressed(){\n        undoCommand.undo();\n    }\n}\n\n\n\n/***Complex Demo   END************************************************************************************/\n\n\n```\n","source":"_posts/设计模式命令模式-不解释.md","raw":"---\ntitle: 设计模式命令模式-不解释\ndate: 2017-03-10 17:16:35\ntags: 设计模式\nlayout: clean-blog\nslug: CommandPattern\n\n---\n\n\n###  命令模式 (当需要将发出请求的对象和执行请求的对象解耦合的时候使用命令模式)\n\n```\n\n/**\n * 命令模式 (当需要将发出请求的对象和执行请求的对象解耦合的时候使用命令模式)\n * ` 将请求封装成对象,这可以让你使不同的请求,队列,或者日志来参数化其他对象,\n * 命令模式也可以支持撤销操作 `\n * 要点:\n * 1.命令模式将发出请求的对象和执行请求对象解耦\n * 2.在被解耦的两者之间是通过命令对象进行沟通的,命令对象封装了接受者和一个或一组动作\n * 3.调用者通过调用命令对象的 execute() 发出请求,这会使得接受者的动作被调用\n * 4.调用者可以接受命令当作参数,甚至在运行时动态地执行\n * 5.名利可以支持撤销,做法是实现一个undo()方法来回到execute()被执行前的状态\n * 6.宏命令是命令的一种简单延伸,允许调用多个命令,同时支持撤销\n * 7.命令也可以来实现日志和事务系统\n *\n * 提供简单版本和复杂版本\n *\n * 场景描述:\n *  英雄 超人 和蜘蛛侠\n *  每个人的技能都不相同,统一交给按钮控制(命令模式将发出请求的对象和执行请求对象解耦)\n *  英雄 和 控制器调用之间 完全解耦\n *\n */\npublic class CommandPattern {\n\n\n    public static void main(String[] args){\n\n\n        //简单版本实现\n        SimpleRemoteDemo();\n\n        //复杂模式\n        ComplexRemoteDemo();\n\n    }\n\n    //简单版本实现\n    static void SimpleRemoteDemo(){\n        SimpleRemoteControl remote = new SimpleRemoteControl();\n        Light light = new Light();\n        LightOnCommand lightOnCommand = new LightOnCommand(light);\n        remote.setCommand(lightOnCommand);\n        remote.buttonWasPressed();\n        remote.undoButtonWasPressed();\n    }\n\n    //复杂模式\n    static void ComplexRemoteDemo(){\n\n        //初始化控制器 传入控制英雄数量\n        RemoteControl remoteControl = new RemoteControl(3);\n\n        //创建两个英雄\n         HeroSuperman heroSuperman = new HeroSuperman(\"超人\");\n\n        //创建命令\n         HeroSupermanCommand heroSupermanCommand = new HeroSupermanCommand(heroSuperman);\n\n        //将对象放到插槽中\n        remoteControl.setCommand(0,heroSupermanCommand);\n        remoteControl.setCommand(1,new HeroSpiderManCommand(new HeroSpiderMan(\"蜘蛛侠\")));\n\n\n        //点下按钮一\n        remoteControl.buttonWasPressed(0);\n        //撤销\n        remoteControl.undoButtonWasPressed();\n        //点下按钮2\n        remoteControl.buttonWasPressed(1);\n        remoteControl.undoButtonWasPressed();\n\n        //在实现按下一个按钮把上述全部执行\n\n        Command[] commands = {heroSupermanCommand,new HeroSpiderManCommand(new HeroSpiderMan(\"蜘蛛侠\"))};\n        MacroCommand macroCommand = new MacroCommand(commands);\n        //将对象放到插槽中\n\n        System.out.println(\"----------------多重控制------------------------\");\n\n        remoteControl.setCommand(2,macroCommand);\n        System.out.println(\"----------------多重控制 开始攻击------------------------\");\n        remoteControl.buttonWasPressed(2);\n        System.out.println(\"----------------多重控制 开始撤回------------------------\");\n        remoteControl.undoButtonWasPressed();\n\n    }\n\n}\n\n\n\n\n/***Simple Demo BEN************************************************************************************/\n/**\n * 命令基类\n * 让所有命令对象实现相同的包含一个方法的接口\n * **/\ninterface Command{\n    void execute();\n    void undo();\n}\n\n\n/**\n * 控制器 总控\n * 请求的对象\n * 调用者可以接受命令当作参数,甚至在运行时动态地执行\n * **/\nclass SimpleRemoteControl{\n\n    Command slot;\n\n    public SimpleRemoteControl(){}\n\n    public void setCommand(Command command){\n        this.slot = command;\n    }\n\n    public void buttonWasPressed(){\n        slot.execute();\n    }\n\n    public void undoButtonWasPressed(){\n        slot.undo();\n    }\n}\n\n\n/**\n * 某一种产品\n * 具体实现\n * 执行请求对象\n * */\nclass Light{\n    public void on(){\n        System.out.println(\"灯量了\");\n    }\n    public void off(){\n        System.out.println(\"灯熄灭了\");\n    }\n}\n\n/**\n * 某一种产品的某一种执行方法\n * 创建命令\n * 命令对象封装了接受者和一个或一组动作\n * */\nclass LightOnCommand implements Command{\n\n    Light light;\n    public LightOnCommand(Light light){\n        this.light = light;\n    }\n\n    @Override\n    public void execute() {\n        light.on();\n    }\n\n    @Override\n    public void undo() {\n        light.off();\n    }\n}\n/***Simple Demo   END************************************************************************************/\n\n\n\n\n/***Complex Demo   BEN************************************************************************************/\n\nclass NoCommand implements Command{\n    @Override\n    public void execute() {\n\n    }\n\n    @Override\n    public void undo() {\n\n    }\n}\n\n/**\n * 英雄超人\n * */\nclass HeroSuperman{\n\n    private String name;\n\n    public HeroSuperman(String name){\n        this.name=name;\n    }\n\n    /**\n     * 攻击A\n     * */\n    public void attackA(){\n        System.out.println(name+\"send......>>>>>> attackA\");\n    }\n\n    /**\n     * 攻击B\n     * */\n    public void attackB(){\n        System.out.println(name+\"send......>>>>>> attackB\");\n    }\n\n    /**\n     * 撤销攻击\n     * */\n    public void attackUndo(){\n        System.out.println(name+\"undo......>>>>>> attackB\");\n    }\n}\n/**\n * 英雄蜘蛛侠\n * */\nclass HeroSpiderMan{\n\n\n    private String name;\n\n    public HeroSpiderMan(String name){\n        this.name=name;\n    }\n\n\n    /**\n     * 攻击A\n     * */\n    public void attackC(){\n        System.out.println(name+\"send......>>>>>> attackC\");\n    }\n\n    /**\n     * 攻击B\n     * */\n    public void attackD(){\n        System.out.println(name+\"send......>>>>>> attackD\");\n    }\n    /**\n     * 攻击B\n     * */\n    public void attackE(){\n        System.out.println(name+\"send......>>>>>> attackE\");\n    }\n    /**\n     * 撤销攻击\n     * */\n    public void attackUndoA(){\n        System.out.println(name+\"undo......>>>>>> attackA-B-C-D\");\n    }\n\n\n}\n\n/***\n * 创建英雄超人攻击命令\n * */\nclass HeroSupermanCommand implements Command{\n\n    private HeroSuperman heroSuperman;\n\n    public HeroSupermanCommand(HeroSuperman heroSuperman) {\n        this.heroSuperman = heroSuperman;\n    }\n\n    @Override\n    public void undo() {\n        heroSuperman.attackUndo();\n    }\n\n    @Override\n    public void execute() {\n        heroSuperman.attackA();\n        heroSuperman.attackB();\n    }\n}\n\n/***\n * 创建英雄蜘蛛侠攻击命令\n * */\nclass HeroSpiderManCommand implements Command{\n\n    private HeroSpiderMan heroSpiderMan;\n\n    public HeroSpiderManCommand(HeroSpiderMan heroSpiderMan) {\n        this.heroSpiderMan=heroSpiderMan;\n    }\n\n    @Override\n    public void undo() {\n        heroSpiderMan.attackUndoA();\n    }\n\n    @Override\n    public void execute() {\n        heroSpiderMan.attackC();\n        heroSpiderMan.attackD();\n    }\n}\n\nclass MacroCommand implements Command{\n\n    private Command[] commands;\n\n    public MacroCommand(Command[] commands){\n        this.commands = commands;\n    }\n\n    @Override\n    public void execute() {\n        for(Command c : commands){\n            c.execute();\n        }\n    }\n\n    @Override\n    public void undo() {\n        for(Command c : commands){\n            c.undo();\n        }\n    }\n}\n\n\n\n/**\n * 控制器 总控\n * 请求的对象\n * 调用者可以接受命令当作参数,甚至在运行时动态地执行\n * **/\nclass RemoteControl{\n\n    private Command[] buttonCommand;\n\n    //撤销命令\n    private Command undoCommand;\n\n    public RemoteControl(int slot){\n\n        buttonCommand  = new Command[slot];\n        NoCommand noCommand = new NoCommand();\n        for(int i=0;i<slot;i++){\n            //避免出现null异常\n            buttonCommand[i] =noCommand;\n        }\n    }\n\n    public void setCommand(int slot,Command command){\n        buttonCommand[slot]=command;\n\n    }\n\n    //按钮按下事件\n    public void buttonWasPressed(int slot){\n        buttonCommand[slot].execute();\n        undoCommand= buttonCommand[slot];\n    }\n\n    //取消事件\n    public void undoButtonWasPressed(){\n        undoCommand.undo();\n    }\n}\n\n\n\n/***Complex Demo   END************************************************************************************/\n\n\n```\n","published":1,"updated":"2017-03-10T09:29:29.000Z","comments":1,"photos":[],"link":"","_id":"cj0uc8d0h000dey5rwibu3gen","content":"<h3 id=\"命令模式-当需要将发出请求的对象和执行请求的对象解耦合的时候使用命令模式\"><a href=\"#命令模式-当需要将发出请求的对象和执行请求的对象解耦合的时候使用命令模式\" class=\"headerlink\" title=\"命令模式 (当需要将发出请求的对象和执行请求的对象解耦合的时候使用命令模式)\"></a>命令模式 (当需要将发出请求的对象和执行请求的对象解耦合的时候使用命令模式)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div><div class=\"line\">364</div><div class=\"line\">365</div><div class=\"line\">366</div><div class=\"line\">367</div><div class=\"line\">368</div><div class=\"line\">369</div><div class=\"line\">370</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 命令模式 (当需要将发出请求的对象和执行请求的对象解耦合的时候使用命令模式)</div><div class=\"line\"> * ` 将请求封装成对象,这可以让你使不同的请求,队列,或者日志来参数化其他对象,</div><div class=\"line\"> * 命令模式也可以支持撤销操作 `</div><div class=\"line\"> * 要点:</div><div class=\"line\"> * 1.命令模式将发出请求的对象和执行请求对象解耦</div><div class=\"line\"> * 2.在被解耦的两者之间是通过命令对象进行沟通的,命令对象封装了接受者和一个或一组动作</div><div class=\"line\"> * 3.调用者通过调用命令对象的 execute() 发出请求,这会使得接受者的动作被调用</div><div class=\"line\"> * 4.调用者可以接受命令当作参数,甚至在运行时动态地执行</div><div class=\"line\"> * 5.名利可以支持撤销,做法是实现一个undo()方法来回到execute()被执行前的状态</div><div class=\"line\"> * 6.宏命令是命令的一种简单延伸,允许调用多个命令,同时支持撤销</div><div class=\"line\"> * 7.命令也可以来实现日志和事务系统</div><div class=\"line\"> *</div><div class=\"line\"> * 提供简单版本和复杂版本</div><div class=\"line\"> *</div><div class=\"line\"> * 场景描述:</div><div class=\"line\"> *  英雄 超人 和蜘蛛侠</div><div class=\"line\"> *  每个人的技能都不相同,统一交给按钮控制(命令模式将发出请求的对象和执行请求对象解耦)</div><div class=\"line\"> *  英雄 和 控制器调用之间 完全解耦</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\">public class CommandPattern &#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args)&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        //简单版本实现</div><div class=\"line\">        SimpleRemoteDemo();</div><div class=\"line\"></div><div class=\"line\">        //复杂模式</div><div class=\"line\">        ComplexRemoteDemo();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //简单版本实现</div><div class=\"line\">    static void SimpleRemoteDemo()&#123;</div><div class=\"line\">        SimpleRemoteControl remote = new SimpleRemoteControl();</div><div class=\"line\">        Light light = new Light();</div><div class=\"line\">        LightOnCommand lightOnCommand = new LightOnCommand(light);</div><div class=\"line\">        remote.setCommand(lightOnCommand);</div><div class=\"line\">        remote.buttonWasPressed();</div><div class=\"line\">        remote.undoButtonWasPressed();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //复杂模式</div><div class=\"line\">    static void ComplexRemoteDemo()&#123;</div><div class=\"line\"></div><div class=\"line\">        //初始化控制器 传入控制英雄数量</div><div class=\"line\">        RemoteControl remoteControl = new RemoteControl(3);</div><div class=\"line\"></div><div class=\"line\">        //创建两个英雄</div><div class=\"line\">         HeroSuperman heroSuperman = new HeroSuperman(&quot;超人&quot;);</div><div class=\"line\"></div><div class=\"line\">        //创建命令</div><div class=\"line\">         HeroSupermanCommand heroSupermanCommand = new HeroSupermanCommand(heroSuperman);</div><div class=\"line\"></div><div class=\"line\">        //将对象放到插槽中</div><div class=\"line\">        remoteControl.setCommand(0,heroSupermanCommand);</div><div class=\"line\">        remoteControl.setCommand(1,new HeroSpiderManCommand(new HeroSpiderMan(&quot;蜘蛛侠&quot;)));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        //点下按钮一</div><div class=\"line\">        remoteControl.buttonWasPressed(0);</div><div class=\"line\">        //撤销</div><div class=\"line\">        remoteControl.undoButtonWasPressed();</div><div class=\"line\">        //点下按钮2</div><div class=\"line\">        remoteControl.buttonWasPressed(1);</div><div class=\"line\">        remoteControl.undoButtonWasPressed();</div><div class=\"line\"></div><div class=\"line\">        //在实现按下一个按钮把上述全部执行</div><div class=\"line\"></div><div class=\"line\">        Command[] commands = &#123;heroSupermanCommand,new HeroSpiderManCommand(new HeroSpiderMan(&quot;蜘蛛侠&quot;))&#125;;</div><div class=\"line\">        MacroCommand macroCommand = new MacroCommand(commands);</div><div class=\"line\">        //将对象放到插槽中</div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;----------------多重控制------------------------&quot;);</div><div class=\"line\"></div><div class=\"line\">        remoteControl.setCommand(2,macroCommand);</div><div class=\"line\">        System.out.println(&quot;----------------多重控制 开始攻击------------------------&quot;);</div><div class=\"line\">        remoteControl.buttonWasPressed(2);</div><div class=\"line\">        System.out.println(&quot;----------------多重控制 开始撤回------------------------&quot;);</div><div class=\"line\">        remoteControl.undoButtonWasPressed();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/***Simple Demo BEN************************************************************************************/</div><div class=\"line\">/**</div><div class=\"line\"> * 命令基类</div><div class=\"line\"> * 让所有命令对象实现相同的包含一个方法的接口</div><div class=\"line\"> * **/</div><div class=\"line\">interface Command&#123;</div><div class=\"line\">    void execute();</div><div class=\"line\">    void undo();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 控制器 总控</div><div class=\"line\"> * 请求的对象</div><div class=\"line\"> * 调用者可以接受命令当作参数,甚至在运行时动态地执行</div><div class=\"line\"> * **/</div><div class=\"line\">class SimpleRemoteControl&#123;</div><div class=\"line\"></div><div class=\"line\">    Command slot;</div><div class=\"line\"></div><div class=\"line\">    public SimpleRemoteControl()&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    public void setCommand(Command command)&#123;</div><div class=\"line\">        this.slot = command;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void buttonWasPressed()&#123;</div><div class=\"line\">        slot.execute();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void undoButtonWasPressed()&#123;</div><div class=\"line\">        slot.undo();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 某一种产品</div><div class=\"line\"> * 具体实现</div><div class=\"line\"> * 执行请求对象</div><div class=\"line\"> * */</div><div class=\"line\">class Light&#123;</div><div class=\"line\">    public void on()&#123;</div><div class=\"line\">        System.out.println(&quot;灯量了&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    public void off()&#123;</div><div class=\"line\">        System.out.println(&quot;灯熄灭了&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 某一种产品的某一种执行方法</div><div class=\"line\"> * 创建命令</div><div class=\"line\"> * 命令对象封装了接受者和一个或一组动作</div><div class=\"line\"> * */</div><div class=\"line\">class LightOnCommand implements Command&#123;</div><div class=\"line\"></div><div class=\"line\">    Light light;</div><div class=\"line\">    public LightOnCommand(Light light)&#123;</div><div class=\"line\">        this.light = light;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void execute() &#123;</div><div class=\"line\">        light.on();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void undo() &#123;</div><div class=\"line\">        light.off();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">/***Simple Demo   END************************************************************************************/</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/***Complex Demo   BEN************************************************************************************/</div><div class=\"line\"></div><div class=\"line\">class NoCommand implements Command&#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void execute() &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void undo() &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 英雄超人</div><div class=\"line\"> * */</div><div class=\"line\">class HeroSuperman&#123;</div><div class=\"line\"></div><div class=\"line\">    private String name;</div><div class=\"line\"></div><div class=\"line\">    public HeroSuperman(String name)&#123;</div><div class=\"line\">        this.name=name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 攻击A</div><div class=\"line\">     * */</div><div class=\"line\">    public void attackA()&#123;</div><div class=\"line\">        System.out.println(name+&quot;send......&gt;&gt;&gt;&gt;&gt;&gt; attackA&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 攻击B</div><div class=\"line\">     * */</div><div class=\"line\">    public void attackB()&#123;</div><div class=\"line\">        System.out.println(name+&quot;send......&gt;&gt;&gt;&gt;&gt;&gt; attackB&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 撤销攻击</div><div class=\"line\">     * */</div><div class=\"line\">    public void attackUndo()&#123;</div><div class=\"line\">        System.out.println(name+&quot;undo......&gt;&gt;&gt;&gt;&gt;&gt; attackB&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">/**</div><div class=\"line\"> * 英雄蜘蛛侠</div><div class=\"line\"> * */</div><div class=\"line\">class HeroSpiderMan&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    private String name;</div><div class=\"line\"></div><div class=\"line\">    public HeroSpiderMan(String name)&#123;</div><div class=\"line\">        this.name=name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 攻击A</div><div class=\"line\">     * */</div><div class=\"line\">    public void attackC()&#123;</div><div class=\"line\">        System.out.println(name+&quot;send......&gt;&gt;&gt;&gt;&gt;&gt; attackC&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 攻击B</div><div class=\"line\">     * */</div><div class=\"line\">    public void attackD()&#123;</div><div class=\"line\">        System.out.println(name+&quot;send......&gt;&gt;&gt;&gt;&gt;&gt; attackD&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    /**</div><div class=\"line\">     * 攻击B</div><div class=\"line\">     * */</div><div class=\"line\">    public void attackE()&#123;</div><div class=\"line\">        System.out.println(name+&quot;send......&gt;&gt;&gt;&gt;&gt;&gt; attackE&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    /**</div><div class=\"line\">     * 撤销攻击</div><div class=\"line\">     * */</div><div class=\"line\">    public void attackUndoA()&#123;</div><div class=\"line\">        System.out.println(name+&quot;undo......&gt;&gt;&gt;&gt;&gt;&gt; attackA-B-C-D&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/***</div><div class=\"line\"> * 创建英雄超人攻击命令</div><div class=\"line\"> * */</div><div class=\"line\">class HeroSupermanCommand implements Command&#123;</div><div class=\"line\"></div><div class=\"line\">    private HeroSuperman heroSuperman;</div><div class=\"line\"></div><div class=\"line\">    public HeroSupermanCommand(HeroSuperman heroSuperman) &#123;</div><div class=\"line\">        this.heroSuperman = heroSuperman;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void undo() &#123;</div><div class=\"line\">        heroSuperman.attackUndo();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void execute() &#123;</div><div class=\"line\">        heroSuperman.attackA();</div><div class=\"line\">        heroSuperman.attackB();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/***</div><div class=\"line\"> * 创建英雄蜘蛛侠攻击命令</div><div class=\"line\"> * */</div><div class=\"line\">class HeroSpiderManCommand implements Command&#123;</div><div class=\"line\"></div><div class=\"line\">    private HeroSpiderMan heroSpiderMan;</div><div class=\"line\"></div><div class=\"line\">    public HeroSpiderManCommand(HeroSpiderMan heroSpiderMan) &#123;</div><div class=\"line\">        this.heroSpiderMan=heroSpiderMan;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void undo() &#123;</div><div class=\"line\">        heroSpiderMan.attackUndoA();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void execute() &#123;</div><div class=\"line\">        heroSpiderMan.attackC();</div><div class=\"line\">        heroSpiderMan.attackD();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class MacroCommand implements Command&#123;</div><div class=\"line\"></div><div class=\"line\">    private Command[] commands;</div><div class=\"line\"></div><div class=\"line\">    public MacroCommand(Command[] commands)&#123;</div><div class=\"line\">        this.commands = commands;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void execute() &#123;</div><div class=\"line\">        for(Command c : commands)&#123;</div><div class=\"line\">            c.execute();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void undo() &#123;</div><div class=\"line\">        for(Command c : commands)&#123;</div><div class=\"line\">            c.undo();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 控制器 总控</div><div class=\"line\"> * 请求的对象</div><div class=\"line\"> * 调用者可以接受命令当作参数,甚至在运行时动态地执行</div><div class=\"line\"> * **/</div><div class=\"line\">class RemoteControl&#123;</div><div class=\"line\"></div><div class=\"line\">    private Command[] buttonCommand;</div><div class=\"line\"></div><div class=\"line\">    //撤销命令</div><div class=\"line\">    private Command undoCommand;</div><div class=\"line\"></div><div class=\"line\">    public RemoteControl(int slot)&#123;</div><div class=\"line\"></div><div class=\"line\">        buttonCommand  = new Command[slot];</div><div class=\"line\">        NoCommand noCommand = new NoCommand();</div><div class=\"line\">        for(int i=0;i&lt;slot;i++)&#123;</div><div class=\"line\">            //避免出现null异常</div><div class=\"line\">            buttonCommand[i] =noCommand;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setCommand(int slot,Command command)&#123;</div><div class=\"line\">        buttonCommand[slot]=command;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //按钮按下事件</div><div class=\"line\">    public void buttonWasPressed(int slot)&#123;</div><div class=\"line\">        buttonCommand[slot].execute();</div><div class=\"line\">        undoCommand= buttonCommand[slot];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //取消事件</div><div class=\"line\">    public void undoButtonWasPressed()&#123;</div><div class=\"line\">        undoCommand.undo();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/***Complex Demo   END************************************************************************************/</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h3 id=\"命令模式-当需要将发出请求的对象和执行请求的对象解耦合的时候使用命令模式\"><a href=\"#命令模式-当需要将发出请求的对象和执行请求的对象解耦合的时候使用命令模式\" class=\"headerlink\" title=\"命令模式 (当需要将发出请求的对象和执行请求的对象解耦合的时候使用命令模式)\"></a>命令模式 (当需要将发出请求的对象和执行请求的对象解耦合的时候使用命令模式)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div><div class=\"line\">364</div><div class=\"line\">365</div><div class=\"line\">366</div><div class=\"line\">367</div><div class=\"line\">368</div><div class=\"line\">369</div><div class=\"line\">370</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 命令模式 (当需要将发出请求的对象和执行请求的对象解耦合的时候使用命令模式)</div><div class=\"line\"> * ` 将请求封装成对象,这可以让你使不同的请求,队列,或者日志来参数化其他对象,</div><div class=\"line\"> * 命令模式也可以支持撤销操作 `</div><div class=\"line\"> * 要点:</div><div class=\"line\"> * 1.命令模式将发出请求的对象和执行请求对象解耦</div><div class=\"line\"> * 2.在被解耦的两者之间是通过命令对象进行沟通的,命令对象封装了接受者和一个或一组动作</div><div class=\"line\"> * 3.调用者通过调用命令对象的 execute() 发出请求,这会使得接受者的动作被调用</div><div class=\"line\"> * 4.调用者可以接受命令当作参数,甚至在运行时动态地执行</div><div class=\"line\"> * 5.名利可以支持撤销,做法是实现一个undo()方法来回到execute()被执行前的状态</div><div class=\"line\"> * 6.宏命令是命令的一种简单延伸,允许调用多个命令,同时支持撤销</div><div class=\"line\"> * 7.命令也可以来实现日志和事务系统</div><div class=\"line\"> *</div><div class=\"line\"> * 提供简单版本和复杂版本</div><div class=\"line\"> *</div><div class=\"line\"> * 场景描述:</div><div class=\"line\"> *  英雄 超人 和蜘蛛侠</div><div class=\"line\"> *  每个人的技能都不相同,统一交给按钮控制(命令模式将发出请求的对象和执行请求对象解耦)</div><div class=\"line\"> *  英雄 和 控制器调用之间 完全解耦</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\">public class CommandPattern &#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args)&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        //简单版本实现</div><div class=\"line\">        SimpleRemoteDemo();</div><div class=\"line\"></div><div class=\"line\">        //复杂模式</div><div class=\"line\">        ComplexRemoteDemo();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //简单版本实现</div><div class=\"line\">    static void SimpleRemoteDemo()&#123;</div><div class=\"line\">        SimpleRemoteControl remote = new SimpleRemoteControl();</div><div class=\"line\">        Light light = new Light();</div><div class=\"line\">        LightOnCommand lightOnCommand = new LightOnCommand(light);</div><div class=\"line\">        remote.setCommand(lightOnCommand);</div><div class=\"line\">        remote.buttonWasPressed();</div><div class=\"line\">        remote.undoButtonWasPressed();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //复杂模式</div><div class=\"line\">    static void ComplexRemoteDemo()&#123;</div><div class=\"line\"></div><div class=\"line\">        //初始化控制器 传入控制英雄数量</div><div class=\"line\">        RemoteControl remoteControl = new RemoteControl(3);</div><div class=\"line\"></div><div class=\"line\">        //创建两个英雄</div><div class=\"line\">         HeroSuperman heroSuperman = new HeroSuperman(&quot;超人&quot;);</div><div class=\"line\"></div><div class=\"line\">        //创建命令</div><div class=\"line\">         HeroSupermanCommand heroSupermanCommand = new HeroSupermanCommand(heroSuperman);</div><div class=\"line\"></div><div class=\"line\">        //将对象放到插槽中</div><div class=\"line\">        remoteControl.setCommand(0,heroSupermanCommand);</div><div class=\"line\">        remoteControl.setCommand(1,new HeroSpiderManCommand(new HeroSpiderMan(&quot;蜘蛛侠&quot;)));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        //点下按钮一</div><div class=\"line\">        remoteControl.buttonWasPressed(0);</div><div class=\"line\">        //撤销</div><div class=\"line\">        remoteControl.undoButtonWasPressed();</div><div class=\"line\">        //点下按钮2</div><div class=\"line\">        remoteControl.buttonWasPressed(1);</div><div class=\"line\">        remoteControl.undoButtonWasPressed();</div><div class=\"line\"></div><div class=\"line\">        //在实现按下一个按钮把上述全部执行</div><div class=\"line\"></div><div class=\"line\">        Command[] commands = &#123;heroSupermanCommand,new HeroSpiderManCommand(new HeroSpiderMan(&quot;蜘蛛侠&quot;))&#125;;</div><div class=\"line\">        MacroCommand macroCommand = new MacroCommand(commands);</div><div class=\"line\">        //将对象放到插槽中</div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;----------------多重控制------------------------&quot;);</div><div class=\"line\"></div><div class=\"line\">        remoteControl.setCommand(2,macroCommand);</div><div class=\"line\">        System.out.println(&quot;----------------多重控制 开始攻击------------------------&quot;);</div><div class=\"line\">        remoteControl.buttonWasPressed(2);</div><div class=\"line\">        System.out.println(&quot;----------------多重控制 开始撤回------------------------&quot;);</div><div class=\"line\">        remoteControl.undoButtonWasPressed();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/***Simple Demo BEN************************************************************************************/</div><div class=\"line\">/**</div><div class=\"line\"> * 命令基类</div><div class=\"line\"> * 让所有命令对象实现相同的包含一个方法的接口</div><div class=\"line\"> * **/</div><div class=\"line\">interface Command&#123;</div><div class=\"line\">    void execute();</div><div class=\"line\">    void undo();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 控制器 总控</div><div class=\"line\"> * 请求的对象</div><div class=\"line\"> * 调用者可以接受命令当作参数,甚至在运行时动态地执行</div><div class=\"line\"> * **/</div><div class=\"line\">class SimpleRemoteControl&#123;</div><div class=\"line\"></div><div class=\"line\">    Command slot;</div><div class=\"line\"></div><div class=\"line\">    public SimpleRemoteControl()&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    public void setCommand(Command command)&#123;</div><div class=\"line\">        this.slot = command;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void buttonWasPressed()&#123;</div><div class=\"line\">        slot.execute();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void undoButtonWasPressed()&#123;</div><div class=\"line\">        slot.undo();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 某一种产品</div><div class=\"line\"> * 具体实现</div><div class=\"line\"> * 执行请求对象</div><div class=\"line\"> * */</div><div class=\"line\">class Light&#123;</div><div class=\"line\">    public void on()&#123;</div><div class=\"line\">        System.out.println(&quot;灯量了&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    public void off()&#123;</div><div class=\"line\">        System.out.println(&quot;灯熄灭了&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 某一种产品的某一种执行方法</div><div class=\"line\"> * 创建命令</div><div class=\"line\"> * 命令对象封装了接受者和一个或一组动作</div><div class=\"line\"> * */</div><div class=\"line\">class LightOnCommand implements Command&#123;</div><div class=\"line\"></div><div class=\"line\">    Light light;</div><div class=\"line\">    public LightOnCommand(Light light)&#123;</div><div class=\"line\">        this.light = light;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void execute() &#123;</div><div class=\"line\">        light.on();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void undo() &#123;</div><div class=\"line\">        light.off();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">/***Simple Demo   END************************************************************************************/</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/***Complex Demo   BEN************************************************************************************/</div><div class=\"line\"></div><div class=\"line\">class NoCommand implements Command&#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void execute() &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void undo() &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 英雄超人</div><div class=\"line\"> * */</div><div class=\"line\">class HeroSuperman&#123;</div><div class=\"line\"></div><div class=\"line\">    private String name;</div><div class=\"line\"></div><div class=\"line\">    public HeroSuperman(String name)&#123;</div><div class=\"line\">        this.name=name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 攻击A</div><div class=\"line\">     * */</div><div class=\"line\">    public void attackA()&#123;</div><div class=\"line\">        System.out.println(name+&quot;send......&gt;&gt;&gt;&gt;&gt;&gt; attackA&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 攻击B</div><div class=\"line\">     * */</div><div class=\"line\">    public void attackB()&#123;</div><div class=\"line\">        System.out.println(name+&quot;send......&gt;&gt;&gt;&gt;&gt;&gt; attackB&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 撤销攻击</div><div class=\"line\">     * */</div><div class=\"line\">    public void attackUndo()&#123;</div><div class=\"line\">        System.out.println(name+&quot;undo......&gt;&gt;&gt;&gt;&gt;&gt; attackB&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">/**</div><div class=\"line\"> * 英雄蜘蛛侠</div><div class=\"line\"> * */</div><div class=\"line\">class HeroSpiderMan&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    private String name;</div><div class=\"line\"></div><div class=\"line\">    public HeroSpiderMan(String name)&#123;</div><div class=\"line\">        this.name=name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 攻击A</div><div class=\"line\">     * */</div><div class=\"line\">    public void attackC()&#123;</div><div class=\"line\">        System.out.println(name+&quot;send......&gt;&gt;&gt;&gt;&gt;&gt; attackC&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 攻击B</div><div class=\"line\">     * */</div><div class=\"line\">    public void attackD()&#123;</div><div class=\"line\">        System.out.println(name+&quot;send......&gt;&gt;&gt;&gt;&gt;&gt; attackD&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    /**</div><div class=\"line\">     * 攻击B</div><div class=\"line\">     * */</div><div class=\"line\">    public void attackE()&#123;</div><div class=\"line\">        System.out.println(name+&quot;send......&gt;&gt;&gt;&gt;&gt;&gt; attackE&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    /**</div><div class=\"line\">     * 撤销攻击</div><div class=\"line\">     * */</div><div class=\"line\">    public void attackUndoA()&#123;</div><div class=\"line\">        System.out.println(name+&quot;undo......&gt;&gt;&gt;&gt;&gt;&gt; attackA-B-C-D&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/***</div><div class=\"line\"> * 创建英雄超人攻击命令</div><div class=\"line\"> * */</div><div class=\"line\">class HeroSupermanCommand implements Command&#123;</div><div class=\"line\"></div><div class=\"line\">    private HeroSuperman heroSuperman;</div><div class=\"line\"></div><div class=\"line\">    public HeroSupermanCommand(HeroSuperman heroSuperman) &#123;</div><div class=\"line\">        this.heroSuperman = heroSuperman;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void undo() &#123;</div><div class=\"line\">        heroSuperman.attackUndo();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void execute() &#123;</div><div class=\"line\">        heroSuperman.attackA();</div><div class=\"line\">        heroSuperman.attackB();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/***</div><div class=\"line\"> * 创建英雄蜘蛛侠攻击命令</div><div class=\"line\"> * */</div><div class=\"line\">class HeroSpiderManCommand implements Command&#123;</div><div class=\"line\"></div><div class=\"line\">    private HeroSpiderMan heroSpiderMan;</div><div class=\"line\"></div><div class=\"line\">    public HeroSpiderManCommand(HeroSpiderMan heroSpiderMan) &#123;</div><div class=\"line\">        this.heroSpiderMan=heroSpiderMan;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void undo() &#123;</div><div class=\"line\">        heroSpiderMan.attackUndoA();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void execute() &#123;</div><div class=\"line\">        heroSpiderMan.attackC();</div><div class=\"line\">        heroSpiderMan.attackD();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class MacroCommand implements Command&#123;</div><div class=\"line\"></div><div class=\"line\">    private Command[] commands;</div><div class=\"line\"></div><div class=\"line\">    public MacroCommand(Command[] commands)&#123;</div><div class=\"line\">        this.commands = commands;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void execute() &#123;</div><div class=\"line\">        for(Command c : commands)&#123;</div><div class=\"line\">            c.execute();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void undo() &#123;</div><div class=\"line\">        for(Command c : commands)&#123;</div><div class=\"line\">            c.undo();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 控制器 总控</div><div class=\"line\"> * 请求的对象</div><div class=\"line\"> * 调用者可以接受命令当作参数,甚至在运行时动态地执行</div><div class=\"line\"> * **/</div><div class=\"line\">class RemoteControl&#123;</div><div class=\"line\"></div><div class=\"line\">    private Command[] buttonCommand;</div><div class=\"line\"></div><div class=\"line\">    //撤销命令</div><div class=\"line\">    private Command undoCommand;</div><div class=\"line\"></div><div class=\"line\">    public RemoteControl(int slot)&#123;</div><div class=\"line\"></div><div class=\"line\">        buttonCommand  = new Command[slot];</div><div class=\"line\">        NoCommand noCommand = new NoCommand();</div><div class=\"line\">        for(int i=0;i&lt;slot;i++)&#123;</div><div class=\"line\">            //避免出现null异常</div><div class=\"line\">            buttonCommand[i] =noCommand;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setCommand(int slot,Command command)&#123;</div><div class=\"line\">        buttonCommand[slot]=command;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //按钮按下事件</div><div class=\"line\">    public void buttonWasPressed(int slot)&#123;</div><div class=\"line\">        buttonCommand[slot].execute();</div><div class=\"line\">        undoCommand= buttonCommand[slot];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //取消事件</div><div class=\"line\">    public void undoButtonWasPressed()&#123;</div><div class=\"line\">        undoCommand.undo();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/***Complex Demo   END************************************************************************************/</div></pre></td></tr></table></figure>\n"},{"title":"设计模式模版方法－不解释","date":"2017-03-29T02:09:09.000Z","layout":"clean-blog","slug":"设计模式模版方法－不解释","_content":"\n### 模版方法: 在一个方法中定义一个算法的骨架,而将一些步骤延迟到子类中,  模版方法使得子类可以在不改变算结构的情况下,重新定义算法中的某些步骤\n\n````\n \n/**\n * 模版方法: 在一个方法中定义一个算法的骨架,而将一些步骤延迟到子类中,\n * 模版方法使得子类可以在不改变算结构的情况下,重新定义算法中的某些步骤\n * 要点:\n * 1.模版方法定义类了算法的步骤,把这些步骤的实现延迟到子类\n * 2.模版方法模式为我们提供类一种代码复用的重要技巧\n * 3.模版方法的抽象类可以定义具体方法,抽象方法和钩子\n * 4.抽象方法由子类实现\n * 5.钩子一种法方法,它在抽象类中不做事情,或者只做默认的事情,子类可以选择是否需要覆盖\n * 6.为了防止子类改变模版方法中的算法,可以将模版方法声明为final\n * 7.好莱坞原则告诉我们,将决策权防盗高层模块中,以便绝的如何以及何时调用底层模块\n * 8.你将在真实世界代码中看到模版方法模式的许多变体,不要期待它们都是一眼就可以被你认出\n * 9.策略模式和模版方法模式都是封装算法,一个用组合(策略),一个是继承(模版)\n * 10. 工厂方法是模版方法的一种特殊版本\n * <p>\n * 场景描述:\n * 实现目的将具体实现延迟到子类实现\n * 比如实现一个服务操作,每次执行要求 开,操作,提交(通过钩子判断),关闭,操作\n */\npublic class TemplatePattern {\n\n    public static void main(String args[]) {\n\n        Operation mysqlOperation = new MysqlOperation();\n\n        Operation fileOperation = new FileOperation();\n\n        mysqlOperation.start();\n        System.out.println(\"------------------------------------\");\n        fileOperation.start();\n\n    }\n\n}\n\n\n\n//数据库操作\nclass MysqlOperation extends Operation{\n\n\n    @Override\n    void operation() {\n        System.out.println(\"操作数据库\");\n    }\n\n    @Override\n    void open() {\n        System.out.println(\"打开mysql数据库\");\n    }\n\n    @Override\n    boolean hook() {\n        return true;\n    }\n\n    @Override\n    void commit() {\n        System.out.println(\"数据提交\");\n    }\n\n    @Override\n    void close() {\n        System.out.println(\"关闭mysql数据库\");\n    }\n}\n\n\nclass FileOperation extends Operation  {\n\n    @Override\n    void close() {\n        System.out.println(\"关闭文件流\");\n    }\n\n    @Override\n    void commit() {\n    }\n\n    @Override\n    boolean hook() {\n        return false;\n    }\n\n    @Override\n    void open() {\n        System.out.println(\"打开文件流\");\n    }\n\n    @Override\n    void operation() {\n        System.out.println(\"打开文件操作\");\n    }\n}\n\n\nabstract class Operation {\n\n    //启动主程序\n    final void start() {\n        open();\n        operation();\n        if (hook()) {\n            commit();\n        }\n        close();\n    }\n\n    abstract void open();\n\n    abstract void operation();\n\n    abstract void commit();\n\n    abstract void close();\n\n    boolean hook() {\n        return false;\n    }\n\n\n}\n\n````\n ","source":"_posts/设计模式模版方法－不解释.md","raw":"---\ntitle: 设计模式模版方法－不解释\ndate: 2017-03-29 10:09:09\ntags: 设计模式\nlayout: clean-blog\nslug: TemplatePattern\n\n---\n\n### 模版方法: 在一个方法中定义一个算法的骨架,而将一些步骤延迟到子类中,  模版方法使得子类可以在不改变算结构的情况下,重新定义算法中的某些步骤\n\n````\n \n/**\n * 模版方法: 在一个方法中定义一个算法的骨架,而将一些步骤延迟到子类中,\n * 模版方法使得子类可以在不改变算结构的情况下,重新定义算法中的某些步骤\n * 要点:\n * 1.模版方法定义类了算法的步骤,把这些步骤的实现延迟到子类\n * 2.模版方法模式为我们提供类一种代码复用的重要技巧\n * 3.模版方法的抽象类可以定义具体方法,抽象方法和钩子\n * 4.抽象方法由子类实现\n * 5.钩子一种法方法,它在抽象类中不做事情,或者只做默认的事情,子类可以选择是否需要覆盖\n * 6.为了防止子类改变模版方法中的算法,可以将模版方法声明为final\n * 7.好莱坞原则告诉我们,将决策权防盗高层模块中,以便绝的如何以及何时调用底层模块\n * 8.你将在真实世界代码中看到模版方法模式的许多变体,不要期待它们都是一眼就可以被你认出\n * 9.策略模式和模版方法模式都是封装算法,一个用组合(策略),一个是继承(模版)\n * 10. 工厂方法是模版方法的一种特殊版本\n * <p>\n * 场景描述:\n * 实现目的将具体实现延迟到子类实现\n * 比如实现一个服务操作,每次执行要求 开,操作,提交(通过钩子判断),关闭,操作\n */\npublic class TemplatePattern {\n\n    public static void main(String args[]) {\n\n        Operation mysqlOperation = new MysqlOperation();\n\n        Operation fileOperation = new FileOperation();\n\n        mysqlOperation.start();\n        System.out.println(\"------------------------------------\");\n        fileOperation.start();\n\n    }\n\n}\n\n\n\n//数据库操作\nclass MysqlOperation extends Operation{\n\n\n    @Override\n    void operation() {\n        System.out.println(\"操作数据库\");\n    }\n\n    @Override\n    void open() {\n        System.out.println(\"打开mysql数据库\");\n    }\n\n    @Override\n    boolean hook() {\n        return true;\n    }\n\n    @Override\n    void commit() {\n        System.out.println(\"数据提交\");\n    }\n\n    @Override\n    void close() {\n        System.out.println(\"关闭mysql数据库\");\n    }\n}\n\n\nclass FileOperation extends Operation  {\n\n    @Override\n    void close() {\n        System.out.println(\"关闭文件流\");\n    }\n\n    @Override\n    void commit() {\n    }\n\n    @Override\n    boolean hook() {\n        return false;\n    }\n\n    @Override\n    void open() {\n        System.out.println(\"打开文件流\");\n    }\n\n    @Override\n    void operation() {\n        System.out.println(\"打开文件操作\");\n    }\n}\n\n\nabstract class Operation {\n\n    //启动主程序\n    final void start() {\n        open();\n        operation();\n        if (hook()) {\n            commit();\n        }\n        close();\n    }\n\n    abstract void open();\n\n    abstract void operation();\n\n    abstract void commit();\n\n    abstract void close();\n\n    boolean hook() {\n        return false;\n    }\n\n\n}\n\n````\n ","published":1,"updated":"2017-03-29T02:11:15.000Z","comments":1,"photos":[],"link":"","_id":"cj0uc8d0i000fey5ryt4hwpit","content":"<h3 id=\"模版方法-在一个方法中定义一个算法的骨架-而将一些步骤延迟到子类中-模版方法使得子类可以在不改变算结构的情况下-重新定义算法中的某些步骤\"><a href=\"#模版方法-在一个方法中定义一个算法的骨架-而将一些步骤延迟到子类中-模版方法使得子类可以在不改变算结构的情况下-重新定义算法中的某些步骤\" class=\"headerlink\" title=\"模版方法: 在一个方法中定义一个算法的骨架,而将一些步骤延迟到子类中,  模版方法使得子类可以在不改变算结构的情况下,重新定义算法中的某些步骤\"></a>模版方法: 在一个方法中定义一个算法的骨架,而将一些步骤延迟到子类中,  模版方法使得子类可以在不改变算结构的情况下,重新定义算法中的某些步骤</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div><div class=\"line\">/**</div><div class=\"line\"> * 模版方法: 在一个方法中定义一个算法的骨架,而将一些步骤延迟到子类中,</div><div class=\"line\"> * 模版方法使得子类可以在不改变算结构的情况下,重新定义算法中的某些步骤</div><div class=\"line\"> * 要点:</div><div class=\"line\"> * 1.模版方法定义类了算法的步骤,把这些步骤的实现延迟到子类</div><div class=\"line\"> * 2.模版方法模式为我们提供类一种代码复用的重要技巧</div><div class=\"line\"> * 3.模版方法的抽象类可以定义具体方法,抽象方法和钩子</div><div class=\"line\"> * 4.抽象方法由子类实现</div><div class=\"line\"> * 5.钩子一种法方法,它在抽象类中不做事情,或者只做默认的事情,子类可以选择是否需要覆盖</div><div class=\"line\"> * 6.为了防止子类改变模版方法中的算法,可以将模版方法声明为final</div><div class=\"line\"> * 7.好莱坞原则告诉我们,将决策权防盗高层模块中,以便绝的如何以及何时调用底层模块</div><div class=\"line\"> * 8.你将在真实世界代码中看到模版方法模式的许多变体,不要期待它们都是一眼就可以被你认出</div><div class=\"line\"> * 9.策略模式和模版方法模式都是封装算法,一个用组合(策略),一个是继承(模版)</div><div class=\"line\"> * 10. 工厂方法是模版方法的一种特殊版本</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * 场景描述:</div><div class=\"line\"> * 实现目的将具体实现延迟到子类实现</div><div class=\"line\"> * 比如实现一个服务操作,每次执行要求 开,操作,提交(通过钩子判断),关闭,操作</div><div class=\"line\"> */</div><div class=\"line\">public class TemplatePattern &#123;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String args[]) &#123;</div><div class=\"line\"></div><div class=\"line\">        Operation mysqlOperation = new MysqlOperation();</div><div class=\"line\"></div><div class=\"line\">        Operation fileOperation = new FileOperation();</div><div class=\"line\"></div><div class=\"line\">        mysqlOperation.start();</div><div class=\"line\">        System.out.println(&quot;------------------------------------&quot;);</div><div class=\"line\">        fileOperation.start();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//数据库操作</div><div class=\"line\">class MysqlOperation extends Operation&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    void operation() &#123;</div><div class=\"line\">        System.out.println(&quot;操作数据库&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    void open() &#123;</div><div class=\"line\">        System.out.println(&quot;打开mysql数据库&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    boolean hook() &#123;</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    void commit() &#123;</div><div class=\"line\">        System.out.println(&quot;数据提交&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    void close() &#123;</div><div class=\"line\">        System.out.println(&quot;关闭mysql数据库&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">class FileOperation extends Operation  &#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    void close() &#123;</div><div class=\"line\">        System.out.println(&quot;关闭文件流&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    void commit() &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    boolean hook() &#123;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    void open() &#123;</div><div class=\"line\">        System.out.println(&quot;打开文件流&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    void operation() &#123;</div><div class=\"line\">        System.out.println(&quot;打开文件操作&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">abstract class Operation &#123;</div><div class=\"line\"></div><div class=\"line\">    //启动主程序</div><div class=\"line\">    final void start() &#123;</div><div class=\"line\">        open();</div><div class=\"line\">        operation();</div><div class=\"line\">        if (hook()) &#123;</div><div class=\"line\">            commit();</div><div class=\"line\">        &#125;</div><div class=\"line\">        close();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    abstract void open();</div><div class=\"line\"></div><div class=\"line\">    abstract void operation();</div><div class=\"line\"></div><div class=\"line\">    abstract void commit();</div><div class=\"line\"></div><div class=\"line\">    abstract void close();</div><div class=\"line\"></div><div class=\"line\">    boolean hook() &#123;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h3 id=\"模版方法-在一个方法中定义一个算法的骨架-而将一些步骤延迟到子类中-模版方法使得子类可以在不改变算结构的情况下-重新定义算法中的某些步骤\"><a href=\"#模版方法-在一个方法中定义一个算法的骨架-而将一些步骤延迟到子类中-模版方法使得子类可以在不改变算结构的情况下-重新定义算法中的某些步骤\" class=\"headerlink\" title=\"模版方法: 在一个方法中定义一个算法的骨架,而将一些步骤延迟到子类中,  模版方法使得子类可以在不改变算结构的情况下,重新定义算法中的某些步骤\"></a>模版方法: 在一个方法中定义一个算法的骨架,而将一些步骤延迟到子类中,  模版方法使得子类可以在不改变算结构的情况下,重新定义算法中的某些步骤</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div><div class=\"line\">/**</div><div class=\"line\"> * 模版方法: 在一个方法中定义一个算法的骨架,而将一些步骤延迟到子类中,</div><div class=\"line\"> * 模版方法使得子类可以在不改变算结构的情况下,重新定义算法中的某些步骤</div><div class=\"line\"> * 要点:</div><div class=\"line\"> * 1.模版方法定义类了算法的步骤,把这些步骤的实现延迟到子类</div><div class=\"line\"> * 2.模版方法模式为我们提供类一种代码复用的重要技巧</div><div class=\"line\"> * 3.模版方法的抽象类可以定义具体方法,抽象方法和钩子</div><div class=\"line\"> * 4.抽象方法由子类实现</div><div class=\"line\"> * 5.钩子一种法方法,它在抽象类中不做事情,或者只做默认的事情,子类可以选择是否需要覆盖</div><div class=\"line\"> * 6.为了防止子类改变模版方法中的算法,可以将模版方法声明为final</div><div class=\"line\"> * 7.好莱坞原则告诉我们,将决策权防盗高层模块中,以便绝的如何以及何时调用底层模块</div><div class=\"line\"> * 8.你将在真实世界代码中看到模版方法模式的许多变体,不要期待它们都是一眼就可以被你认出</div><div class=\"line\"> * 9.策略模式和模版方法模式都是封装算法,一个用组合(策略),一个是继承(模版)</div><div class=\"line\"> * 10. 工厂方法是模版方法的一种特殊版本</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * 场景描述:</div><div class=\"line\"> * 实现目的将具体实现延迟到子类实现</div><div class=\"line\"> * 比如实现一个服务操作,每次执行要求 开,操作,提交(通过钩子判断),关闭,操作</div><div class=\"line\"> */</div><div class=\"line\">public class TemplatePattern &#123;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String args[]) &#123;</div><div class=\"line\"></div><div class=\"line\">        Operation mysqlOperation = new MysqlOperation();</div><div class=\"line\"></div><div class=\"line\">        Operation fileOperation = new FileOperation();</div><div class=\"line\"></div><div class=\"line\">        mysqlOperation.start();</div><div class=\"line\">        System.out.println(&quot;------------------------------------&quot;);</div><div class=\"line\">        fileOperation.start();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//数据库操作</div><div class=\"line\">class MysqlOperation extends Operation&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    void operation() &#123;</div><div class=\"line\">        System.out.println(&quot;操作数据库&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    void open() &#123;</div><div class=\"line\">        System.out.println(&quot;打开mysql数据库&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    boolean hook() &#123;</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    void commit() &#123;</div><div class=\"line\">        System.out.println(&quot;数据提交&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    void close() &#123;</div><div class=\"line\">        System.out.println(&quot;关闭mysql数据库&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">class FileOperation extends Operation  &#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    void close() &#123;</div><div class=\"line\">        System.out.println(&quot;关闭文件流&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    void commit() &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    boolean hook() &#123;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    void open() &#123;</div><div class=\"line\">        System.out.println(&quot;打开文件流&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    void operation() &#123;</div><div class=\"line\">        System.out.println(&quot;打开文件操作&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">abstract class Operation &#123;</div><div class=\"line\"></div><div class=\"line\">    //启动主程序</div><div class=\"line\">    final void start() &#123;</div><div class=\"line\">        open();</div><div class=\"line\">        operation();</div><div class=\"line\">        if (hook()) &#123;</div><div class=\"line\">            commit();</div><div class=\"line\">        &#125;</div><div class=\"line\">        close();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    abstract void open();</div><div class=\"line\"></div><div class=\"line\">    abstract void operation();</div><div class=\"line\"></div><div class=\"line\">    abstract void commit();</div><div class=\"line\"></div><div class=\"line\">    abstract void close();</div><div class=\"line\"></div><div class=\"line\">    boolean hook() &#123;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"设计模式外观模式-不解释","date":"2017-03-10T09:20:21.000Z","layout":"clean-blog","slug":"设计模式外观模式-不解释","_content":"\n\n### 外观模式:提供一个统一的接口,用来访问子系统中的一群接口,外观定义类一个高层接口,让子系统更容易使用\n\n```\n\n\n/**\n * 外观模式:提供一个统一的接口,用来访问子系统中的一群接口,外观定义类一个高层接口,让子系统更容易使用\n * 外观和适配器可以包装许多类,但是外观的意图是简化接口,而适配器是将接口转化成不同接口\n * 外观不只是简化了接口,也将客户从组件的子系统中解耦\n * <p>\n * ***************\n * 当需要使用一个现有的类而起接口并不符合你的需要时,就使用适配器\n * 当需要简化并统一一个很大的接口或是一群复杂的接口是,使用外观\n * 适配器改变接口符合客户的期望\n * 外观将客户从一个负责的子系统中解耦\n * 实现一个外观,需要将系统组合进外观中,然后工作委托给子系统执行\n * 适配器模式两种模式: 对象适配,类适配\n * 适配器将一个对象包装起来以改变其接口,装饰者将一个对象包装起来以增加新的行为和责任,而外观将一群对象包装起来简化其接口\n * ***************\n * <p>\n */\npublic class FacadePattern {\n\n    public static void main(String args[]) {\n        //客户端调用\n        OperationFacade facade = new OperationFacade();\n        facade.run();\n    }\n\n}\n\n//外观\nclass OperationFacade {\n\n    private SubSystemA subSystemA;\n    private SubSystemB subSystemB;\n    private SubSystemC subSystemC;\n\n    public OperationFacade() {\n        subSystemA = new subSystemAImpl();\n        subSystemB = new subSystemBImpl();\n        subSystemC = new SubSystemC();\n    }\n    public void run() {\n        subSystemA.methodA();\n        subSystemB.methodB();\n        subSystemC.methodC();\n    }\n\n\n}\n\ninterface SubSystemA {\n    void methodA();\n}\n\n\ninterface SubSystemB {\n    void methodB();\n}\n\nclass subSystemAImpl implements SubSystemA {\n\n    @Override\n    public void methodA() {\n\n        System.out.println(\"subSystemAImpl ==> methodA\");\n    }\n}\n\nclass subSystemAAImpl implements SubSystemA {\n\n    @Override\n    public void methodA() {\n        System.out.println(\"subSystemAAImpl ==> methodA\");\n    }\n}\n\nclass subSystemBImpl implements SubSystemB {\n\n    @Override\n    public void methodB() {\n\n        System.out.println(\"subSystemBImpl ==> methodB\");\n    }\n}\n\nclass SubSystemC {\n\n    public void methodC() {\n\n        System.out.println(\"subSystemC ==> methodC\");\n    }\n\n\n}\n\n```","source":"_posts/设计模式外观模式-不解释.md","raw":"---\ntitle: 设计模式外观模式-不解释\ndate: 2017-03-10 17:20:21\ntags: 设计模式\nlayout: clean-blog\nslug: FacadePattern\n\n\n---\n\n\n### 外观模式:提供一个统一的接口,用来访问子系统中的一群接口,外观定义类一个高层接口,让子系统更容易使用\n\n```\n\n\n/**\n * 外观模式:提供一个统一的接口,用来访问子系统中的一群接口,外观定义类一个高层接口,让子系统更容易使用\n * 外观和适配器可以包装许多类,但是外观的意图是简化接口,而适配器是将接口转化成不同接口\n * 外观不只是简化了接口,也将客户从组件的子系统中解耦\n * <p>\n * ***************\n * 当需要使用一个现有的类而起接口并不符合你的需要时,就使用适配器\n * 当需要简化并统一一个很大的接口或是一群复杂的接口是,使用外观\n * 适配器改变接口符合客户的期望\n * 外观将客户从一个负责的子系统中解耦\n * 实现一个外观,需要将系统组合进外观中,然后工作委托给子系统执行\n * 适配器模式两种模式: 对象适配,类适配\n * 适配器将一个对象包装起来以改变其接口,装饰者将一个对象包装起来以增加新的行为和责任,而外观将一群对象包装起来简化其接口\n * ***************\n * <p>\n */\npublic class FacadePattern {\n\n    public static void main(String args[]) {\n        //客户端调用\n        OperationFacade facade = new OperationFacade();\n        facade.run();\n    }\n\n}\n\n//外观\nclass OperationFacade {\n\n    private SubSystemA subSystemA;\n    private SubSystemB subSystemB;\n    private SubSystemC subSystemC;\n\n    public OperationFacade() {\n        subSystemA = new subSystemAImpl();\n        subSystemB = new subSystemBImpl();\n        subSystemC = new SubSystemC();\n    }\n    public void run() {\n        subSystemA.methodA();\n        subSystemB.methodB();\n        subSystemC.methodC();\n    }\n\n\n}\n\ninterface SubSystemA {\n    void methodA();\n}\n\n\ninterface SubSystemB {\n    void methodB();\n}\n\nclass subSystemAImpl implements SubSystemA {\n\n    @Override\n    public void methodA() {\n\n        System.out.println(\"subSystemAImpl ==> methodA\");\n    }\n}\n\nclass subSystemAAImpl implements SubSystemA {\n\n    @Override\n    public void methodA() {\n        System.out.println(\"subSystemAAImpl ==> methodA\");\n    }\n}\n\nclass subSystemBImpl implements SubSystemB {\n\n    @Override\n    public void methodB() {\n\n        System.out.println(\"subSystemBImpl ==> methodB\");\n    }\n}\n\nclass SubSystemC {\n\n    public void methodC() {\n\n        System.out.println(\"subSystemC ==> methodC\");\n    }\n\n\n}\n\n```","published":1,"updated":"2017-03-10T09:29:26.000Z","comments":1,"photos":[],"link":"","_id":"cj0uc8d0j000iey5r598rbia6","content":"<h3 id=\"外观模式-提供一个统一的接口-用来访问子系统中的一群接口-外观定义类一个高层接口-让子系统更容易使用\"><a href=\"#外观模式-提供一个统一的接口-用来访问子系统中的一群接口-外观定义类一个高层接口-让子系统更容易使用\" class=\"headerlink\" title=\"外观模式:提供一个统一的接口,用来访问子系统中的一群接口,外观定义类一个高层接口,让子系统更容易使用\"></a>外观模式:提供一个统一的接口,用来访问子系统中的一群接口,外观定义类一个高层接口,让子系统更容易使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 外观模式:提供一个统一的接口,用来访问子系统中的一群接口,外观定义类一个高层接口,让子系统更容易使用</div><div class=\"line\"> * 外观和适配器可以包装许多类,但是外观的意图是简化接口,而适配器是将接口转化成不同接口</div><div class=\"line\"> * 外观不只是简化了接口,也将客户从组件的子系统中解耦</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * ***************</div><div class=\"line\"> * 当需要使用一个现有的类而起接口并不符合你的需要时,就使用适配器</div><div class=\"line\"> * 当需要简化并统一一个很大的接口或是一群复杂的接口是,使用外观</div><div class=\"line\"> * 适配器改变接口符合客户的期望</div><div class=\"line\"> * 外观将客户从一个负责的子系统中解耦</div><div class=\"line\"> * 实现一个外观,需要将系统组合进外观中,然后工作委托给子系统执行</div><div class=\"line\"> * 适配器模式两种模式: 对象适配,类适配</div><div class=\"line\"> * 适配器将一个对象包装起来以改变其接口,装饰者将一个对象包装起来以增加新的行为和责任,而外观将一群对象包装起来简化其接口</div><div class=\"line\"> * ***************</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> */</div><div class=\"line\">public class FacadePattern &#123;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String args[]) &#123;</div><div class=\"line\">        //客户端调用</div><div class=\"line\">        OperationFacade facade = new OperationFacade();</div><div class=\"line\">        facade.run();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//外观</div><div class=\"line\">class OperationFacade &#123;</div><div class=\"line\"></div><div class=\"line\">    private SubSystemA subSystemA;</div><div class=\"line\">    private SubSystemB subSystemB;</div><div class=\"line\">    private SubSystemC subSystemC;</div><div class=\"line\"></div><div class=\"line\">    public OperationFacade() &#123;</div><div class=\"line\">        subSystemA = new subSystemAImpl();</div><div class=\"line\">        subSystemB = new subSystemBImpl();</div><div class=\"line\">        subSystemC = new SubSystemC();</div><div class=\"line\">    &#125;</div><div class=\"line\">    public void run() &#123;</div><div class=\"line\">        subSystemA.methodA();</div><div class=\"line\">        subSystemB.methodB();</div><div class=\"line\">        subSystemC.methodC();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">interface SubSystemA &#123;</div><div class=\"line\">    void methodA();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">interface SubSystemB &#123;</div><div class=\"line\">    void methodB();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class subSystemAImpl implements SubSystemA &#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void methodA() &#123;</div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;subSystemAImpl ==&gt; methodA&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class subSystemAAImpl implements SubSystemA &#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void methodA() &#123;</div><div class=\"line\">        System.out.println(&quot;subSystemAAImpl ==&gt; methodA&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class subSystemBImpl implements SubSystemB &#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void methodB() &#123;</div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;subSystemBImpl ==&gt; methodB&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class SubSystemC &#123;</div><div class=\"line\"></div><div class=\"line\">    public void methodC() &#123;</div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;subSystemC ==&gt; methodC&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h3 id=\"外观模式-提供一个统一的接口-用来访问子系统中的一群接口-外观定义类一个高层接口-让子系统更容易使用\"><a href=\"#外观模式-提供一个统一的接口-用来访问子系统中的一群接口-外观定义类一个高层接口-让子系统更容易使用\" class=\"headerlink\" title=\"外观模式:提供一个统一的接口,用来访问子系统中的一群接口,外观定义类一个高层接口,让子系统更容易使用\"></a>外观模式:提供一个统一的接口,用来访问子系统中的一群接口,外观定义类一个高层接口,让子系统更容易使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 外观模式:提供一个统一的接口,用来访问子系统中的一群接口,外观定义类一个高层接口,让子系统更容易使用</div><div class=\"line\"> * 外观和适配器可以包装许多类,但是外观的意图是简化接口,而适配器是将接口转化成不同接口</div><div class=\"line\"> * 外观不只是简化了接口,也将客户从组件的子系统中解耦</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * ***************</div><div class=\"line\"> * 当需要使用一个现有的类而起接口并不符合你的需要时,就使用适配器</div><div class=\"line\"> * 当需要简化并统一一个很大的接口或是一群复杂的接口是,使用外观</div><div class=\"line\"> * 适配器改变接口符合客户的期望</div><div class=\"line\"> * 外观将客户从一个负责的子系统中解耦</div><div class=\"line\"> * 实现一个外观,需要将系统组合进外观中,然后工作委托给子系统执行</div><div class=\"line\"> * 适配器模式两种模式: 对象适配,类适配</div><div class=\"line\"> * 适配器将一个对象包装起来以改变其接口,装饰者将一个对象包装起来以增加新的行为和责任,而外观将一群对象包装起来简化其接口</div><div class=\"line\"> * ***************</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> */</div><div class=\"line\">public class FacadePattern &#123;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String args[]) &#123;</div><div class=\"line\">        //客户端调用</div><div class=\"line\">        OperationFacade facade = new OperationFacade();</div><div class=\"line\">        facade.run();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//外观</div><div class=\"line\">class OperationFacade &#123;</div><div class=\"line\"></div><div class=\"line\">    private SubSystemA subSystemA;</div><div class=\"line\">    private SubSystemB subSystemB;</div><div class=\"line\">    private SubSystemC subSystemC;</div><div class=\"line\"></div><div class=\"line\">    public OperationFacade() &#123;</div><div class=\"line\">        subSystemA = new subSystemAImpl();</div><div class=\"line\">        subSystemB = new subSystemBImpl();</div><div class=\"line\">        subSystemC = new SubSystemC();</div><div class=\"line\">    &#125;</div><div class=\"line\">    public void run() &#123;</div><div class=\"line\">        subSystemA.methodA();</div><div class=\"line\">        subSystemB.methodB();</div><div class=\"line\">        subSystemC.methodC();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">interface SubSystemA &#123;</div><div class=\"line\">    void methodA();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">interface SubSystemB &#123;</div><div class=\"line\">    void methodB();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class subSystemAImpl implements SubSystemA &#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void methodA() &#123;</div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;subSystemAImpl ==&gt; methodA&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class subSystemAAImpl implements SubSystemA &#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void methodA() &#123;</div><div class=\"line\">        System.out.println(&quot;subSystemAAImpl ==&gt; methodA&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class subSystemBImpl implements SubSystemB &#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void methodB() &#123;</div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;subSystemBImpl ==&gt; methodB&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class SubSystemC &#123;</div><div class=\"line\"></div><div class=\"line\">    public void methodC() &#123;</div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;subSystemC ==&gt; methodC&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"设计模式工厂-不解释","date":"2017-03-10T09:11:09.000Z","layout":"clean-blog","slug":"设计模式工厂-不解释","_content":"\n###  工厂模式,工厂方法,抽象工厂\n\n```\n\n\n/**\n * 工厂模式 (将具体实例化具体的代码抽离或封装,组织为产品和产品族)\n * 产品:  汽车,电脑,手机\n * 产品族: 汽车零件也能是各个厂商,汽车生产厂家不能所有都是自己生产\n * 通过工厂(高层组件)组织产品(低层组件)或产品族 统一入口请求和返回,\n * 产品和创建者相对独立也可以说是两者都是平级关系,创建者依赖抽象产品\n *\n * 抽象工厂: 提供一个接口,用于创建相关或依赖对象的产品家族而不需要明确指定具体类\n * 工厂方法: 定义类一个创建对象的接口,有子类决定实例化哪一个.工厂方法让类实力化推迟到子类\n * 要点:\n * 1.所有的工厂都是用来封装对象的创建\n * 2.简单工厂,不是真正的设计模式,但仍不失为一个简单的方法,可以将客户程序解耦\n * 3.工厂方法使用继承: 把对象的创建委托给子类,子类实现工厂方法来创建对象\n * 4.抽象工厂使用对象组合:对象的创建被实现在工厂方法来创建对象\n * 5.所有工厂模式都通过减少应用程序和具体类之间的依赖促进松耦合\n * 6.工厂方法允许类实力化到子类进行\n * 7.抽象工厂创建相关的对象家族,不需要依赖它们具体类\n * 8.依赖倒置原则,指导我们避免依赖具体类型,而尽量依赖抽象\n * 9.工厂是很有威力的技巧,帮助我们针对抽象编程,而不是具体类编程\n *\n *场景介绍: 还是继续游戏吧(本游戏纯属虚构，如有雷同，纯属巧合)\n * 创建不同的种类的人物,不同工厂负责创建不同角色,不同角色拥有不同的武器和技能\n *\n */\npublic class FactoryPattern {\n\n\n    public static void main(String args[]){\n        System.out.println(\"-------------------simpleFactoryDemo-----------------------------\");\n        /**\n         * 简单工厂模式\n         * 基本实现人物和工厂之间松耦合,面向抽象编程\n         * */\n       simpleFactoryDemo();\n\n\n        System.out.println(\"-------------------factoryMethodDemo-----------------------------\");\n        /**\n         * 工厂方法\n         * 如果游戏的人物会在不同游戏中出现,在不同游戏中人物的属性也是不一样的\n         * 下面我们使用工厂方法来实现(定义类一个创建对象的接口,有子类决定实例化哪一个.工厂方法让类实力化推迟到子类)\n         * **/\n       factoryMethodDemo();\n\n        System.out.println(\"-------------------abstractFactoryDemo-----------------------------\");\n        /**\n         * 抽象工厂\n         * 我们上面创建的角色,只体现了角色本身属性,没有装备属性,下面我们一起来给人物装备上吧\n         * 提供一个接口,用于创建相关或依赖对象的产品家族而不需要明确指定具体类\n         * 1.需要定义一个人物装备接口,创建不同装备\n         * 2.GameRoleMan 加上装备属性\n         *\n         * **/\n        abstractFactoryDemo();\n\n    }\n\n\n    /**\n     * 简单工厂模式\n     * 基本实现人物和工厂之间松耦合,面向抽象编程\n     * */\n    public static void simpleFactoryDemo(){\n\n        SimpleFactory simpleFactory = new SimpleFactory();\n        SimpleFactoryGameRoleManStore simpleFactoryGameRoleManStore = new SimpleFactoryGameRoleManStore(simpleFactory);\n        GameRoleMan gameRoleManAngels = simpleFactoryGameRoleManStore.getGameRoleMan(\"Angels\");\n        GameRoleMan gameRoleManKing = simpleFactoryGameRoleManStore.getGameRoleMan(\"King\");\n\n        gameRoleManAngels.show();\n        gameRoleManKing.show();\n    }\n\n    /**\n     * 工厂方法\n     * 如果游戏的人物会在不同游戏中出现,在不同游戏中人物的属性也是不一样的\n     * 下面我们使用工厂方法来实现(定义类一个创建对象的接口,有子类决定实例化哪一个.工厂方法让类实力化推迟到子类)\n     * **/\n    public static void factoryMethodDemo(){\n\n        //英雄联盟\n        FactoryMethodGameRoleManStore yxlm = new   YXLM();\n        //蜀山传奇\n        FactoryMethodGameRoleManStore sscq = new SSCQ();\n\n        GameRoleMan gameRoleMan = yxlm.getGameRoleMan(\"Angels\");\n        gameRoleMan.show();\n        gameRoleMan = sscq.getGameRoleMan(\"Angels\");\n        gameRoleMan.show();\n\n    }\n\n    /**\n     * 抽象工厂\n     * 我们上面创建的角色,只体现了角色本身属性,没有装备属性,下面我们一起来给人物装备上吧\n     * 提供一个接口,用于创建相关或依赖对象的产品家族而不需要明确指定具体类\n     * 1.需要定义一个人物装备接口,创建不同装备\n     * 2.GameRoleMan 加上装备属性\n     * **/\n    public static void abstractFactoryDemo(){\n\n        //蜀山传奇\n        FactoryMethodGameRoleManStore sscq = new SSCQ();\n\n        GameRoleMan gameRoleMan = sscq.getGameRoleMan(\"DemonEqi\");\n        gameRoleMan.show();\n        gameRoleMan = sscq.getGameRoleMan(\"KingEqi\");\n        gameRoleMan.show();\n\n    }\n\n}\n\n\n//人物创建工厂\n/**\n * 1.简单工厂模式\n * **/\nclass SimpleFactory{\n\n\n    public  GameRoleMan createRoleMan(String type){\n        GameRoleMan gameRoleMan;\n        switch (type){\n            case \"King\":\n                gameRoleMan = new GameKing();\n                break;\n            case \"Angels\":\n                gameRoleMan = new GameAngels();\n                break;\n            case \"Demon\":\n                gameRoleMan = new GameDemon();\n                break;\n            default:\n                throw new NullPointerException(\"没有选择的角色\");\n        }\n        return gameRoleMan;\n    }\n\n}\n\n/**\n * 简单工厂游戏角色人物储备\n * */\n class SimpleFactoryGameRoleManStore{\n\n    SimpleFactory simpleFactory;\n\n    public SimpleFactoryGameRoleManStore(SimpleFactory simpleFactory){\n       this.simpleFactory = simpleFactory;\n    }\n\n    /**\n     * 不管最终游戏角色创建,这里只是负责展示\n     * */\n    public GameRoleMan getGameRoleMan(String type){\n         GameRoleMan gameRoleMan = simpleFactory.createRoleMan(type);\n         return gameRoleMan;\n    }\n\n}\n\n/**\n * 工厂方法游戏角色人物储备\n * 不同人物在不同游戏中展示方式\n * */\n abstract  class  FactoryMethodGameRoleManStore{\n\n    /**\n     * 不管最终游戏角色创建,这里只是负责返回\n     * */\n    public GameRoleMan getGameRoleMan(String type){\n        GameRoleMan gameRoleMan = createRoleMan(type);\n        return gameRoleMan;\n    }\n\n   protected abstract GameRoleMan createRoleMan(String type);\n}\n\n/**\n * 英雄联盟\n * */\nclass YXLM extends FactoryMethodGameRoleManStore{\n\n    @Override\n    protected GameRoleMan createRoleMan(String type) {\n        GameRoleMan gameRoleMan;\n        switch (type){\n            case \"King\":\n                gameRoleMan = new YXLMGameKing();\n                break;\n            case \"Angels\":\n                gameRoleMan = new YXLMGameAngels();\n                break;\n            case \"Demon\":\n                gameRoleMan = new YXLMGameDemon();\n                break;\n            default:\n                throw new NullPointerException(\"没有选择的角色\");\n        }\n        return gameRoleMan;\n    }\n}\n\n/**\n * 蜀山传奇\n * */\nclass SSCQ extends FactoryMethodGameRoleManStore{\n\n    @Override\n    protected GameRoleMan createRoleMan(String type) {\n        GameRoleMan gameRoleMan;\n        GameRoleManEquipmentFactory gameRoleManEquipmentFactory;\n        switch (type){\n            case \"King\":\n                gameRoleMan = new SSCQGameKing();\n                break;\n            //带装备的国王\n            case \"KingEqi\":\n                gameRoleManEquipmentFactory = new GameRoleManEquipmentFactorySSCQKing();\n                gameRoleMan = new SSCQGameKing(gameRoleManEquipmentFactory);\n                break;\n            case \"Angels\":\n                gameRoleMan = new SSCQGameAngels();\n                break;\n            case \"Demon\":\n                 gameRoleMan = new SSCQGameDemon();\n                break;\n            //带装备的恶魔\n            case \"DemonEqi\":\n                gameRoleManEquipmentFactory = new GameRoleManEquipmentFactorySSCQDemon();\n                gameRoleMan = new SSCQGameDemon(gameRoleManEquipmentFactory);\n                break;\n            default:\n                throw new NullPointerException(\"没有选择的角色\");\n        }\n        return gameRoleMan;\n    }\n}\n\n\n/**\n * 游戏角色装备\n * */\ninterface GameRoleManEquipment{\n\n  GameRoleManWeapon getGameRoleManWeapon();\n  GameRoleManDefense getGameRoleManDefense();\n\n}\n\n//装备工厂\nabstract class GameRoleManEquipmentFactory{\n\n     GameRoleManEquipment gameRoleManEquipment;\n     public GameRoleManEquipment gameRoleManEquipment(){\n         gameRoleManEquipment = createEquipment();\n         return gameRoleManEquipment;\n     }\n    abstract  GameRoleManEquipment createEquipment();\n\n}\n\n//演示例子中 只演示蜀山传奇(SSCQ) 国王\nclass GameRoleManEquipmentFactorySSCQKing extends GameRoleManEquipmentFactory implements GameRoleManEquipment{\n\n    @Override\n    GameRoleManEquipment createEquipment() {\n        return this;\n    }\n    @Override\n    public GameRoleManWeapon getGameRoleManWeapon() {\n        return    new GameRoleManWeaponKnife();\n    }\n\n    @Override\n    public GameRoleManDefense getGameRoleManDefense() {\n        return new GameRoleManDefenseClothes();\n    }\n}\n\n//演示例子中 只演示蜀山传奇(SSCQ) 恶魔\nclass GameRoleManEquipmentFactorySSCQDemon extends GameRoleManEquipmentFactory implements GameRoleManEquipment{\n\n    @Override\n    GameRoleManEquipment createEquipment() {\n        return this;\n    }\n    @Override\n    public GameRoleManWeapon getGameRoleManWeapon() {\n        return    new GameRoleManWeaponSword();\n    }\n\n    @Override\n    public GameRoleManDefense getGameRoleManDefense() {\n        return new GameRoleManDefenseRing();\n    }\n}\n\n\n/**\n * 游戏武器\n * */\ninterface GameRoleManWeapon{\n\n\n    //攻击\n    int getAtk();\n\n    //武器名称\n    String getName();\n\n    String describe();\n\n}\n\n/**\n * 游戏武器 刀\n * */\nclass GameRoleManWeaponKnife implements GameRoleManWeapon{\n    @Override\n    public int getAtk() {\n        return 1000;\n    }\n\n    @Override\n    public String getName() {\n        return \"金丝大环刀\";\n    }\n\n    @Override\n    public String describe() {\n        return getName()+\"攻击力\"+getAtk()+\"; 消铁如泥的宝刀\";\n    }\n}\n\n/**\n * 游戏武器 剑\n * */\nclass GameRoleManWeaponSword  implements GameRoleManWeapon{\n    @Override\n    public int getAtk() {\n        return 87973;\n    }\n\n    @Override\n    public String getName() {\n        return \"大宝剑\";\n    }\n\n    @Override\n    public String describe() {\n        return getName()+\"攻击力:\"+getAtk()+\"; 大宝剑很是强悍呀\";\n    }\n}\n\n\n/***\n * 游戏防御\n * */\ninterface GameRoleManDefense{\n\n\n    //防御力\n    int getDefense();\n\n    //防御名称\n    String getName();\n\n    String describe();\n}\n\n/***\n * 游戏防御 衣服\n * */\nclass GameRoleManDefenseClothes implements GameRoleManDefense{\n\n    @Override\n    public int getDefense() {\n        return 2123;\n    }\n\n    @Override\n    public String getName() {\n        return \"金丝铠甲\";\n    }\n\n    @Override\n    public String describe() {\n        return getName()+\" 防御力:\"+getDefense()+\" 很不错的衣服 \";\n    }\n}\n\n\n/***\n * 游戏防御 鞋子\n * */\nclass GameRoleManDefenseShoes implements GameRoleManDefense{\n\n    @Override\n    public int getDefense() {\n        return 200;\n    }\n\n    @Override\n    public String getName() {\n        return \"风靴\";\n    }\n\n    @Override\n    public String describe() {\n        return getName()+\" 防御力:\"+getDefense()+\" 穿上会很快 \";\n    }\n}\n\n/***\n * 游戏防御 戒指\n * */\nclass GameRoleManDefenseRing implements GameRoleManDefense{\n\n    @Override\n    public int getDefense() {\n        return 200;\n    }\n\n    @Override\n    public String getName() {\n        return \"魔戒\";\n    }\n\n    @Override\n    public String describe() {\n        return getName()+\" 防御力:\"+getDefense()+\" 带上后可以变身恶魔 \";\n    }\n}\n\n\n\n/**\n * 游戏人物基类\n *\n * */\nabstract class GameRoleMan{\n\n    //攻击武器\n    GameRoleManWeapon gameRoleManWeapon;\n\n    //防御武器\n    GameRoleManDefense  gameRoleManDefense;\n\n\n\n    public void GameRoleMan(String gameRoleMan, int atk) {\n        this.gameRoleMan = gameRoleMan;\n        this.atk = atk;\n    }\n\n    private String gameRoleMan;\n\n    protected int atk;\n\n    /**\n     * 角色技能\n     * */\n   public abstract Object ability();\n\n\n    //最终展示\n    public void show(){\n\n\n\n        System.out.println(\"角色名称:\"+gameRoleMan+\",拥有技能\"+ability()+\";攻击力\"+atk);\n\n        if(gameRoleManWeapon!=null){\n            System.out.println(gameRoleManWeapon.describe());\n        }\n        if(gameRoleManDefense!=null){\n            System.out.println(gameRoleManDefense.describe());\n        }\n\n    }\n\n\n}\n\n/**\n * 国王\n * */\nclass GameKing extends GameRoleMan{\n\n\n    public GameKing(){\n       this.GameRoleMan(\"国王\",100);\n    }\n\n    @Override\n    public  Object ability() {\n        return \"我是国王,我会发冲击波\";\n    }\n}\n\n/**\n * 天使\n * */\nclass GameAngels extends GameRoleMan{\n\n\n    public GameAngels(){\n        this.GameRoleMan(\"天使\",120);\n    }\n\n\n    @Override\n    public  Object ability() {\n        return \"我是天使,我会飞\";\n    }\n}\n\n/**\n * 恶魔\n * */\nclass GameDemon extends GameRoleMan{\n\n\n    public GameDemon(){\n        this.GameRoleMan(\"恶魔\",130);\n    }\n\n    @Override\n    public  Object ability() {\n        return \"我是恶魔,我会打人\";\n    }\n}\n\n\n/**\n * 国王\n * */\nclass YXLMGameKing extends GameRoleMan{\n\n\n    public YXLMGameKing(){\n        this.GameRoleMan(\"英雄联盟国王\",100);\n    }\n\n    @Override\n    public  Object ability() {\n        return \"我是英雄联盟国王,我会发冲击波\";\n    }\n}\n\n/**\n * 天使\n * */\nclass YXLMGameAngels extends GameRoleMan{\n\n\n    public YXLMGameAngels(){\n        this.GameRoleMan(\"英雄联盟天使\",120);\n    }\n\n\n    @Override\n    public  Object ability() {\n        return \"我是英雄联盟天使,我会飞\";\n    }\n}\n\n/**\n * 恶魔\n * */\nclass YXLMGameDemon extends GameRoleMan{\n\n\n    public YXLMGameDemon(){\n        this.GameRoleMan(\"英雄联盟恶魔\",130);\n    }\n\n    @Override\n    public  Object ability() {\n        return \"我是英雄联盟恶魔,我会打人\";\n    }\n}\n\n\n/**\n * 国王\n * */\nclass SSCQGameKing extends GameRoleMan{\n    GameRoleManEquipmentFactory gameRoleManEquipmentFactory;\n    public SSCQGameKing(GameRoleManEquipmentFactory gameRoleManEquipmentFactory){\n\n        this.GameRoleMan(\"蜀山传奇国王\",100);\n        this.gameRoleManEquipmentFactory= gameRoleManEquipmentFactory;\n    }\n\n    public SSCQGameKing(){\n        this.GameRoleMan(\"蜀山传奇国王\",100);\n    }\n\n    @Override\n    public  Object ability() {\n        GameRoleManEquipment gameRoleManEquipment=  gameRoleManEquipmentFactory.gameRoleManEquipment();\n        this.gameRoleManDefense = gameRoleManEquipment.getGameRoleManDefense();\n        this.gameRoleManWeapon = gameRoleManEquipment.getGameRoleManWeapon();\n        this.atk =  gameRoleManWeapon.getAtk()+atk;\n        return \"我是蜀山传奇国王,我会发冲击波\";\n    }\n}\n\n/**\n * 天使\n * */\nclass SSCQGameAngels extends GameRoleMan{\n\n\n    public SSCQGameAngels(){\n        this.GameRoleMan(\"蜀山传奇天使\",120);\n    }\n\n\n    @Override\n    public  Object ability() {\n        return \"我是蜀山传奇天使,我会飞\";\n    }\n}\n\n/**\n * 恶魔\n * */\nclass SSCQGameDemon extends GameRoleMan{\n\n    GameRoleManEquipmentFactory gameRoleManEquipmentFactory;\n\n    public SSCQGameDemon(GameRoleManEquipmentFactory gameRoleManEquipmentFactory){\n        this.GameRoleMan(\"蜀山传奇恶魔\",130);\n        this.gameRoleManEquipmentFactory= gameRoleManEquipmentFactory;\n    }\n\n    public SSCQGameDemon(){\n        this.GameRoleMan(\"蜀山传奇恶魔\",130);\n    }\n\n\n    @Override\n    public  Object ability() {\n\n        GameRoleManEquipment gameRoleManEquipment=  gameRoleManEquipmentFactory.gameRoleManEquipment();\n        this.gameRoleManDefense = gameRoleManEquipment.getGameRoleManDefense();\n        this.gameRoleManWeapon = gameRoleManEquipment.getGameRoleManWeapon();\n         this.atk =atk+ gameRoleManWeapon.getAtk();\n        return \"我是蜀山传奇恶魔,我会打人\";\n    }\n}\n\n\n```\n","source":"_posts/设计模式工厂-不解释.md","raw":"---\ntitle: 设计模式工厂-不解释\ndate: 2017-03-10 17:11:09\ntags: 设计模式\nlayout: clean-blog\nslug: FactoryPattern\n\n---\n\n###  工厂模式,工厂方法,抽象工厂\n\n```\n\n\n/**\n * 工厂模式 (将具体实例化具体的代码抽离或封装,组织为产品和产品族)\n * 产品:  汽车,电脑,手机\n * 产品族: 汽车零件也能是各个厂商,汽车生产厂家不能所有都是自己生产\n * 通过工厂(高层组件)组织产品(低层组件)或产品族 统一入口请求和返回,\n * 产品和创建者相对独立也可以说是两者都是平级关系,创建者依赖抽象产品\n *\n * 抽象工厂: 提供一个接口,用于创建相关或依赖对象的产品家族而不需要明确指定具体类\n * 工厂方法: 定义类一个创建对象的接口,有子类决定实例化哪一个.工厂方法让类实力化推迟到子类\n * 要点:\n * 1.所有的工厂都是用来封装对象的创建\n * 2.简单工厂,不是真正的设计模式,但仍不失为一个简单的方法,可以将客户程序解耦\n * 3.工厂方法使用继承: 把对象的创建委托给子类,子类实现工厂方法来创建对象\n * 4.抽象工厂使用对象组合:对象的创建被实现在工厂方法来创建对象\n * 5.所有工厂模式都通过减少应用程序和具体类之间的依赖促进松耦合\n * 6.工厂方法允许类实力化到子类进行\n * 7.抽象工厂创建相关的对象家族,不需要依赖它们具体类\n * 8.依赖倒置原则,指导我们避免依赖具体类型,而尽量依赖抽象\n * 9.工厂是很有威力的技巧,帮助我们针对抽象编程,而不是具体类编程\n *\n *场景介绍: 还是继续游戏吧(本游戏纯属虚构，如有雷同，纯属巧合)\n * 创建不同的种类的人物,不同工厂负责创建不同角色,不同角色拥有不同的武器和技能\n *\n */\npublic class FactoryPattern {\n\n\n    public static void main(String args[]){\n        System.out.println(\"-------------------simpleFactoryDemo-----------------------------\");\n        /**\n         * 简单工厂模式\n         * 基本实现人物和工厂之间松耦合,面向抽象编程\n         * */\n       simpleFactoryDemo();\n\n\n        System.out.println(\"-------------------factoryMethodDemo-----------------------------\");\n        /**\n         * 工厂方法\n         * 如果游戏的人物会在不同游戏中出现,在不同游戏中人物的属性也是不一样的\n         * 下面我们使用工厂方法来实现(定义类一个创建对象的接口,有子类决定实例化哪一个.工厂方法让类实力化推迟到子类)\n         * **/\n       factoryMethodDemo();\n\n        System.out.println(\"-------------------abstractFactoryDemo-----------------------------\");\n        /**\n         * 抽象工厂\n         * 我们上面创建的角色,只体现了角色本身属性,没有装备属性,下面我们一起来给人物装备上吧\n         * 提供一个接口,用于创建相关或依赖对象的产品家族而不需要明确指定具体类\n         * 1.需要定义一个人物装备接口,创建不同装备\n         * 2.GameRoleMan 加上装备属性\n         *\n         * **/\n        abstractFactoryDemo();\n\n    }\n\n\n    /**\n     * 简单工厂模式\n     * 基本实现人物和工厂之间松耦合,面向抽象编程\n     * */\n    public static void simpleFactoryDemo(){\n\n        SimpleFactory simpleFactory = new SimpleFactory();\n        SimpleFactoryGameRoleManStore simpleFactoryGameRoleManStore = new SimpleFactoryGameRoleManStore(simpleFactory);\n        GameRoleMan gameRoleManAngels = simpleFactoryGameRoleManStore.getGameRoleMan(\"Angels\");\n        GameRoleMan gameRoleManKing = simpleFactoryGameRoleManStore.getGameRoleMan(\"King\");\n\n        gameRoleManAngels.show();\n        gameRoleManKing.show();\n    }\n\n    /**\n     * 工厂方法\n     * 如果游戏的人物会在不同游戏中出现,在不同游戏中人物的属性也是不一样的\n     * 下面我们使用工厂方法来实现(定义类一个创建对象的接口,有子类决定实例化哪一个.工厂方法让类实力化推迟到子类)\n     * **/\n    public static void factoryMethodDemo(){\n\n        //英雄联盟\n        FactoryMethodGameRoleManStore yxlm = new   YXLM();\n        //蜀山传奇\n        FactoryMethodGameRoleManStore sscq = new SSCQ();\n\n        GameRoleMan gameRoleMan = yxlm.getGameRoleMan(\"Angels\");\n        gameRoleMan.show();\n        gameRoleMan = sscq.getGameRoleMan(\"Angels\");\n        gameRoleMan.show();\n\n    }\n\n    /**\n     * 抽象工厂\n     * 我们上面创建的角色,只体现了角色本身属性,没有装备属性,下面我们一起来给人物装备上吧\n     * 提供一个接口,用于创建相关或依赖对象的产品家族而不需要明确指定具体类\n     * 1.需要定义一个人物装备接口,创建不同装备\n     * 2.GameRoleMan 加上装备属性\n     * **/\n    public static void abstractFactoryDemo(){\n\n        //蜀山传奇\n        FactoryMethodGameRoleManStore sscq = new SSCQ();\n\n        GameRoleMan gameRoleMan = sscq.getGameRoleMan(\"DemonEqi\");\n        gameRoleMan.show();\n        gameRoleMan = sscq.getGameRoleMan(\"KingEqi\");\n        gameRoleMan.show();\n\n    }\n\n}\n\n\n//人物创建工厂\n/**\n * 1.简单工厂模式\n * **/\nclass SimpleFactory{\n\n\n    public  GameRoleMan createRoleMan(String type){\n        GameRoleMan gameRoleMan;\n        switch (type){\n            case \"King\":\n                gameRoleMan = new GameKing();\n                break;\n            case \"Angels\":\n                gameRoleMan = new GameAngels();\n                break;\n            case \"Demon\":\n                gameRoleMan = new GameDemon();\n                break;\n            default:\n                throw new NullPointerException(\"没有选择的角色\");\n        }\n        return gameRoleMan;\n    }\n\n}\n\n/**\n * 简单工厂游戏角色人物储备\n * */\n class SimpleFactoryGameRoleManStore{\n\n    SimpleFactory simpleFactory;\n\n    public SimpleFactoryGameRoleManStore(SimpleFactory simpleFactory){\n       this.simpleFactory = simpleFactory;\n    }\n\n    /**\n     * 不管最终游戏角色创建,这里只是负责展示\n     * */\n    public GameRoleMan getGameRoleMan(String type){\n         GameRoleMan gameRoleMan = simpleFactory.createRoleMan(type);\n         return gameRoleMan;\n    }\n\n}\n\n/**\n * 工厂方法游戏角色人物储备\n * 不同人物在不同游戏中展示方式\n * */\n abstract  class  FactoryMethodGameRoleManStore{\n\n    /**\n     * 不管最终游戏角色创建,这里只是负责返回\n     * */\n    public GameRoleMan getGameRoleMan(String type){\n        GameRoleMan gameRoleMan = createRoleMan(type);\n        return gameRoleMan;\n    }\n\n   protected abstract GameRoleMan createRoleMan(String type);\n}\n\n/**\n * 英雄联盟\n * */\nclass YXLM extends FactoryMethodGameRoleManStore{\n\n    @Override\n    protected GameRoleMan createRoleMan(String type) {\n        GameRoleMan gameRoleMan;\n        switch (type){\n            case \"King\":\n                gameRoleMan = new YXLMGameKing();\n                break;\n            case \"Angels\":\n                gameRoleMan = new YXLMGameAngels();\n                break;\n            case \"Demon\":\n                gameRoleMan = new YXLMGameDemon();\n                break;\n            default:\n                throw new NullPointerException(\"没有选择的角色\");\n        }\n        return gameRoleMan;\n    }\n}\n\n/**\n * 蜀山传奇\n * */\nclass SSCQ extends FactoryMethodGameRoleManStore{\n\n    @Override\n    protected GameRoleMan createRoleMan(String type) {\n        GameRoleMan gameRoleMan;\n        GameRoleManEquipmentFactory gameRoleManEquipmentFactory;\n        switch (type){\n            case \"King\":\n                gameRoleMan = new SSCQGameKing();\n                break;\n            //带装备的国王\n            case \"KingEqi\":\n                gameRoleManEquipmentFactory = new GameRoleManEquipmentFactorySSCQKing();\n                gameRoleMan = new SSCQGameKing(gameRoleManEquipmentFactory);\n                break;\n            case \"Angels\":\n                gameRoleMan = new SSCQGameAngels();\n                break;\n            case \"Demon\":\n                 gameRoleMan = new SSCQGameDemon();\n                break;\n            //带装备的恶魔\n            case \"DemonEqi\":\n                gameRoleManEquipmentFactory = new GameRoleManEquipmentFactorySSCQDemon();\n                gameRoleMan = new SSCQGameDemon(gameRoleManEquipmentFactory);\n                break;\n            default:\n                throw new NullPointerException(\"没有选择的角色\");\n        }\n        return gameRoleMan;\n    }\n}\n\n\n/**\n * 游戏角色装备\n * */\ninterface GameRoleManEquipment{\n\n  GameRoleManWeapon getGameRoleManWeapon();\n  GameRoleManDefense getGameRoleManDefense();\n\n}\n\n//装备工厂\nabstract class GameRoleManEquipmentFactory{\n\n     GameRoleManEquipment gameRoleManEquipment;\n     public GameRoleManEquipment gameRoleManEquipment(){\n         gameRoleManEquipment = createEquipment();\n         return gameRoleManEquipment;\n     }\n    abstract  GameRoleManEquipment createEquipment();\n\n}\n\n//演示例子中 只演示蜀山传奇(SSCQ) 国王\nclass GameRoleManEquipmentFactorySSCQKing extends GameRoleManEquipmentFactory implements GameRoleManEquipment{\n\n    @Override\n    GameRoleManEquipment createEquipment() {\n        return this;\n    }\n    @Override\n    public GameRoleManWeapon getGameRoleManWeapon() {\n        return    new GameRoleManWeaponKnife();\n    }\n\n    @Override\n    public GameRoleManDefense getGameRoleManDefense() {\n        return new GameRoleManDefenseClothes();\n    }\n}\n\n//演示例子中 只演示蜀山传奇(SSCQ) 恶魔\nclass GameRoleManEquipmentFactorySSCQDemon extends GameRoleManEquipmentFactory implements GameRoleManEquipment{\n\n    @Override\n    GameRoleManEquipment createEquipment() {\n        return this;\n    }\n    @Override\n    public GameRoleManWeapon getGameRoleManWeapon() {\n        return    new GameRoleManWeaponSword();\n    }\n\n    @Override\n    public GameRoleManDefense getGameRoleManDefense() {\n        return new GameRoleManDefenseRing();\n    }\n}\n\n\n/**\n * 游戏武器\n * */\ninterface GameRoleManWeapon{\n\n\n    //攻击\n    int getAtk();\n\n    //武器名称\n    String getName();\n\n    String describe();\n\n}\n\n/**\n * 游戏武器 刀\n * */\nclass GameRoleManWeaponKnife implements GameRoleManWeapon{\n    @Override\n    public int getAtk() {\n        return 1000;\n    }\n\n    @Override\n    public String getName() {\n        return \"金丝大环刀\";\n    }\n\n    @Override\n    public String describe() {\n        return getName()+\"攻击力\"+getAtk()+\"; 消铁如泥的宝刀\";\n    }\n}\n\n/**\n * 游戏武器 剑\n * */\nclass GameRoleManWeaponSword  implements GameRoleManWeapon{\n    @Override\n    public int getAtk() {\n        return 87973;\n    }\n\n    @Override\n    public String getName() {\n        return \"大宝剑\";\n    }\n\n    @Override\n    public String describe() {\n        return getName()+\"攻击力:\"+getAtk()+\"; 大宝剑很是强悍呀\";\n    }\n}\n\n\n/***\n * 游戏防御\n * */\ninterface GameRoleManDefense{\n\n\n    //防御力\n    int getDefense();\n\n    //防御名称\n    String getName();\n\n    String describe();\n}\n\n/***\n * 游戏防御 衣服\n * */\nclass GameRoleManDefenseClothes implements GameRoleManDefense{\n\n    @Override\n    public int getDefense() {\n        return 2123;\n    }\n\n    @Override\n    public String getName() {\n        return \"金丝铠甲\";\n    }\n\n    @Override\n    public String describe() {\n        return getName()+\" 防御力:\"+getDefense()+\" 很不错的衣服 \";\n    }\n}\n\n\n/***\n * 游戏防御 鞋子\n * */\nclass GameRoleManDefenseShoes implements GameRoleManDefense{\n\n    @Override\n    public int getDefense() {\n        return 200;\n    }\n\n    @Override\n    public String getName() {\n        return \"风靴\";\n    }\n\n    @Override\n    public String describe() {\n        return getName()+\" 防御力:\"+getDefense()+\" 穿上会很快 \";\n    }\n}\n\n/***\n * 游戏防御 戒指\n * */\nclass GameRoleManDefenseRing implements GameRoleManDefense{\n\n    @Override\n    public int getDefense() {\n        return 200;\n    }\n\n    @Override\n    public String getName() {\n        return \"魔戒\";\n    }\n\n    @Override\n    public String describe() {\n        return getName()+\" 防御力:\"+getDefense()+\" 带上后可以变身恶魔 \";\n    }\n}\n\n\n\n/**\n * 游戏人物基类\n *\n * */\nabstract class GameRoleMan{\n\n    //攻击武器\n    GameRoleManWeapon gameRoleManWeapon;\n\n    //防御武器\n    GameRoleManDefense  gameRoleManDefense;\n\n\n\n    public void GameRoleMan(String gameRoleMan, int atk) {\n        this.gameRoleMan = gameRoleMan;\n        this.atk = atk;\n    }\n\n    private String gameRoleMan;\n\n    protected int atk;\n\n    /**\n     * 角色技能\n     * */\n   public abstract Object ability();\n\n\n    //最终展示\n    public void show(){\n\n\n\n        System.out.println(\"角色名称:\"+gameRoleMan+\",拥有技能\"+ability()+\";攻击力\"+atk);\n\n        if(gameRoleManWeapon!=null){\n            System.out.println(gameRoleManWeapon.describe());\n        }\n        if(gameRoleManDefense!=null){\n            System.out.println(gameRoleManDefense.describe());\n        }\n\n    }\n\n\n}\n\n/**\n * 国王\n * */\nclass GameKing extends GameRoleMan{\n\n\n    public GameKing(){\n       this.GameRoleMan(\"国王\",100);\n    }\n\n    @Override\n    public  Object ability() {\n        return \"我是国王,我会发冲击波\";\n    }\n}\n\n/**\n * 天使\n * */\nclass GameAngels extends GameRoleMan{\n\n\n    public GameAngels(){\n        this.GameRoleMan(\"天使\",120);\n    }\n\n\n    @Override\n    public  Object ability() {\n        return \"我是天使,我会飞\";\n    }\n}\n\n/**\n * 恶魔\n * */\nclass GameDemon extends GameRoleMan{\n\n\n    public GameDemon(){\n        this.GameRoleMan(\"恶魔\",130);\n    }\n\n    @Override\n    public  Object ability() {\n        return \"我是恶魔,我会打人\";\n    }\n}\n\n\n/**\n * 国王\n * */\nclass YXLMGameKing extends GameRoleMan{\n\n\n    public YXLMGameKing(){\n        this.GameRoleMan(\"英雄联盟国王\",100);\n    }\n\n    @Override\n    public  Object ability() {\n        return \"我是英雄联盟国王,我会发冲击波\";\n    }\n}\n\n/**\n * 天使\n * */\nclass YXLMGameAngels extends GameRoleMan{\n\n\n    public YXLMGameAngels(){\n        this.GameRoleMan(\"英雄联盟天使\",120);\n    }\n\n\n    @Override\n    public  Object ability() {\n        return \"我是英雄联盟天使,我会飞\";\n    }\n}\n\n/**\n * 恶魔\n * */\nclass YXLMGameDemon extends GameRoleMan{\n\n\n    public YXLMGameDemon(){\n        this.GameRoleMan(\"英雄联盟恶魔\",130);\n    }\n\n    @Override\n    public  Object ability() {\n        return \"我是英雄联盟恶魔,我会打人\";\n    }\n}\n\n\n/**\n * 国王\n * */\nclass SSCQGameKing extends GameRoleMan{\n    GameRoleManEquipmentFactory gameRoleManEquipmentFactory;\n    public SSCQGameKing(GameRoleManEquipmentFactory gameRoleManEquipmentFactory){\n\n        this.GameRoleMan(\"蜀山传奇国王\",100);\n        this.gameRoleManEquipmentFactory= gameRoleManEquipmentFactory;\n    }\n\n    public SSCQGameKing(){\n        this.GameRoleMan(\"蜀山传奇国王\",100);\n    }\n\n    @Override\n    public  Object ability() {\n        GameRoleManEquipment gameRoleManEquipment=  gameRoleManEquipmentFactory.gameRoleManEquipment();\n        this.gameRoleManDefense = gameRoleManEquipment.getGameRoleManDefense();\n        this.gameRoleManWeapon = gameRoleManEquipment.getGameRoleManWeapon();\n        this.atk =  gameRoleManWeapon.getAtk()+atk;\n        return \"我是蜀山传奇国王,我会发冲击波\";\n    }\n}\n\n/**\n * 天使\n * */\nclass SSCQGameAngels extends GameRoleMan{\n\n\n    public SSCQGameAngels(){\n        this.GameRoleMan(\"蜀山传奇天使\",120);\n    }\n\n\n    @Override\n    public  Object ability() {\n        return \"我是蜀山传奇天使,我会飞\";\n    }\n}\n\n/**\n * 恶魔\n * */\nclass SSCQGameDemon extends GameRoleMan{\n\n    GameRoleManEquipmentFactory gameRoleManEquipmentFactory;\n\n    public SSCQGameDemon(GameRoleManEquipmentFactory gameRoleManEquipmentFactory){\n        this.GameRoleMan(\"蜀山传奇恶魔\",130);\n        this.gameRoleManEquipmentFactory= gameRoleManEquipmentFactory;\n    }\n\n    public SSCQGameDemon(){\n        this.GameRoleMan(\"蜀山传奇恶魔\",130);\n    }\n\n\n    @Override\n    public  Object ability() {\n\n        GameRoleManEquipment gameRoleManEquipment=  gameRoleManEquipmentFactory.gameRoleManEquipment();\n        this.gameRoleManDefense = gameRoleManEquipment.getGameRoleManDefense();\n        this.gameRoleManWeapon = gameRoleManEquipment.getGameRoleManWeapon();\n         this.atk =atk+ gameRoleManWeapon.getAtk();\n        return \"我是蜀山传奇恶魔,我会打人\";\n    }\n}\n\n\n```\n","published":1,"updated":"2017-03-10T09:29:33.000Z","comments":1,"photos":[],"link":"","_id":"cj0uc8d0k000key5rcwyl2qdu","content":"<h3 id=\"工厂模式-工厂方法-抽象工厂\"><a href=\"#工厂模式-工厂方法-抽象工厂\" class=\"headerlink\" title=\"工厂模式,工厂方法,抽象工厂\"></a>工厂模式,工厂方法,抽象工厂</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div><div class=\"line\">364</div><div class=\"line\">365</div><div class=\"line\">366</div><div class=\"line\">367</div><div class=\"line\">368</div><div class=\"line\">369</div><div class=\"line\">370</div><div class=\"line\">371</div><div class=\"line\">372</div><div class=\"line\">373</div><div class=\"line\">374</div><div class=\"line\">375</div><div class=\"line\">376</div><div class=\"line\">377</div><div class=\"line\">378</div><div class=\"line\">379</div><div class=\"line\">380</div><div class=\"line\">381</div><div class=\"line\">382</div><div class=\"line\">383</div><div class=\"line\">384</div><div class=\"line\">385</div><div class=\"line\">386</div><div class=\"line\">387</div><div class=\"line\">388</div><div class=\"line\">389</div><div class=\"line\">390</div><div class=\"line\">391</div><div class=\"line\">392</div><div class=\"line\">393</div><div class=\"line\">394</div><div class=\"line\">395</div><div class=\"line\">396</div><div class=\"line\">397</div><div class=\"line\">398</div><div class=\"line\">399</div><div class=\"line\">400</div><div class=\"line\">401</div><div class=\"line\">402</div><div class=\"line\">403</div><div class=\"line\">404</div><div class=\"line\">405</div><div class=\"line\">406</div><div class=\"line\">407</div><div class=\"line\">408</div><div class=\"line\">409</div><div class=\"line\">410</div><div class=\"line\">411</div><div class=\"line\">412</div><div class=\"line\">413</div><div class=\"line\">414</div><div class=\"line\">415</div><div class=\"line\">416</div><div class=\"line\">417</div><div class=\"line\">418</div><div class=\"line\">419</div><div class=\"line\">420</div><div class=\"line\">421</div><div class=\"line\">422</div><div class=\"line\">423</div><div class=\"line\">424</div><div class=\"line\">425</div><div class=\"line\">426</div><div class=\"line\">427</div><div class=\"line\">428</div><div class=\"line\">429</div><div class=\"line\">430</div><div class=\"line\">431</div><div class=\"line\">432</div><div class=\"line\">433</div><div class=\"line\">434</div><div class=\"line\">435</div><div class=\"line\">436</div><div class=\"line\">437</div><div class=\"line\">438</div><div class=\"line\">439</div><div class=\"line\">440</div><div class=\"line\">441</div><div class=\"line\">442</div><div class=\"line\">443</div><div class=\"line\">444</div><div class=\"line\">445</div><div class=\"line\">446</div><div class=\"line\">447</div><div class=\"line\">448</div><div class=\"line\">449</div><div class=\"line\">450</div><div class=\"line\">451</div><div class=\"line\">452</div><div class=\"line\">453</div><div class=\"line\">454</div><div class=\"line\">455</div><div class=\"line\">456</div><div class=\"line\">457</div><div class=\"line\">458</div><div class=\"line\">459</div><div class=\"line\">460</div><div class=\"line\">461</div><div class=\"line\">462</div><div class=\"line\">463</div><div class=\"line\">464</div><div class=\"line\">465</div><div class=\"line\">466</div><div class=\"line\">467</div><div class=\"line\">468</div><div class=\"line\">469</div><div class=\"line\">470</div><div class=\"line\">471</div><div class=\"line\">472</div><div class=\"line\">473</div><div class=\"line\">474</div><div class=\"line\">475</div><div class=\"line\">476</div><div class=\"line\">477</div><div class=\"line\">478</div><div class=\"line\">479</div><div class=\"line\">480</div><div class=\"line\">481</div><div class=\"line\">482</div><div class=\"line\">483</div><div class=\"line\">484</div><div class=\"line\">485</div><div class=\"line\">486</div><div class=\"line\">487</div><div class=\"line\">488</div><div class=\"line\">489</div><div class=\"line\">490</div><div class=\"line\">491</div><div class=\"line\">492</div><div class=\"line\">493</div><div class=\"line\">494</div><div class=\"line\">495</div><div class=\"line\">496</div><div class=\"line\">497</div><div class=\"line\">498</div><div class=\"line\">499</div><div class=\"line\">500</div><div class=\"line\">501</div><div class=\"line\">502</div><div class=\"line\">503</div><div class=\"line\">504</div><div class=\"line\">505</div><div class=\"line\">506</div><div class=\"line\">507</div><div class=\"line\">508</div><div class=\"line\">509</div><div class=\"line\">510</div><div class=\"line\">511</div><div class=\"line\">512</div><div class=\"line\">513</div><div class=\"line\">514</div><div class=\"line\">515</div><div class=\"line\">516</div><div class=\"line\">517</div><div class=\"line\">518</div><div class=\"line\">519</div><div class=\"line\">520</div><div class=\"line\">521</div><div class=\"line\">522</div><div class=\"line\">523</div><div class=\"line\">524</div><div class=\"line\">525</div><div class=\"line\">526</div><div class=\"line\">527</div><div class=\"line\">528</div><div class=\"line\">529</div><div class=\"line\">530</div><div class=\"line\">531</div><div class=\"line\">532</div><div class=\"line\">533</div><div class=\"line\">534</div><div class=\"line\">535</div><div class=\"line\">536</div><div class=\"line\">537</div><div class=\"line\">538</div><div class=\"line\">539</div><div class=\"line\">540</div><div class=\"line\">541</div><div class=\"line\">542</div><div class=\"line\">543</div><div class=\"line\">544</div><div class=\"line\">545</div><div class=\"line\">546</div><div class=\"line\">547</div><div class=\"line\">548</div><div class=\"line\">549</div><div class=\"line\">550</div><div class=\"line\">551</div><div class=\"line\">552</div><div class=\"line\">553</div><div class=\"line\">554</div><div class=\"line\">555</div><div class=\"line\">556</div><div class=\"line\">557</div><div class=\"line\">558</div><div class=\"line\">559</div><div class=\"line\">560</div><div class=\"line\">561</div><div class=\"line\">562</div><div class=\"line\">563</div><div class=\"line\">564</div><div class=\"line\">565</div><div class=\"line\">566</div><div class=\"line\">567</div><div class=\"line\">568</div><div class=\"line\">569</div><div class=\"line\">570</div><div class=\"line\">571</div><div class=\"line\">572</div><div class=\"line\">573</div><div class=\"line\">574</div><div class=\"line\">575</div><div class=\"line\">576</div><div class=\"line\">577</div><div class=\"line\">578</div><div class=\"line\">579</div><div class=\"line\">580</div><div class=\"line\">581</div><div class=\"line\">582</div><div class=\"line\">583</div><div class=\"line\">584</div><div class=\"line\">585</div><div class=\"line\">586</div><div class=\"line\">587</div><div class=\"line\">588</div><div class=\"line\">589</div><div class=\"line\">590</div><div class=\"line\">591</div><div class=\"line\">592</div><div class=\"line\">593</div><div class=\"line\">594</div><div class=\"line\">595</div><div class=\"line\">596</div><div class=\"line\">597</div><div class=\"line\">598</div><div class=\"line\">599</div><div class=\"line\">600</div><div class=\"line\">601</div><div class=\"line\">602</div><div class=\"line\">603</div><div class=\"line\">604</div><div class=\"line\">605</div><div class=\"line\">606</div><div class=\"line\">607</div><div class=\"line\">608</div><div class=\"line\">609</div><div class=\"line\">610</div><div class=\"line\">611</div><div class=\"line\">612</div><div class=\"line\">613</div><div class=\"line\">614</div><div class=\"line\">615</div><div class=\"line\">616</div><div class=\"line\">617</div><div class=\"line\">618</div><div class=\"line\">619</div><div class=\"line\">620</div><div class=\"line\">621</div><div class=\"line\">622</div><div class=\"line\">623</div><div class=\"line\">624</div><div class=\"line\">625</div><div class=\"line\">626</div><div class=\"line\">627</div><div class=\"line\">628</div><div class=\"line\">629</div><div class=\"line\">630</div><div class=\"line\">631</div><div class=\"line\">632</div><div class=\"line\">633</div><div class=\"line\">634</div><div class=\"line\">635</div><div class=\"line\">636</div><div class=\"line\">637</div><div class=\"line\">638</div><div class=\"line\">639</div><div class=\"line\">640</div><div class=\"line\">641</div><div class=\"line\">642</div><div class=\"line\">643</div><div class=\"line\">644</div><div class=\"line\">645</div><div class=\"line\">646</div><div class=\"line\">647</div><div class=\"line\">648</div><div class=\"line\">649</div><div class=\"line\">650</div><div class=\"line\">651</div><div class=\"line\">652</div><div class=\"line\">653</div><div class=\"line\">654</div><div class=\"line\">655</div><div class=\"line\">656</div><div class=\"line\">657</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 工厂模式 (将具体实例化具体的代码抽离或封装,组织为产品和产品族)</div><div class=\"line\"> * 产品:  汽车,电脑,手机</div><div class=\"line\"> * 产品族: 汽车零件也能是各个厂商,汽车生产厂家不能所有都是自己生产</div><div class=\"line\"> * 通过工厂(高层组件)组织产品(低层组件)或产品族 统一入口请求和返回,</div><div class=\"line\"> * 产品和创建者相对独立也可以说是两者都是平级关系,创建者依赖抽象产品</div><div class=\"line\"> *</div><div class=\"line\"> * 抽象工厂: 提供一个接口,用于创建相关或依赖对象的产品家族而不需要明确指定具体类</div><div class=\"line\"> * 工厂方法: 定义类一个创建对象的接口,有子类决定实例化哪一个.工厂方法让类实力化推迟到子类</div><div class=\"line\"> * 要点:</div><div class=\"line\"> * 1.所有的工厂都是用来封装对象的创建</div><div class=\"line\"> * 2.简单工厂,不是真正的设计模式,但仍不失为一个简单的方法,可以将客户程序解耦</div><div class=\"line\"> * 3.工厂方法使用继承: 把对象的创建委托给子类,子类实现工厂方法来创建对象</div><div class=\"line\"> * 4.抽象工厂使用对象组合:对象的创建被实现在工厂方法来创建对象</div><div class=\"line\"> * 5.所有工厂模式都通过减少应用程序和具体类之间的依赖促进松耦合</div><div class=\"line\"> * 6.工厂方法允许类实力化到子类进行</div><div class=\"line\"> * 7.抽象工厂创建相关的对象家族,不需要依赖它们具体类</div><div class=\"line\"> * 8.依赖倒置原则,指导我们避免依赖具体类型,而尽量依赖抽象</div><div class=\"line\"> * 9.工厂是很有威力的技巧,帮助我们针对抽象编程,而不是具体类编程</div><div class=\"line\"> *</div><div class=\"line\"> *场景介绍: 还是继续游戏吧(本游戏纯属虚构，如有雷同，纯属巧合)</div><div class=\"line\"> * 创建不同的种类的人物,不同工厂负责创建不同角色,不同角色拥有不同的武器和技能</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\">public class FactoryPattern &#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public static void main(String args[])&#123;</div><div class=\"line\">        System.out.println(&quot;-------------------simpleFactoryDemo-----------------------------&quot;);</div><div class=\"line\">        /**</div><div class=\"line\">         * 简单工厂模式</div><div class=\"line\">         * 基本实现人物和工厂之间松耦合,面向抽象编程</div><div class=\"line\">         * */</div><div class=\"line\">       simpleFactoryDemo();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;-------------------factoryMethodDemo-----------------------------&quot;);</div><div class=\"line\">        /**</div><div class=\"line\">         * 工厂方法</div><div class=\"line\">         * 如果游戏的人物会在不同游戏中出现,在不同游戏中人物的属性也是不一样的</div><div class=\"line\">         * 下面我们使用工厂方法来实现(定义类一个创建对象的接口,有子类决定实例化哪一个.工厂方法让类实力化推迟到子类)</div><div class=\"line\">         * **/</div><div class=\"line\">       factoryMethodDemo();</div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;-------------------abstractFactoryDemo-----------------------------&quot;);</div><div class=\"line\">        /**</div><div class=\"line\">         * 抽象工厂</div><div class=\"line\">         * 我们上面创建的角色,只体现了角色本身属性,没有装备属性,下面我们一起来给人物装备上吧</div><div class=\"line\">         * 提供一个接口,用于创建相关或依赖对象的产品家族而不需要明确指定具体类</div><div class=\"line\">         * 1.需要定义一个人物装备接口,创建不同装备</div><div class=\"line\">         * 2.GameRoleMan 加上装备属性</div><div class=\"line\">         *</div><div class=\"line\">         * **/</div><div class=\"line\">        abstractFactoryDemo();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 简单工厂模式</div><div class=\"line\">     * 基本实现人物和工厂之间松耦合,面向抽象编程</div><div class=\"line\">     * */</div><div class=\"line\">    public static void simpleFactoryDemo()&#123;</div><div class=\"line\"></div><div class=\"line\">        SimpleFactory simpleFactory = new SimpleFactory();</div><div class=\"line\">        SimpleFactoryGameRoleManStore simpleFactoryGameRoleManStore = new SimpleFactoryGameRoleManStore(simpleFactory);</div><div class=\"line\">        GameRoleMan gameRoleManAngels = simpleFactoryGameRoleManStore.getGameRoleMan(&quot;Angels&quot;);</div><div class=\"line\">        GameRoleMan gameRoleManKing = simpleFactoryGameRoleManStore.getGameRoleMan(&quot;King&quot;);</div><div class=\"line\"></div><div class=\"line\">        gameRoleManAngels.show();</div><div class=\"line\">        gameRoleManKing.show();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 工厂方法</div><div class=\"line\">     * 如果游戏的人物会在不同游戏中出现,在不同游戏中人物的属性也是不一样的</div><div class=\"line\">     * 下面我们使用工厂方法来实现(定义类一个创建对象的接口,有子类决定实例化哪一个.工厂方法让类实力化推迟到子类)</div><div class=\"line\">     * **/</div><div class=\"line\">    public static void factoryMethodDemo()&#123;</div><div class=\"line\"></div><div class=\"line\">        //英雄联盟</div><div class=\"line\">        FactoryMethodGameRoleManStore yxlm = new   YXLM();</div><div class=\"line\">        //蜀山传奇</div><div class=\"line\">        FactoryMethodGameRoleManStore sscq = new SSCQ();</div><div class=\"line\"></div><div class=\"line\">        GameRoleMan gameRoleMan = yxlm.getGameRoleMan(&quot;Angels&quot;);</div><div class=\"line\">        gameRoleMan.show();</div><div class=\"line\">        gameRoleMan = sscq.getGameRoleMan(&quot;Angels&quot;);</div><div class=\"line\">        gameRoleMan.show();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 抽象工厂</div><div class=\"line\">     * 我们上面创建的角色,只体现了角色本身属性,没有装备属性,下面我们一起来给人物装备上吧</div><div class=\"line\">     * 提供一个接口,用于创建相关或依赖对象的产品家族而不需要明确指定具体类</div><div class=\"line\">     * 1.需要定义一个人物装备接口,创建不同装备</div><div class=\"line\">     * 2.GameRoleMan 加上装备属性</div><div class=\"line\">     * **/</div><div class=\"line\">    public static void abstractFactoryDemo()&#123;</div><div class=\"line\"></div><div class=\"line\">        //蜀山传奇</div><div class=\"line\">        FactoryMethodGameRoleManStore sscq = new SSCQ();</div><div class=\"line\"></div><div class=\"line\">        GameRoleMan gameRoleMan = sscq.getGameRoleMan(&quot;DemonEqi&quot;);</div><div class=\"line\">        gameRoleMan.show();</div><div class=\"line\">        gameRoleMan = sscq.getGameRoleMan(&quot;KingEqi&quot;);</div><div class=\"line\">        gameRoleMan.show();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//人物创建工厂</div><div class=\"line\">/**</div><div class=\"line\"> * 1.简单工厂模式</div><div class=\"line\"> * **/</div><div class=\"line\">class SimpleFactory&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public  GameRoleMan createRoleMan(String type)&#123;</div><div class=\"line\">        GameRoleMan gameRoleMan;</div><div class=\"line\">        switch (type)&#123;</div><div class=\"line\">            case &quot;King&quot;:</div><div class=\"line\">                gameRoleMan = new GameKing();</div><div class=\"line\">                break;</div><div class=\"line\">            case &quot;Angels&quot;:</div><div class=\"line\">                gameRoleMan = new GameAngels();</div><div class=\"line\">                break;</div><div class=\"line\">            case &quot;Demon&quot;:</div><div class=\"line\">                gameRoleMan = new GameDemon();</div><div class=\"line\">                break;</div><div class=\"line\">            default:</div><div class=\"line\">                throw new NullPointerException(&quot;没有选择的角色&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return gameRoleMan;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 简单工厂游戏角色人物储备</div><div class=\"line\"> * */</div><div class=\"line\"> class SimpleFactoryGameRoleManStore&#123;</div><div class=\"line\"></div><div class=\"line\">    SimpleFactory simpleFactory;</div><div class=\"line\"></div><div class=\"line\">    public SimpleFactoryGameRoleManStore(SimpleFactory simpleFactory)&#123;</div><div class=\"line\">       this.simpleFactory = simpleFactory;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 不管最终游戏角色创建,这里只是负责展示</div><div class=\"line\">     * */</div><div class=\"line\">    public GameRoleMan getGameRoleMan(String type)&#123;</div><div class=\"line\">         GameRoleMan gameRoleMan = simpleFactory.createRoleMan(type);</div><div class=\"line\">         return gameRoleMan;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 工厂方法游戏角色人物储备</div><div class=\"line\"> * 不同人物在不同游戏中展示方式</div><div class=\"line\"> * */</div><div class=\"line\"> abstract  class  FactoryMethodGameRoleManStore&#123;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 不管最终游戏角色创建,这里只是负责返回</div><div class=\"line\">     * */</div><div class=\"line\">    public GameRoleMan getGameRoleMan(String type)&#123;</div><div class=\"line\">        GameRoleMan gameRoleMan = createRoleMan(type);</div><div class=\"line\">        return gameRoleMan;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">   protected abstract GameRoleMan createRoleMan(String type);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 英雄联盟</div><div class=\"line\"> * */</div><div class=\"line\">class YXLM extends FactoryMethodGameRoleManStore&#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected GameRoleMan createRoleMan(String type) &#123;</div><div class=\"line\">        GameRoleMan gameRoleMan;</div><div class=\"line\">        switch (type)&#123;</div><div class=\"line\">            case &quot;King&quot;:</div><div class=\"line\">                gameRoleMan = new YXLMGameKing();</div><div class=\"line\">                break;</div><div class=\"line\">            case &quot;Angels&quot;:</div><div class=\"line\">                gameRoleMan = new YXLMGameAngels();</div><div class=\"line\">                break;</div><div class=\"line\">            case &quot;Demon&quot;:</div><div class=\"line\">                gameRoleMan = new YXLMGameDemon();</div><div class=\"line\">                break;</div><div class=\"line\">            default:</div><div class=\"line\">                throw new NullPointerException(&quot;没有选择的角色&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return gameRoleMan;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 蜀山传奇</div><div class=\"line\"> * */</div><div class=\"line\">class SSCQ extends FactoryMethodGameRoleManStore&#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected GameRoleMan createRoleMan(String type) &#123;</div><div class=\"line\">        GameRoleMan gameRoleMan;</div><div class=\"line\">        GameRoleManEquipmentFactory gameRoleManEquipmentFactory;</div><div class=\"line\">        switch (type)&#123;</div><div class=\"line\">            case &quot;King&quot;:</div><div class=\"line\">                gameRoleMan = new SSCQGameKing();</div><div class=\"line\">                break;</div><div class=\"line\">            //带装备的国王</div><div class=\"line\">            case &quot;KingEqi&quot;:</div><div class=\"line\">                gameRoleManEquipmentFactory = new GameRoleManEquipmentFactorySSCQKing();</div><div class=\"line\">                gameRoleMan = new SSCQGameKing(gameRoleManEquipmentFactory);</div><div class=\"line\">                break;</div><div class=\"line\">            case &quot;Angels&quot;:</div><div class=\"line\">                gameRoleMan = new SSCQGameAngels();</div><div class=\"line\">                break;</div><div class=\"line\">            case &quot;Demon&quot;:</div><div class=\"line\">                 gameRoleMan = new SSCQGameDemon();</div><div class=\"line\">                break;</div><div class=\"line\">            //带装备的恶魔</div><div class=\"line\">            case &quot;DemonEqi&quot;:</div><div class=\"line\">                gameRoleManEquipmentFactory = new GameRoleManEquipmentFactorySSCQDemon();</div><div class=\"line\">                gameRoleMan = new SSCQGameDemon(gameRoleManEquipmentFactory);</div><div class=\"line\">                break;</div><div class=\"line\">            default:</div><div class=\"line\">                throw new NullPointerException(&quot;没有选择的角色&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return gameRoleMan;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 游戏角色装备</div><div class=\"line\"> * */</div><div class=\"line\">interface GameRoleManEquipment&#123;</div><div class=\"line\"></div><div class=\"line\">  GameRoleManWeapon getGameRoleManWeapon();</div><div class=\"line\">  GameRoleManDefense getGameRoleManDefense();</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//装备工厂</div><div class=\"line\">abstract class GameRoleManEquipmentFactory&#123;</div><div class=\"line\"></div><div class=\"line\">     GameRoleManEquipment gameRoleManEquipment;</div><div class=\"line\">     public GameRoleManEquipment gameRoleManEquipment()&#123;</div><div class=\"line\">         gameRoleManEquipment = createEquipment();</div><div class=\"line\">         return gameRoleManEquipment;</div><div class=\"line\">     &#125;</div><div class=\"line\">    abstract  GameRoleManEquipment createEquipment();</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//演示例子中 只演示蜀山传奇(SSCQ) 国王</div><div class=\"line\">class GameRoleManEquipmentFactorySSCQKing extends GameRoleManEquipmentFactory implements GameRoleManEquipment&#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    GameRoleManEquipment createEquipment() &#123;</div><div class=\"line\">        return this;</div><div class=\"line\">    &#125;</div><div class=\"line\">    @Override</div><div class=\"line\">    public GameRoleManWeapon getGameRoleManWeapon() &#123;</div><div class=\"line\">        return    new GameRoleManWeaponKnife();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public GameRoleManDefense getGameRoleManDefense() &#123;</div><div class=\"line\">        return new GameRoleManDefenseClothes();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//演示例子中 只演示蜀山传奇(SSCQ) 恶魔</div><div class=\"line\">class GameRoleManEquipmentFactorySSCQDemon extends GameRoleManEquipmentFactory implements GameRoleManEquipment&#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    GameRoleManEquipment createEquipment() &#123;</div><div class=\"line\">        return this;</div><div class=\"line\">    &#125;</div><div class=\"line\">    @Override</div><div class=\"line\">    public GameRoleManWeapon getGameRoleManWeapon() &#123;</div><div class=\"line\">        return    new GameRoleManWeaponSword();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public GameRoleManDefense getGameRoleManDefense() &#123;</div><div class=\"line\">        return new GameRoleManDefenseRing();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 游戏武器</div><div class=\"line\"> * */</div><div class=\"line\">interface GameRoleManWeapon&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    //攻击</div><div class=\"line\">    int getAtk();</div><div class=\"line\"></div><div class=\"line\">    //武器名称</div><div class=\"line\">    String getName();</div><div class=\"line\"></div><div class=\"line\">    String describe();</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 游戏武器 刀</div><div class=\"line\"> * */</div><div class=\"line\">class GameRoleManWeaponKnife implements GameRoleManWeapon&#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public int getAtk() &#123;</div><div class=\"line\">        return 1000;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String getName() &#123;</div><div class=\"line\">        return &quot;金丝大环刀&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String describe() &#123;</div><div class=\"line\">        return getName()+&quot;攻击力&quot;+getAtk()+&quot;; 消铁如泥的宝刀&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 游戏武器 剑</div><div class=\"line\"> * */</div><div class=\"line\">class GameRoleManWeaponSword  implements GameRoleManWeapon&#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public int getAtk() &#123;</div><div class=\"line\">        return 87973;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String getName() &#123;</div><div class=\"line\">        return &quot;大宝剑&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String describe() &#123;</div><div class=\"line\">        return getName()+&quot;攻击力:&quot;+getAtk()+&quot;; 大宝剑很是强悍呀&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/***</div><div class=\"line\"> * 游戏防御</div><div class=\"line\"> * */</div><div class=\"line\">interface GameRoleManDefense&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    //防御力</div><div class=\"line\">    int getDefense();</div><div class=\"line\"></div><div class=\"line\">    //防御名称</div><div class=\"line\">    String getName();</div><div class=\"line\"></div><div class=\"line\">    String describe();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/***</div><div class=\"line\"> * 游戏防御 衣服</div><div class=\"line\"> * */</div><div class=\"line\">class GameRoleManDefenseClothes implements GameRoleManDefense&#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public int getDefense() &#123;</div><div class=\"line\">        return 2123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String getName() &#123;</div><div class=\"line\">        return &quot;金丝铠甲&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String describe() &#123;</div><div class=\"line\">        return getName()+&quot; 防御力:&quot;+getDefense()+&quot; 很不错的衣服 &quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/***</div><div class=\"line\"> * 游戏防御 鞋子</div><div class=\"line\"> * */</div><div class=\"line\">class GameRoleManDefenseShoes implements GameRoleManDefense&#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public int getDefense() &#123;</div><div class=\"line\">        return 200;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String getName() &#123;</div><div class=\"line\">        return &quot;风靴&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String describe() &#123;</div><div class=\"line\">        return getName()+&quot; 防御力:&quot;+getDefense()+&quot; 穿上会很快 &quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/***</div><div class=\"line\"> * 游戏防御 戒指</div><div class=\"line\"> * */</div><div class=\"line\">class GameRoleManDefenseRing implements GameRoleManDefense&#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public int getDefense() &#123;</div><div class=\"line\">        return 200;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String getName() &#123;</div><div class=\"line\">        return &quot;魔戒&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String describe() &#123;</div><div class=\"line\">        return getName()+&quot; 防御力:&quot;+getDefense()+&quot; 带上后可以变身恶魔 &quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 游戏人物基类</div><div class=\"line\"> *</div><div class=\"line\"> * */</div><div class=\"line\">abstract class GameRoleMan&#123;</div><div class=\"line\"></div><div class=\"line\">    //攻击武器</div><div class=\"line\">    GameRoleManWeapon gameRoleManWeapon;</div><div class=\"line\"></div><div class=\"line\">    //防御武器</div><div class=\"line\">    GameRoleManDefense  gameRoleManDefense;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public void GameRoleMan(String gameRoleMan, int atk) &#123;</div><div class=\"line\">        this.gameRoleMan = gameRoleMan;</div><div class=\"line\">        this.atk = atk;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private String gameRoleMan;</div><div class=\"line\"></div><div class=\"line\">    protected int atk;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 角色技能</div><div class=\"line\">     * */</div><div class=\"line\">   public abstract Object ability();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    //最终展示</div><div class=\"line\">    public void show()&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;角色名称:&quot;+gameRoleMan+&quot;,拥有技能&quot;+ability()+&quot;;攻击力&quot;+atk);</div><div class=\"line\"></div><div class=\"line\">        if(gameRoleManWeapon!=null)&#123;</div><div class=\"line\">            System.out.println(gameRoleManWeapon.describe());</div><div class=\"line\">        &#125;</div><div class=\"line\">        if(gameRoleManDefense!=null)&#123;</div><div class=\"line\">            System.out.println(gameRoleManDefense.describe());</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 国王</div><div class=\"line\"> * */</div><div class=\"line\">class GameKing extends GameRoleMan&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public GameKing()&#123;</div><div class=\"line\">       this.GameRoleMan(&quot;国王&quot;,100);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public  Object ability() &#123;</div><div class=\"line\">        return &quot;我是国王,我会发冲击波&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 天使</div><div class=\"line\"> * */</div><div class=\"line\">class GameAngels extends GameRoleMan&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public GameAngels()&#123;</div><div class=\"line\">        this.GameRoleMan(&quot;天使&quot;,120);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public  Object ability() &#123;</div><div class=\"line\">        return &quot;我是天使,我会飞&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 恶魔</div><div class=\"line\"> * */</div><div class=\"line\">class GameDemon extends GameRoleMan&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public GameDemon()&#123;</div><div class=\"line\">        this.GameRoleMan(&quot;恶魔&quot;,130);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public  Object ability() &#123;</div><div class=\"line\">        return &quot;我是恶魔,我会打人&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 国王</div><div class=\"line\"> * */</div><div class=\"line\">class YXLMGameKing extends GameRoleMan&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public YXLMGameKing()&#123;</div><div class=\"line\">        this.GameRoleMan(&quot;英雄联盟国王&quot;,100);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public  Object ability() &#123;</div><div class=\"line\">        return &quot;我是英雄联盟国王,我会发冲击波&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 天使</div><div class=\"line\"> * */</div><div class=\"line\">class YXLMGameAngels extends GameRoleMan&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public YXLMGameAngels()&#123;</div><div class=\"line\">        this.GameRoleMan(&quot;英雄联盟天使&quot;,120);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public  Object ability() &#123;</div><div class=\"line\">        return &quot;我是英雄联盟天使,我会飞&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 恶魔</div><div class=\"line\"> * */</div><div class=\"line\">class YXLMGameDemon extends GameRoleMan&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public YXLMGameDemon()&#123;</div><div class=\"line\">        this.GameRoleMan(&quot;英雄联盟恶魔&quot;,130);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public  Object ability() &#123;</div><div class=\"line\">        return &quot;我是英雄联盟恶魔,我会打人&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 国王</div><div class=\"line\"> * */</div><div class=\"line\">class SSCQGameKing extends GameRoleMan&#123;</div><div class=\"line\">    GameRoleManEquipmentFactory gameRoleManEquipmentFactory;</div><div class=\"line\">    public SSCQGameKing(GameRoleManEquipmentFactory gameRoleManEquipmentFactory)&#123;</div><div class=\"line\"></div><div class=\"line\">        this.GameRoleMan(&quot;蜀山传奇国王&quot;,100);</div><div class=\"line\">        this.gameRoleManEquipmentFactory= gameRoleManEquipmentFactory;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public SSCQGameKing()&#123;</div><div class=\"line\">        this.GameRoleMan(&quot;蜀山传奇国王&quot;,100);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public  Object ability() &#123;</div><div class=\"line\">        GameRoleManEquipment gameRoleManEquipment=  gameRoleManEquipmentFactory.gameRoleManEquipment();</div><div class=\"line\">        this.gameRoleManDefense = gameRoleManEquipment.getGameRoleManDefense();</div><div class=\"line\">        this.gameRoleManWeapon = gameRoleManEquipment.getGameRoleManWeapon();</div><div class=\"line\">        this.atk =  gameRoleManWeapon.getAtk()+atk;</div><div class=\"line\">        return &quot;我是蜀山传奇国王,我会发冲击波&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 天使</div><div class=\"line\"> * */</div><div class=\"line\">class SSCQGameAngels extends GameRoleMan&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public SSCQGameAngels()&#123;</div><div class=\"line\">        this.GameRoleMan(&quot;蜀山传奇天使&quot;,120);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public  Object ability() &#123;</div><div class=\"line\">        return &quot;我是蜀山传奇天使,我会飞&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 恶魔</div><div class=\"line\"> * */</div><div class=\"line\">class SSCQGameDemon extends GameRoleMan&#123;</div><div class=\"line\"></div><div class=\"line\">    GameRoleManEquipmentFactory gameRoleManEquipmentFactory;</div><div class=\"line\"></div><div class=\"line\">    public SSCQGameDemon(GameRoleManEquipmentFactory gameRoleManEquipmentFactory)&#123;</div><div class=\"line\">        this.GameRoleMan(&quot;蜀山传奇恶魔&quot;,130);</div><div class=\"line\">        this.gameRoleManEquipmentFactory= gameRoleManEquipmentFactory;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public SSCQGameDemon()&#123;</div><div class=\"line\">        this.GameRoleMan(&quot;蜀山传奇恶魔&quot;,130);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public  Object ability() &#123;</div><div class=\"line\"></div><div class=\"line\">        GameRoleManEquipment gameRoleManEquipment=  gameRoleManEquipmentFactory.gameRoleManEquipment();</div><div class=\"line\">        this.gameRoleManDefense = gameRoleManEquipment.getGameRoleManDefense();</div><div class=\"line\">        this.gameRoleManWeapon = gameRoleManEquipment.getGameRoleManWeapon();</div><div class=\"line\">         this.atk =atk+ gameRoleManWeapon.getAtk();</div><div class=\"line\">        return &quot;我是蜀山传奇恶魔,我会打人&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h3 id=\"工厂模式-工厂方法-抽象工厂\"><a href=\"#工厂模式-工厂方法-抽象工厂\" class=\"headerlink\" title=\"工厂模式,工厂方法,抽象工厂\"></a>工厂模式,工厂方法,抽象工厂</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div><div class=\"line\">364</div><div class=\"line\">365</div><div class=\"line\">366</div><div class=\"line\">367</div><div class=\"line\">368</div><div class=\"line\">369</div><div class=\"line\">370</div><div class=\"line\">371</div><div class=\"line\">372</div><div class=\"line\">373</div><div class=\"line\">374</div><div class=\"line\">375</div><div class=\"line\">376</div><div class=\"line\">377</div><div class=\"line\">378</div><div class=\"line\">379</div><div class=\"line\">380</div><div class=\"line\">381</div><div class=\"line\">382</div><div class=\"line\">383</div><div class=\"line\">384</div><div class=\"line\">385</div><div class=\"line\">386</div><div class=\"line\">387</div><div class=\"line\">388</div><div class=\"line\">389</div><div class=\"line\">390</div><div class=\"line\">391</div><div class=\"line\">392</div><div class=\"line\">393</div><div class=\"line\">394</div><div class=\"line\">395</div><div class=\"line\">396</div><div class=\"line\">397</div><div class=\"line\">398</div><div class=\"line\">399</div><div class=\"line\">400</div><div class=\"line\">401</div><div class=\"line\">402</div><div class=\"line\">403</div><div class=\"line\">404</div><div class=\"line\">405</div><div class=\"line\">406</div><div class=\"line\">407</div><div class=\"line\">408</div><div class=\"line\">409</div><div class=\"line\">410</div><div class=\"line\">411</div><div class=\"line\">412</div><div class=\"line\">413</div><div class=\"line\">414</div><div class=\"line\">415</div><div class=\"line\">416</div><div class=\"line\">417</div><div class=\"line\">418</div><div class=\"line\">419</div><div class=\"line\">420</div><div class=\"line\">421</div><div class=\"line\">422</div><div class=\"line\">423</div><div class=\"line\">424</div><div class=\"line\">425</div><div class=\"line\">426</div><div class=\"line\">427</div><div class=\"line\">428</div><div class=\"line\">429</div><div class=\"line\">430</div><div class=\"line\">431</div><div class=\"line\">432</div><div class=\"line\">433</div><div class=\"line\">434</div><div class=\"line\">435</div><div class=\"line\">436</div><div class=\"line\">437</div><div class=\"line\">438</div><div class=\"line\">439</div><div class=\"line\">440</div><div class=\"line\">441</div><div class=\"line\">442</div><div class=\"line\">443</div><div class=\"line\">444</div><div class=\"line\">445</div><div class=\"line\">446</div><div class=\"line\">447</div><div class=\"line\">448</div><div class=\"line\">449</div><div class=\"line\">450</div><div class=\"line\">451</div><div class=\"line\">452</div><div class=\"line\">453</div><div class=\"line\">454</div><div class=\"line\">455</div><div class=\"line\">456</div><div class=\"line\">457</div><div class=\"line\">458</div><div class=\"line\">459</div><div class=\"line\">460</div><div class=\"line\">461</div><div class=\"line\">462</div><div class=\"line\">463</div><div class=\"line\">464</div><div class=\"line\">465</div><div class=\"line\">466</div><div class=\"line\">467</div><div class=\"line\">468</div><div class=\"line\">469</div><div class=\"line\">470</div><div class=\"line\">471</div><div class=\"line\">472</div><div class=\"line\">473</div><div class=\"line\">474</div><div class=\"line\">475</div><div class=\"line\">476</div><div class=\"line\">477</div><div class=\"line\">478</div><div class=\"line\">479</div><div class=\"line\">480</div><div class=\"line\">481</div><div class=\"line\">482</div><div class=\"line\">483</div><div class=\"line\">484</div><div class=\"line\">485</div><div class=\"line\">486</div><div class=\"line\">487</div><div class=\"line\">488</div><div class=\"line\">489</div><div class=\"line\">490</div><div class=\"line\">491</div><div class=\"line\">492</div><div class=\"line\">493</div><div class=\"line\">494</div><div class=\"line\">495</div><div class=\"line\">496</div><div class=\"line\">497</div><div class=\"line\">498</div><div class=\"line\">499</div><div class=\"line\">500</div><div class=\"line\">501</div><div class=\"line\">502</div><div class=\"line\">503</div><div class=\"line\">504</div><div class=\"line\">505</div><div class=\"line\">506</div><div class=\"line\">507</div><div class=\"line\">508</div><div class=\"line\">509</div><div class=\"line\">510</div><div class=\"line\">511</div><div class=\"line\">512</div><div class=\"line\">513</div><div class=\"line\">514</div><div class=\"line\">515</div><div class=\"line\">516</div><div class=\"line\">517</div><div class=\"line\">518</div><div class=\"line\">519</div><div class=\"line\">520</div><div class=\"line\">521</div><div class=\"line\">522</div><div class=\"line\">523</div><div class=\"line\">524</div><div class=\"line\">525</div><div class=\"line\">526</div><div class=\"line\">527</div><div class=\"line\">528</div><div class=\"line\">529</div><div class=\"line\">530</div><div class=\"line\">531</div><div class=\"line\">532</div><div class=\"line\">533</div><div class=\"line\">534</div><div class=\"line\">535</div><div class=\"line\">536</div><div class=\"line\">537</div><div class=\"line\">538</div><div class=\"line\">539</div><div class=\"line\">540</div><div class=\"line\">541</div><div class=\"line\">542</div><div class=\"line\">543</div><div class=\"line\">544</div><div class=\"line\">545</div><div class=\"line\">546</div><div class=\"line\">547</div><div class=\"line\">548</div><div class=\"line\">549</div><div class=\"line\">550</div><div class=\"line\">551</div><div class=\"line\">552</div><div class=\"line\">553</div><div class=\"line\">554</div><div class=\"line\">555</div><div class=\"line\">556</div><div class=\"line\">557</div><div class=\"line\">558</div><div class=\"line\">559</div><div class=\"line\">560</div><div class=\"line\">561</div><div class=\"line\">562</div><div class=\"line\">563</div><div class=\"line\">564</div><div class=\"line\">565</div><div class=\"line\">566</div><div class=\"line\">567</div><div class=\"line\">568</div><div class=\"line\">569</div><div class=\"line\">570</div><div class=\"line\">571</div><div class=\"line\">572</div><div class=\"line\">573</div><div class=\"line\">574</div><div class=\"line\">575</div><div class=\"line\">576</div><div class=\"line\">577</div><div class=\"line\">578</div><div class=\"line\">579</div><div class=\"line\">580</div><div class=\"line\">581</div><div class=\"line\">582</div><div class=\"line\">583</div><div class=\"line\">584</div><div class=\"line\">585</div><div class=\"line\">586</div><div class=\"line\">587</div><div class=\"line\">588</div><div class=\"line\">589</div><div class=\"line\">590</div><div class=\"line\">591</div><div class=\"line\">592</div><div class=\"line\">593</div><div class=\"line\">594</div><div class=\"line\">595</div><div class=\"line\">596</div><div class=\"line\">597</div><div class=\"line\">598</div><div class=\"line\">599</div><div class=\"line\">600</div><div class=\"line\">601</div><div class=\"line\">602</div><div class=\"line\">603</div><div class=\"line\">604</div><div class=\"line\">605</div><div class=\"line\">606</div><div class=\"line\">607</div><div class=\"line\">608</div><div class=\"line\">609</div><div class=\"line\">610</div><div class=\"line\">611</div><div class=\"line\">612</div><div class=\"line\">613</div><div class=\"line\">614</div><div class=\"line\">615</div><div class=\"line\">616</div><div class=\"line\">617</div><div class=\"line\">618</div><div class=\"line\">619</div><div class=\"line\">620</div><div class=\"line\">621</div><div class=\"line\">622</div><div class=\"line\">623</div><div class=\"line\">624</div><div class=\"line\">625</div><div class=\"line\">626</div><div class=\"line\">627</div><div class=\"line\">628</div><div class=\"line\">629</div><div class=\"line\">630</div><div class=\"line\">631</div><div class=\"line\">632</div><div class=\"line\">633</div><div class=\"line\">634</div><div class=\"line\">635</div><div class=\"line\">636</div><div class=\"line\">637</div><div class=\"line\">638</div><div class=\"line\">639</div><div class=\"line\">640</div><div class=\"line\">641</div><div class=\"line\">642</div><div class=\"line\">643</div><div class=\"line\">644</div><div class=\"line\">645</div><div class=\"line\">646</div><div class=\"line\">647</div><div class=\"line\">648</div><div class=\"line\">649</div><div class=\"line\">650</div><div class=\"line\">651</div><div class=\"line\">652</div><div class=\"line\">653</div><div class=\"line\">654</div><div class=\"line\">655</div><div class=\"line\">656</div><div class=\"line\">657</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 工厂模式 (将具体实例化具体的代码抽离或封装,组织为产品和产品族)</div><div class=\"line\"> * 产品:  汽车,电脑,手机</div><div class=\"line\"> * 产品族: 汽车零件也能是各个厂商,汽车生产厂家不能所有都是自己生产</div><div class=\"line\"> * 通过工厂(高层组件)组织产品(低层组件)或产品族 统一入口请求和返回,</div><div class=\"line\"> * 产品和创建者相对独立也可以说是两者都是平级关系,创建者依赖抽象产品</div><div class=\"line\"> *</div><div class=\"line\"> * 抽象工厂: 提供一个接口,用于创建相关或依赖对象的产品家族而不需要明确指定具体类</div><div class=\"line\"> * 工厂方法: 定义类一个创建对象的接口,有子类决定实例化哪一个.工厂方法让类实力化推迟到子类</div><div class=\"line\"> * 要点:</div><div class=\"line\"> * 1.所有的工厂都是用来封装对象的创建</div><div class=\"line\"> * 2.简单工厂,不是真正的设计模式,但仍不失为一个简单的方法,可以将客户程序解耦</div><div class=\"line\"> * 3.工厂方法使用继承: 把对象的创建委托给子类,子类实现工厂方法来创建对象</div><div class=\"line\"> * 4.抽象工厂使用对象组合:对象的创建被实现在工厂方法来创建对象</div><div class=\"line\"> * 5.所有工厂模式都通过减少应用程序和具体类之间的依赖促进松耦合</div><div class=\"line\"> * 6.工厂方法允许类实力化到子类进行</div><div class=\"line\"> * 7.抽象工厂创建相关的对象家族,不需要依赖它们具体类</div><div class=\"line\"> * 8.依赖倒置原则,指导我们避免依赖具体类型,而尽量依赖抽象</div><div class=\"line\"> * 9.工厂是很有威力的技巧,帮助我们针对抽象编程,而不是具体类编程</div><div class=\"line\"> *</div><div class=\"line\"> *场景介绍: 还是继续游戏吧(本游戏纯属虚构，如有雷同，纯属巧合)</div><div class=\"line\"> * 创建不同的种类的人物,不同工厂负责创建不同角色,不同角色拥有不同的武器和技能</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\">public class FactoryPattern &#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public static void main(String args[])&#123;</div><div class=\"line\">        System.out.println(&quot;-------------------simpleFactoryDemo-----------------------------&quot;);</div><div class=\"line\">        /**</div><div class=\"line\">         * 简单工厂模式</div><div class=\"line\">         * 基本实现人物和工厂之间松耦合,面向抽象编程</div><div class=\"line\">         * */</div><div class=\"line\">       simpleFactoryDemo();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;-------------------factoryMethodDemo-----------------------------&quot;);</div><div class=\"line\">        /**</div><div class=\"line\">         * 工厂方法</div><div class=\"line\">         * 如果游戏的人物会在不同游戏中出现,在不同游戏中人物的属性也是不一样的</div><div class=\"line\">         * 下面我们使用工厂方法来实现(定义类一个创建对象的接口,有子类决定实例化哪一个.工厂方法让类实力化推迟到子类)</div><div class=\"line\">         * **/</div><div class=\"line\">       factoryMethodDemo();</div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;-------------------abstractFactoryDemo-----------------------------&quot;);</div><div class=\"line\">        /**</div><div class=\"line\">         * 抽象工厂</div><div class=\"line\">         * 我们上面创建的角色,只体现了角色本身属性,没有装备属性,下面我们一起来给人物装备上吧</div><div class=\"line\">         * 提供一个接口,用于创建相关或依赖对象的产品家族而不需要明确指定具体类</div><div class=\"line\">         * 1.需要定义一个人物装备接口,创建不同装备</div><div class=\"line\">         * 2.GameRoleMan 加上装备属性</div><div class=\"line\">         *</div><div class=\"line\">         * **/</div><div class=\"line\">        abstractFactoryDemo();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 简单工厂模式</div><div class=\"line\">     * 基本实现人物和工厂之间松耦合,面向抽象编程</div><div class=\"line\">     * */</div><div class=\"line\">    public static void simpleFactoryDemo()&#123;</div><div class=\"line\"></div><div class=\"line\">        SimpleFactory simpleFactory = new SimpleFactory();</div><div class=\"line\">        SimpleFactoryGameRoleManStore simpleFactoryGameRoleManStore = new SimpleFactoryGameRoleManStore(simpleFactory);</div><div class=\"line\">        GameRoleMan gameRoleManAngels = simpleFactoryGameRoleManStore.getGameRoleMan(&quot;Angels&quot;);</div><div class=\"line\">        GameRoleMan gameRoleManKing = simpleFactoryGameRoleManStore.getGameRoleMan(&quot;King&quot;);</div><div class=\"line\"></div><div class=\"line\">        gameRoleManAngels.show();</div><div class=\"line\">        gameRoleManKing.show();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 工厂方法</div><div class=\"line\">     * 如果游戏的人物会在不同游戏中出现,在不同游戏中人物的属性也是不一样的</div><div class=\"line\">     * 下面我们使用工厂方法来实现(定义类一个创建对象的接口,有子类决定实例化哪一个.工厂方法让类实力化推迟到子类)</div><div class=\"line\">     * **/</div><div class=\"line\">    public static void factoryMethodDemo()&#123;</div><div class=\"line\"></div><div class=\"line\">        //英雄联盟</div><div class=\"line\">        FactoryMethodGameRoleManStore yxlm = new   YXLM();</div><div class=\"line\">        //蜀山传奇</div><div class=\"line\">        FactoryMethodGameRoleManStore sscq = new SSCQ();</div><div class=\"line\"></div><div class=\"line\">        GameRoleMan gameRoleMan = yxlm.getGameRoleMan(&quot;Angels&quot;);</div><div class=\"line\">        gameRoleMan.show();</div><div class=\"line\">        gameRoleMan = sscq.getGameRoleMan(&quot;Angels&quot;);</div><div class=\"line\">        gameRoleMan.show();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 抽象工厂</div><div class=\"line\">     * 我们上面创建的角色,只体现了角色本身属性,没有装备属性,下面我们一起来给人物装备上吧</div><div class=\"line\">     * 提供一个接口,用于创建相关或依赖对象的产品家族而不需要明确指定具体类</div><div class=\"line\">     * 1.需要定义一个人物装备接口,创建不同装备</div><div class=\"line\">     * 2.GameRoleMan 加上装备属性</div><div class=\"line\">     * **/</div><div class=\"line\">    public static void abstractFactoryDemo()&#123;</div><div class=\"line\"></div><div class=\"line\">        //蜀山传奇</div><div class=\"line\">        FactoryMethodGameRoleManStore sscq = new SSCQ();</div><div class=\"line\"></div><div class=\"line\">        GameRoleMan gameRoleMan = sscq.getGameRoleMan(&quot;DemonEqi&quot;);</div><div class=\"line\">        gameRoleMan.show();</div><div class=\"line\">        gameRoleMan = sscq.getGameRoleMan(&quot;KingEqi&quot;);</div><div class=\"line\">        gameRoleMan.show();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//人物创建工厂</div><div class=\"line\">/**</div><div class=\"line\"> * 1.简单工厂模式</div><div class=\"line\"> * **/</div><div class=\"line\">class SimpleFactory&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public  GameRoleMan createRoleMan(String type)&#123;</div><div class=\"line\">        GameRoleMan gameRoleMan;</div><div class=\"line\">        switch (type)&#123;</div><div class=\"line\">            case &quot;King&quot;:</div><div class=\"line\">                gameRoleMan = new GameKing();</div><div class=\"line\">                break;</div><div class=\"line\">            case &quot;Angels&quot;:</div><div class=\"line\">                gameRoleMan = new GameAngels();</div><div class=\"line\">                break;</div><div class=\"line\">            case &quot;Demon&quot;:</div><div class=\"line\">                gameRoleMan = new GameDemon();</div><div class=\"line\">                break;</div><div class=\"line\">            default:</div><div class=\"line\">                throw new NullPointerException(&quot;没有选择的角色&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return gameRoleMan;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 简单工厂游戏角色人物储备</div><div class=\"line\"> * */</div><div class=\"line\"> class SimpleFactoryGameRoleManStore&#123;</div><div class=\"line\"></div><div class=\"line\">    SimpleFactory simpleFactory;</div><div class=\"line\"></div><div class=\"line\">    public SimpleFactoryGameRoleManStore(SimpleFactory simpleFactory)&#123;</div><div class=\"line\">       this.simpleFactory = simpleFactory;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 不管最终游戏角色创建,这里只是负责展示</div><div class=\"line\">     * */</div><div class=\"line\">    public GameRoleMan getGameRoleMan(String type)&#123;</div><div class=\"line\">         GameRoleMan gameRoleMan = simpleFactory.createRoleMan(type);</div><div class=\"line\">         return gameRoleMan;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 工厂方法游戏角色人物储备</div><div class=\"line\"> * 不同人物在不同游戏中展示方式</div><div class=\"line\"> * */</div><div class=\"line\"> abstract  class  FactoryMethodGameRoleManStore&#123;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 不管最终游戏角色创建,这里只是负责返回</div><div class=\"line\">     * */</div><div class=\"line\">    public GameRoleMan getGameRoleMan(String type)&#123;</div><div class=\"line\">        GameRoleMan gameRoleMan = createRoleMan(type);</div><div class=\"line\">        return gameRoleMan;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">   protected abstract GameRoleMan createRoleMan(String type);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 英雄联盟</div><div class=\"line\"> * */</div><div class=\"line\">class YXLM extends FactoryMethodGameRoleManStore&#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected GameRoleMan createRoleMan(String type) &#123;</div><div class=\"line\">        GameRoleMan gameRoleMan;</div><div class=\"line\">        switch (type)&#123;</div><div class=\"line\">            case &quot;King&quot;:</div><div class=\"line\">                gameRoleMan = new YXLMGameKing();</div><div class=\"line\">                break;</div><div class=\"line\">            case &quot;Angels&quot;:</div><div class=\"line\">                gameRoleMan = new YXLMGameAngels();</div><div class=\"line\">                break;</div><div class=\"line\">            case &quot;Demon&quot;:</div><div class=\"line\">                gameRoleMan = new YXLMGameDemon();</div><div class=\"line\">                break;</div><div class=\"line\">            default:</div><div class=\"line\">                throw new NullPointerException(&quot;没有选择的角色&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return gameRoleMan;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 蜀山传奇</div><div class=\"line\"> * */</div><div class=\"line\">class SSCQ extends FactoryMethodGameRoleManStore&#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected GameRoleMan createRoleMan(String type) &#123;</div><div class=\"line\">        GameRoleMan gameRoleMan;</div><div class=\"line\">        GameRoleManEquipmentFactory gameRoleManEquipmentFactory;</div><div class=\"line\">        switch (type)&#123;</div><div class=\"line\">            case &quot;King&quot;:</div><div class=\"line\">                gameRoleMan = new SSCQGameKing();</div><div class=\"line\">                break;</div><div class=\"line\">            //带装备的国王</div><div class=\"line\">            case &quot;KingEqi&quot;:</div><div class=\"line\">                gameRoleManEquipmentFactory = new GameRoleManEquipmentFactorySSCQKing();</div><div class=\"line\">                gameRoleMan = new SSCQGameKing(gameRoleManEquipmentFactory);</div><div class=\"line\">                break;</div><div class=\"line\">            case &quot;Angels&quot;:</div><div class=\"line\">                gameRoleMan = new SSCQGameAngels();</div><div class=\"line\">                break;</div><div class=\"line\">            case &quot;Demon&quot;:</div><div class=\"line\">                 gameRoleMan = new SSCQGameDemon();</div><div class=\"line\">                break;</div><div class=\"line\">            //带装备的恶魔</div><div class=\"line\">            case &quot;DemonEqi&quot;:</div><div class=\"line\">                gameRoleManEquipmentFactory = new GameRoleManEquipmentFactorySSCQDemon();</div><div class=\"line\">                gameRoleMan = new SSCQGameDemon(gameRoleManEquipmentFactory);</div><div class=\"line\">                break;</div><div class=\"line\">            default:</div><div class=\"line\">                throw new NullPointerException(&quot;没有选择的角色&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return gameRoleMan;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 游戏角色装备</div><div class=\"line\"> * */</div><div class=\"line\">interface GameRoleManEquipment&#123;</div><div class=\"line\"></div><div class=\"line\">  GameRoleManWeapon getGameRoleManWeapon();</div><div class=\"line\">  GameRoleManDefense getGameRoleManDefense();</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//装备工厂</div><div class=\"line\">abstract class GameRoleManEquipmentFactory&#123;</div><div class=\"line\"></div><div class=\"line\">     GameRoleManEquipment gameRoleManEquipment;</div><div class=\"line\">     public GameRoleManEquipment gameRoleManEquipment()&#123;</div><div class=\"line\">         gameRoleManEquipment = createEquipment();</div><div class=\"line\">         return gameRoleManEquipment;</div><div class=\"line\">     &#125;</div><div class=\"line\">    abstract  GameRoleManEquipment createEquipment();</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//演示例子中 只演示蜀山传奇(SSCQ) 国王</div><div class=\"line\">class GameRoleManEquipmentFactorySSCQKing extends GameRoleManEquipmentFactory implements GameRoleManEquipment&#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    GameRoleManEquipment createEquipment() &#123;</div><div class=\"line\">        return this;</div><div class=\"line\">    &#125;</div><div class=\"line\">    @Override</div><div class=\"line\">    public GameRoleManWeapon getGameRoleManWeapon() &#123;</div><div class=\"line\">        return    new GameRoleManWeaponKnife();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public GameRoleManDefense getGameRoleManDefense() &#123;</div><div class=\"line\">        return new GameRoleManDefenseClothes();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//演示例子中 只演示蜀山传奇(SSCQ) 恶魔</div><div class=\"line\">class GameRoleManEquipmentFactorySSCQDemon extends GameRoleManEquipmentFactory implements GameRoleManEquipment&#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    GameRoleManEquipment createEquipment() &#123;</div><div class=\"line\">        return this;</div><div class=\"line\">    &#125;</div><div class=\"line\">    @Override</div><div class=\"line\">    public GameRoleManWeapon getGameRoleManWeapon() &#123;</div><div class=\"line\">        return    new GameRoleManWeaponSword();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public GameRoleManDefense getGameRoleManDefense() &#123;</div><div class=\"line\">        return new GameRoleManDefenseRing();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 游戏武器</div><div class=\"line\"> * */</div><div class=\"line\">interface GameRoleManWeapon&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    //攻击</div><div class=\"line\">    int getAtk();</div><div class=\"line\"></div><div class=\"line\">    //武器名称</div><div class=\"line\">    String getName();</div><div class=\"line\"></div><div class=\"line\">    String describe();</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 游戏武器 刀</div><div class=\"line\"> * */</div><div class=\"line\">class GameRoleManWeaponKnife implements GameRoleManWeapon&#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public int getAtk() &#123;</div><div class=\"line\">        return 1000;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String getName() &#123;</div><div class=\"line\">        return &quot;金丝大环刀&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String describe() &#123;</div><div class=\"line\">        return getName()+&quot;攻击力&quot;+getAtk()+&quot;; 消铁如泥的宝刀&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 游戏武器 剑</div><div class=\"line\"> * */</div><div class=\"line\">class GameRoleManWeaponSword  implements GameRoleManWeapon&#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public int getAtk() &#123;</div><div class=\"line\">        return 87973;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String getName() &#123;</div><div class=\"line\">        return &quot;大宝剑&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String describe() &#123;</div><div class=\"line\">        return getName()+&quot;攻击力:&quot;+getAtk()+&quot;; 大宝剑很是强悍呀&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/***</div><div class=\"line\"> * 游戏防御</div><div class=\"line\"> * */</div><div class=\"line\">interface GameRoleManDefense&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    //防御力</div><div class=\"line\">    int getDefense();</div><div class=\"line\"></div><div class=\"line\">    //防御名称</div><div class=\"line\">    String getName();</div><div class=\"line\"></div><div class=\"line\">    String describe();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/***</div><div class=\"line\"> * 游戏防御 衣服</div><div class=\"line\"> * */</div><div class=\"line\">class GameRoleManDefenseClothes implements GameRoleManDefense&#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public int getDefense() &#123;</div><div class=\"line\">        return 2123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String getName() &#123;</div><div class=\"line\">        return &quot;金丝铠甲&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String describe() &#123;</div><div class=\"line\">        return getName()+&quot; 防御力:&quot;+getDefense()+&quot; 很不错的衣服 &quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/***</div><div class=\"line\"> * 游戏防御 鞋子</div><div class=\"line\"> * */</div><div class=\"line\">class GameRoleManDefenseShoes implements GameRoleManDefense&#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public int getDefense() &#123;</div><div class=\"line\">        return 200;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String getName() &#123;</div><div class=\"line\">        return &quot;风靴&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String describe() &#123;</div><div class=\"line\">        return getName()+&quot; 防御力:&quot;+getDefense()+&quot; 穿上会很快 &quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/***</div><div class=\"line\"> * 游戏防御 戒指</div><div class=\"line\"> * */</div><div class=\"line\">class GameRoleManDefenseRing implements GameRoleManDefense&#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public int getDefense() &#123;</div><div class=\"line\">        return 200;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String getName() &#123;</div><div class=\"line\">        return &quot;魔戒&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String describe() &#123;</div><div class=\"line\">        return getName()+&quot; 防御力:&quot;+getDefense()+&quot; 带上后可以变身恶魔 &quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 游戏人物基类</div><div class=\"line\"> *</div><div class=\"line\"> * */</div><div class=\"line\">abstract class GameRoleMan&#123;</div><div class=\"line\"></div><div class=\"line\">    //攻击武器</div><div class=\"line\">    GameRoleManWeapon gameRoleManWeapon;</div><div class=\"line\"></div><div class=\"line\">    //防御武器</div><div class=\"line\">    GameRoleManDefense  gameRoleManDefense;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public void GameRoleMan(String gameRoleMan, int atk) &#123;</div><div class=\"line\">        this.gameRoleMan = gameRoleMan;</div><div class=\"line\">        this.atk = atk;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private String gameRoleMan;</div><div class=\"line\"></div><div class=\"line\">    protected int atk;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 角色技能</div><div class=\"line\">     * */</div><div class=\"line\">   public abstract Object ability();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    //最终展示</div><div class=\"line\">    public void show()&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;角色名称:&quot;+gameRoleMan+&quot;,拥有技能&quot;+ability()+&quot;;攻击力&quot;+atk);</div><div class=\"line\"></div><div class=\"line\">        if(gameRoleManWeapon!=null)&#123;</div><div class=\"line\">            System.out.println(gameRoleManWeapon.describe());</div><div class=\"line\">        &#125;</div><div class=\"line\">        if(gameRoleManDefense!=null)&#123;</div><div class=\"line\">            System.out.println(gameRoleManDefense.describe());</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 国王</div><div class=\"line\"> * */</div><div class=\"line\">class GameKing extends GameRoleMan&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public GameKing()&#123;</div><div class=\"line\">       this.GameRoleMan(&quot;国王&quot;,100);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public  Object ability() &#123;</div><div class=\"line\">        return &quot;我是国王,我会发冲击波&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 天使</div><div class=\"line\"> * */</div><div class=\"line\">class GameAngels extends GameRoleMan&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public GameAngels()&#123;</div><div class=\"line\">        this.GameRoleMan(&quot;天使&quot;,120);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public  Object ability() &#123;</div><div class=\"line\">        return &quot;我是天使,我会飞&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 恶魔</div><div class=\"line\"> * */</div><div class=\"line\">class GameDemon extends GameRoleMan&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public GameDemon()&#123;</div><div class=\"line\">        this.GameRoleMan(&quot;恶魔&quot;,130);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public  Object ability() &#123;</div><div class=\"line\">        return &quot;我是恶魔,我会打人&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 国王</div><div class=\"line\"> * */</div><div class=\"line\">class YXLMGameKing extends GameRoleMan&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public YXLMGameKing()&#123;</div><div class=\"line\">        this.GameRoleMan(&quot;英雄联盟国王&quot;,100);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public  Object ability() &#123;</div><div class=\"line\">        return &quot;我是英雄联盟国王,我会发冲击波&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 天使</div><div class=\"line\"> * */</div><div class=\"line\">class YXLMGameAngels extends GameRoleMan&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public YXLMGameAngels()&#123;</div><div class=\"line\">        this.GameRoleMan(&quot;英雄联盟天使&quot;,120);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public  Object ability() &#123;</div><div class=\"line\">        return &quot;我是英雄联盟天使,我会飞&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 恶魔</div><div class=\"line\"> * */</div><div class=\"line\">class YXLMGameDemon extends GameRoleMan&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public YXLMGameDemon()&#123;</div><div class=\"line\">        this.GameRoleMan(&quot;英雄联盟恶魔&quot;,130);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public  Object ability() &#123;</div><div class=\"line\">        return &quot;我是英雄联盟恶魔,我会打人&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 国王</div><div class=\"line\"> * */</div><div class=\"line\">class SSCQGameKing extends GameRoleMan&#123;</div><div class=\"line\">    GameRoleManEquipmentFactory gameRoleManEquipmentFactory;</div><div class=\"line\">    public SSCQGameKing(GameRoleManEquipmentFactory gameRoleManEquipmentFactory)&#123;</div><div class=\"line\"></div><div class=\"line\">        this.GameRoleMan(&quot;蜀山传奇国王&quot;,100);</div><div class=\"line\">        this.gameRoleManEquipmentFactory= gameRoleManEquipmentFactory;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public SSCQGameKing()&#123;</div><div class=\"line\">        this.GameRoleMan(&quot;蜀山传奇国王&quot;,100);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public  Object ability() &#123;</div><div class=\"line\">        GameRoleManEquipment gameRoleManEquipment=  gameRoleManEquipmentFactory.gameRoleManEquipment();</div><div class=\"line\">        this.gameRoleManDefense = gameRoleManEquipment.getGameRoleManDefense();</div><div class=\"line\">        this.gameRoleManWeapon = gameRoleManEquipment.getGameRoleManWeapon();</div><div class=\"line\">        this.atk =  gameRoleManWeapon.getAtk()+atk;</div><div class=\"line\">        return &quot;我是蜀山传奇国王,我会发冲击波&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 天使</div><div class=\"line\"> * */</div><div class=\"line\">class SSCQGameAngels extends GameRoleMan&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public SSCQGameAngels()&#123;</div><div class=\"line\">        this.GameRoleMan(&quot;蜀山传奇天使&quot;,120);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public  Object ability() &#123;</div><div class=\"line\">        return &quot;我是蜀山传奇天使,我会飞&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 恶魔</div><div class=\"line\"> * */</div><div class=\"line\">class SSCQGameDemon extends GameRoleMan&#123;</div><div class=\"line\"></div><div class=\"line\">    GameRoleManEquipmentFactory gameRoleManEquipmentFactory;</div><div class=\"line\"></div><div class=\"line\">    public SSCQGameDemon(GameRoleManEquipmentFactory gameRoleManEquipmentFactory)&#123;</div><div class=\"line\">        this.GameRoleMan(&quot;蜀山传奇恶魔&quot;,130);</div><div class=\"line\">        this.gameRoleManEquipmentFactory= gameRoleManEquipmentFactory;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public SSCQGameDemon()&#123;</div><div class=\"line\">        this.GameRoleMan(&quot;蜀山传奇恶魔&quot;,130);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public  Object ability() &#123;</div><div class=\"line\"></div><div class=\"line\">        GameRoleManEquipment gameRoleManEquipment=  gameRoleManEquipmentFactory.gameRoleManEquipment();</div><div class=\"line\">        this.gameRoleManDefense = gameRoleManEquipment.getGameRoleManDefense();</div><div class=\"line\">        this.gameRoleManWeapon = gameRoleManEquipment.getGameRoleManWeapon();</div><div class=\"line\">         this.atk =atk+ gameRoleManWeapon.getAtk();</div><div class=\"line\">        return &quot;我是蜀山传奇恶魔,我会打人&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"设计模式策略模式-不解释","date":"2017-03-10T09:05:07.000Z","layout":"clean-blog","slug":"设计模式策略模式-不解释","_content":"\n### 定义封装独立算法族,可以相互替换\n \n```\n\n\n/*\n *策略模式(定义封装独立算法族,可以相互替换)\n *定义不同算法\n *不同的英雄使用不同的武器发起战争和逃跑\n * 武器和逃跑可以理解为算法,基于组合实现可以动态修改英雄行为\n */\npublic class StrategyPattern {\n\n\n    public static void main(String args[]){\n        Hero hero  = new   IronMan();\n        hero.heroBehaviour();\n        //钢铁侠更换武器和逃跑套路(更换算法)\n        //更换逃跑行为\n        hero.setEscape(new UndergroundEscape());\n        //更好战争行为\n        hero.setWar(new HammerWar());\n        hero.heroBehaviour();\n    }\n\n\n}\n\n/**\n * 战争\n * */\ninterface War{\n    void war();\n}\n\n/**\n * 逃跑\n * */\ninterface Escape{\n    void escape();\n}\n\nclass HammerWar implements War{\n\n    @Override\n    public void war() {\n     System.out.println(\" 铁锤\");\n    }\n}\n\nclass MissileWar implements  War{\n    @Override\n    public void war() {\n        System.out.println(\"导弹\");\n    }\n}\n\n\nclass NoWar implements  War{\n\n    @Override\n    public void war() {\n        System.out.println(\"我不是超人,我不会发起战争\");\n    }\n}\n\n/**\n * 飞走逃跑\n * */\nclass FlyEscape implements Escape{\n\n    @Override\n    public void escape() {\n        System.out.println(\"飞走\");\n    }\n}\n\n\n/**\n * 地下逃跑\n * */\nclass UndergroundEscape implements Escape{\n\n    @Override\n    public void escape() {\n        System.out.println(\"地下\");\n    }\n}\n\n\nclass NoEscape implements  Escape{\n\n    @Override\n    public void escape() {\n        System.out.println(\"我是不会逃跑的\");\n    }\n}\n\n\n\n/**\n *超类==> 超人\n * */\nabstract class Hero{\n\n    War war;\n    Escape escape;\n\n\n    public void war(){\n        war.war();\n    }\n\n    public void escape(){\n        escape.escape();\n    }\n\n    public void setWar(War war) {\n        this.war = war;\n    }\n\n    public void setEscape(Escape escape) {\n        this.escape = escape;\n    }\n\n    //英雄行为\n    abstract void heroBehaviour();\n\n}\n\n/**\n * 钢铁侠\n * */\nclass IronMan extends Hero{\n\n    public IronMan() {\n        war = new MissileWar();\n        escape = new  FlyEscape();\n    }\n\n    @Override\n    void heroBehaviour() {\n        System.out.println(\"我是钢铁侠\");\n        super.war();\n        super.escape();\n\n    }\n}\n\n\n/**\n * 普通人\n * */\nclass OrdinaryMan extends Hero{\n\n    public OrdinaryMan() {\n        war = new NoWar();\n        escape = new NoEscape();\n    }\n\n    @Override\n    void heroBehaviour() {\n        System.out.println(\"我是普通人\");\n        super.war();\n        super.escape();\n    }\n}\n\n\n\n``` \n ","source":"_posts/设计模式策略模式-不解释.md","raw":"---\ntitle: 设计模式策略模式-不解释\ndate: 2017-03-10 17:05:07\ntags: 设计模式\nlayout: clean-blog\nslug: StrategyPattern\n\n---\n\n### 定义封装独立算法族,可以相互替换\n \n```\n\n\n/*\n *策略模式(定义封装独立算法族,可以相互替换)\n *定义不同算法\n *不同的英雄使用不同的武器发起战争和逃跑\n * 武器和逃跑可以理解为算法,基于组合实现可以动态修改英雄行为\n */\npublic class StrategyPattern {\n\n\n    public static void main(String args[]){\n        Hero hero  = new   IronMan();\n        hero.heroBehaviour();\n        //钢铁侠更换武器和逃跑套路(更换算法)\n        //更换逃跑行为\n        hero.setEscape(new UndergroundEscape());\n        //更好战争行为\n        hero.setWar(new HammerWar());\n        hero.heroBehaviour();\n    }\n\n\n}\n\n/**\n * 战争\n * */\ninterface War{\n    void war();\n}\n\n/**\n * 逃跑\n * */\ninterface Escape{\n    void escape();\n}\n\nclass HammerWar implements War{\n\n    @Override\n    public void war() {\n     System.out.println(\" 铁锤\");\n    }\n}\n\nclass MissileWar implements  War{\n    @Override\n    public void war() {\n        System.out.println(\"导弹\");\n    }\n}\n\n\nclass NoWar implements  War{\n\n    @Override\n    public void war() {\n        System.out.println(\"我不是超人,我不会发起战争\");\n    }\n}\n\n/**\n * 飞走逃跑\n * */\nclass FlyEscape implements Escape{\n\n    @Override\n    public void escape() {\n        System.out.println(\"飞走\");\n    }\n}\n\n\n/**\n * 地下逃跑\n * */\nclass UndergroundEscape implements Escape{\n\n    @Override\n    public void escape() {\n        System.out.println(\"地下\");\n    }\n}\n\n\nclass NoEscape implements  Escape{\n\n    @Override\n    public void escape() {\n        System.out.println(\"我是不会逃跑的\");\n    }\n}\n\n\n\n/**\n *超类==> 超人\n * */\nabstract class Hero{\n\n    War war;\n    Escape escape;\n\n\n    public void war(){\n        war.war();\n    }\n\n    public void escape(){\n        escape.escape();\n    }\n\n    public void setWar(War war) {\n        this.war = war;\n    }\n\n    public void setEscape(Escape escape) {\n        this.escape = escape;\n    }\n\n    //英雄行为\n    abstract void heroBehaviour();\n\n}\n\n/**\n * 钢铁侠\n * */\nclass IronMan extends Hero{\n\n    public IronMan() {\n        war = new MissileWar();\n        escape = new  FlyEscape();\n    }\n\n    @Override\n    void heroBehaviour() {\n        System.out.println(\"我是钢铁侠\");\n        super.war();\n        super.escape();\n\n    }\n}\n\n\n/**\n * 普通人\n * */\nclass OrdinaryMan extends Hero{\n\n    public OrdinaryMan() {\n        war = new NoWar();\n        escape = new NoEscape();\n    }\n\n    @Override\n    void heroBehaviour() {\n        System.out.println(\"我是普通人\");\n        super.war();\n        super.escape();\n    }\n}\n\n\n\n``` \n ","published":1,"updated":"2017-03-10T09:29:36.000Z","comments":1,"photos":[],"link":"","_id":"cj0uc8d0o000ney5rijbd6fc3","content":"<h3 id=\"定义封装独立算法族-可以相互替换\"><a href=\"#定义封装独立算法族-可以相互替换\" class=\"headerlink\" title=\"定义封装独立算法族,可以相互替换\"></a>定义封装独立算法族,可以相互替换</h3><pre><code>\n\n/*\n *策略模式(定义封装独立算法族,可以相互替换)\n *定义不同算法\n *不同的英雄使用不同的武器发起战争和逃跑\n * 武器和逃跑可以理解为算法,基于组合实现可以动态修改英雄行为\n */\npublic class StrategyPattern {\n\n\n    public static void main(String args[]){\n        Hero hero  = new   IronMan();\n        hero.heroBehaviour();\n        //钢铁侠更换武器和逃跑套路(更换算法)\n        //更换逃跑行为\n        hero.setEscape(new UndergroundEscape());\n        //更好战争行为\n        hero.setWar(new HammerWar());\n        hero.heroBehaviour();\n    }\n\n\n}\n\n/**\n * 战争\n * */\ninterface War{\n    void war();\n}\n\n/**\n * 逃跑\n * */\ninterface Escape{\n    void escape();\n}\n\nclass HammerWar implements War{\n\n    @Override\n    public void war() {\n     System.out.println(&quot; 铁锤&quot;);\n    }\n}\n\nclass MissileWar implements  War{\n    @Override\n    public void war() {\n        System.out.println(&quot;导弹&quot;);\n    }\n}\n\n\nclass NoWar implements  War{\n\n    @Override\n    public void war() {\n        System.out.println(&quot;我不是超人,我不会发起战争&quot;);\n    }\n}\n\n/**\n * 飞走逃跑\n * */\nclass FlyEscape implements Escape{\n\n    @Override\n    public void escape() {\n        System.out.println(&quot;飞走&quot;);\n    }\n}\n\n\n/**\n * 地下逃跑\n * */\nclass UndergroundEscape implements Escape{\n\n    @Override\n    public void escape() {\n        System.out.println(&quot;地下&quot;);\n    }\n}\n\n\nclass NoEscape implements  Escape{\n\n    @Override\n    public void escape() {\n        System.out.println(&quot;我是不会逃跑的&quot;);\n    }\n}\n\n\n\n/**\n *超类==&gt; 超人\n * */\nabstract class Hero{\n\n    War war;\n    Escape escape;\n\n\n    public void war(){\n        war.war();\n    }\n\n    public void escape(){\n        escape.escape();\n    }\n\n    public void setWar(War war) {\n        this.war = war;\n    }\n\n    public void setEscape(Escape escape) {\n        this.escape = escape;\n    }\n\n    //英雄行为\n    abstract void heroBehaviour();\n\n}\n\n/**\n * 钢铁侠\n * */\nclass IronMan extends Hero{\n\n    public IronMan() {\n        war = new MissileWar();\n        escape = new  FlyEscape();\n    }\n\n    @Override\n    void heroBehaviour() {\n        System.out.println(&quot;我是钢铁侠&quot;);\n        super.war();\n        super.escape();\n\n    }\n}\n\n\n/**\n * 普通人\n * */\nclass OrdinaryMan extends Hero{\n\n    public OrdinaryMan() {\n        war = new NoWar();\n        escape = new NoEscape();\n    }\n\n    @Override\n    void heroBehaviour() {\n        System.out.println(&quot;我是普通人&quot;);\n        super.war();\n        super.escape();\n    }\n}\n</code></pre>","excerpt":"","more":"<h3 id=\"定义封装独立算法族-可以相互替换\"><a href=\"#定义封装独立算法族-可以相互替换\" class=\"headerlink\" title=\"定义封装独立算法族,可以相互替换\"></a>定义封装独立算法族,可以相互替换</h3><pre><code>\n\n/*\n *策略模式(定义封装独立算法族,可以相互替换)\n *定义不同算法\n *不同的英雄使用不同的武器发起战争和逃跑\n * 武器和逃跑可以理解为算法,基于组合实现可以动态修改英雄行为\n */\npublic class StrategyPattern {\n\n\n    public static void main(String args[]){\n        Hero hero  = new   IronMan();\n        hero.heroBehaviour();\n        //钢铁侠更换武器和逃跑套路(更换算法)\n        //更换逃跑行为\n        hero.setEscape(new UndergroundEscape());\n        //更好战争行为\n        hero.setWar(new HammerWar());\n        hero.heroBehaviour();\n    }\n\n\n}\n\n/**\n * 战争\n * */\ninterface War{\n    void war();\n}\n\n/**\n * 逃跑\n * */\ninterface Escape{\n    void escape();\n}\n\nclass HammerWar implements War{\n\n    @Override\n    public void war() {\n     System.out.println(&quot; 铁锤&quot;);\n    }\n}\n\nclass MissileWar implements  War{\n    @Override\n    public void war() {\n        System.out.println(&quot;导弹&quot;);\n    }\n}\n\n\nclass NoWar implements  War{\n\n    @Override\n    public void war() {\n        System.out.println(&quot;我不是超人,我不会发起战争&quot;);\n    }\n}\n\n/**\n * 飞走逃跑\n * */\nclass FlyEscape implements Escape{\n\n    @Override\n    public void escape() {\n        System.out.println(&quot;飞走&quot;);\n    }\n}\n\n\n/**\n * 地下逃跑\n * */\nclass UndergroundEscape implements Escape{\n\n    @Override\n    public void escape() {\n        System.out.println(&quot;地下&quot;);\n    }\n}\n\n\nclass NoEscape implements  Escape{\n\n    @Override\n    public void escape() {\n        System.out.println(&quot;我是不会逃跑的&quot;);\n    }\n}\n\n\n\n/**\n *超类==&gt; 超人\n * */\nabstract class Hero{\n\n    War war;\n    Escape escape;\n\n\n    public void war(){\n        war.war();\n    }\n\n    public void escape(){\n        escape.escape();\n    }\n\n    public void setWar(War war) {\n        this.war = war;\n    }\n\n    public void setEscape(Escape escape) {\n        this.escape = escape;\n    }\n\n    //英雄行为\n    abstract void heroBehaviour();\n\n}\n\n/**\n * 钢铁侠\n * */\nclass IronMan extends Hero{\n\n    public IronMan() {\n        war = new MissileWar();\n        escape = new  FlyEscape();\n    }\n\n    @Override\n    void heroBehaviour() {\n        System.out.println(&quot;我是钢铁侠&quot;);\n        super.war();\n        super.escape();\n\n    }\n}\n\n\n/**\n * 普通人\n * */\nclass OrdinaryMan extends Hero{\n\n    public OrdinaryMan() {\n        war = new NoWar();\n        escape = new NoEscape();\n    }\n\n    @Override\n    void heroBehaviour() {\n        System.out.println(&quot;我是普通人&quot;);\n        super.war();\n        super.escape();\n    }\n}\n</code></pre>"},{"title":"设计模式组合－不解释","date":"2017-03-29T02:09:26.000Z","layout":"clean-blog","slug":"设计模式组合－不解释","_content":"\n###  组合模式 允许你将对象组合成树形结构来表现 \"整体/部分\" 层次结构, 组合能让客户以一致的方式处理个别对象以及对象组合\n\n````\n\n\n/**\n * ***当前例子为解决 迭代器模式中出现的问题***\n * 建议先看 迭代器模式\n * 组合模式:   允许你将对象组合成树形结构来表现 \"整体/部分\" 层次结构,\n *       组合能让客户以一致的方式处理个别对象以及对象组合\n * <p>\n * 当前实现方式: 就是将迭代器中的需要编码写入的 系统及菜单更换为 基于组合模式动态组织\n *\n * 要点:\n * 1.迭代器允许访问聚合的元素,而不需要暴露它的内部结构(存储方式)\n * 2.迭代器将遍历聚合的工作封装进一个对象中\n * 3.当使用迭代器的时候,我们依赖聚合提供遍历\n * 4.迭代器提供一个通用的接口,让我们遍历聚合的项,当我们编码使用聚合项时,就可以使用多态机制\n * 5.我们应该努力让一个类只分配一个责任\n * 6.组合模式提供一个结构,可同时包容个别对象和组合对象\n * 7.组合模式允许客户对个别对象以及组合对象一视同仁\n * 8.组合结构内的任意对象称为组件,组件可以是组合,也可以是叶节点\n * 9.在实现组合模式时,有许多设计上的折衷,你要根据需要平横透明性和安全性\n *\n */\npublic class CompositePattern {\n\n    public static void main(String args[]) {\n\n        CompositeSystemMenu userCenterMenu = new CompositeSystemMenu(\"用户系统\", \"这是用户系统的菜单\");\n        CompositeSystemMenu tradeMenu = new CompositeSystemMenu(\"交易系统\", \"交易系统菜单\");\n\n\n        userCenterMenu.add(\n                new CompositeMenuItem(\"1\", \"用户注册\", \"USER_REG\", \"0\"),\n                new CompositeMenuItem(\"2\", \"用户新增\", \"USER_ADD\", \"0\"),\n                new CompositeMenuItem(\"3\", \"用户删除\", \"USER_ADD\", \"0\"));\n\n        tradeMenu.add(new CompositeMenuItem(\"1\", \"订单查看\", \"TRADE_SEL\", \"0\"),\n                new CompositeMenuItem(\"1\", \"订单处理\", \"TRADE_OPE\", \"0\"),\n                new CompositeMenuItem(\"1\", \"订单删除\", \"TRADE_DEL\", \"0\"));\n\n\n        CompositeSystemMenu all = new CompositeSystemMenu(\"所有系统\", \"所有系统的菜单\");\n        all.add(userCenterMenu, tradeMenu);\n\n        CompositeClient compositeClient = new CompositeClient(all);\n        compositeClient.printMenu();\n        compositeClient.printAllMenu();\n\n    }\n\n\n}\n\n\n//客户端调用\n\n/**\n * 对比迭代其客户端,发现组合模式的客户端非常简单\n */\nclass CompositeClient {\n\n    MenuComponent allMenus;\n\n    public CompositeClient(MenuComponent allMenus) {\n        this.allMenus = allMenus;\n    }\n\n    public void printMenu() {\n        allMenus.print();\n    }\n\n    public void printAllMenu(){\n\n        Iterator iterator = allMenus.createIterator();\n        while (iterator.hasNext()){\n            MenuComponent menu = (MenuComponent)iterator.next();\n            try {\n                menu.print();\n            }catch (UnsupportedOperationException e){}\n        }\n\n    }\n\n\n}\n\n/**\n * 菜单组件抽象类\n * 所有的组件都必须实现当前接口,然后,叶节点和组合节点的角色不同,\n * 所以有些方法可能并不适合某种节点,面对这种情况,最好抛出运行时异常\n */\nabstract class MenuComponent {\n\n    public void add(MenuComponent... menuComponent) {\n        throw new UnsupportedOperationException();\n    }\n\n    public void remove(MenuComponent menuComponent) {\n        throw new UnsupportedOperationException();\n    }\n\n    public MenuComponent getChild(int i) {\n        throw new UnsupportedOperationException();\n    }\n\n\n    public String getName() {\n        throw new UnsupportedOperationException();\n    }\n\n    /**\n     * 描述\n     **/\n    public String getDescribe() {\n        throw new UnsupportedOperationException();\n    }\n\n    public String getCode() {\n        throw new UnsupportedOperationException();\n    }\n\n    public String getId() {\n        throw new UnsupportedOperationException();\n    }\n\n    public void print() {\n        throw new UnsupportedOperationException();\n    }\n\n    abstract java.util.Iterator createIterator();\n}\n\n/***\n * 系统菜单\n */\nclass CompositeSystemMenu extends MenuComponent {\n\n    ArrayList menuComponents = new ArrayList();\n    String name;\n    String describe;\n\n    public CompositeSystemMenu(String name, String describe) {\n        this.name = name;\n        this.describe = describe;\n    }\n\n    @Override\n    public void add(MenuComponent... menuComponent) {\n\n        for (MenuComponent m : menuComponent) {\n            menuComponents.add(m);\n        }\n\n    }\n\n    @Override\n    public void remove(MenuComponent menuComponent) {\n        menuComponents.remove(menuComponent);\n    }\n\n    @Override\n    public MenuComponent getChild(int i) {\n        return (MenuComponent) menuComponents.get(i);\n    }\n\n    @Override\n    public void print() {\n        System.out.println(this.toString());\n        java.util.Iterator iterator = menuComponents.iterator();\n        while (iterator.hasNext()) {\n            MenuComponent menuComponent = (MenuComponent) iterator.next();\n            menuComponent.print();\n        }\n\n    }\n\n    @Override\n    public String getName() {\n        return this.name;\n    }\n\n    @Override\n    public String getDescribe() {\n        return this.describe;\n    }\n\n    @Override\n    public String getId() {\n        return super.getId();\n    }\n\n    @Override\n    public String getCode() {\n        return super.getCode();\n    }\n\n    @Override\n    public String toString() {\n        return \"SystemMenu{\" +\n                \", name='\" + name + '\\'' +\n                \", describe='\" + describe + '\\'' +\n                '}';\n    }\n\n    @Override\n    Iterator createIterator() {\n        return new CompositeSystemMenuIterator(menuComponents.iterator());\n    }\n\n    class CompositeSystemMenuIterator implements java.util.Iterator{\n\n        Stack stack = new Stack();\n\n        public CompositeSystemMenuIterator(Iterator iterator) {\n           stack.push(iterator);\n        }\n\n        @Override\n        public boolean hasNext() {\n\n            if(stack.isEmpty()){return false;}\n            else{\n                Iterator iterator = (Iterator)stack.peek();\n\n                if(!iterator.hasNext()){\n                    stack.pop();\n                    return hasNext();\n                }else {\n                    return true;\n                }\n\n            }\n\n\n\n        }\n\n        @Override\n        public Object next() {\n           if(hasNext()){\n\n               Iterator iterator = (Iterator)stack.peek();\n               MenuComponent component = (MenuComponent)iterator.next();\n\n               if(component instanceof CompositeSystemMenu){\n                   stack.push(component.createIterator());\n               }\n               return component;\n           }else {\n               return null;\n           }\n        }\n\n        @Override\n        public void remove() {\n         throw  new UnsupportedOperationException();\n        }\n    }\n}\n\n/***\n * 菜单集合\n */\nclass CompositeMenuItem extends MenuComponent {\n\n    public CompositeMenuItem(String code, String id, String name, String paterId) {\n        this.code = code;\n        this.id = id;\n        this.name = name;\n        this.paterId = paterId;\n    }\n\n    private String id;\n    private String name;\n    private String code;\n    private String paterId;\n\n    @Override\n    public String getCode() {\n        return code;\n    }\n\n    @Override\n    public String getId() {\n        return id;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    public String getPaterId() {\n        return paterId;\n    }\n\n    @Override\n    public void print() {\n        System.out.println(this.toString());\n    }\n\n\n    @Override\n    public String toString() {\n        return \"MenuItem{\" +\n                \"code='\" + code + '\\'' +\n                \", id='\" + id + '\\'' +\n                \", name='\" + name + '\\'' +\n                \", paterId='\" + paterId + '\\'' +\n                '}';\n    }\n\n    @Override\n    Iterator createIterator() {\n        return new NullIterator();\n    }\n\n\n    private class NullIterator implements java.util.Iterator{\n\n        @Override\n        public boolean hasNext() {\n            return false;\n        }\n\n        @Override\n        public Object next() {\n            return null;\n        }\n\n        @Override\n        public void remove() {\n\n        }\n    }\n}\n\n````\n ","source":"_posts/设计模式组合－不解释.md","raw":"---\ntitle: 设计模式组合－不解释\ndate: 2017-03-29 10:09:26\ntags: 设计模式\nlayout: clean-blog\nslug: CompositePattern\n---\n\n###  组合模式 允许你将对象组合成树形结构来表现 \"整体/部分\" 层次结构, 组合能让客户以一致的方式处理个别对象以及对象组合\n\n````\n\n\n/**\n * ***当前例子为解决 迭代器模式中出现的问题***\n * 建议先看 迭代器模式\n * 组合模式:   允许你将对象组合成树形结构来表现 \"整体/部分\" 层次结构,\n *       组合能让客户以一致的方式处理个别对象以及对象组合\n * <p>\n * 当前实现方式: 就是将迭代器中的需要编码写入的 系统及菜单更换为 基于组合模式动态组织\n *\n * 要点:\n * 1.迭代器允许访问聚合的元素,而不需要暴露它的内部结构(存储方式)\n * 2.迭代器将遍历聚合的工作封装进一个对象中\n * 3.当使用迭代器的时候,我们依赖聚合提供遍历\n * 4.迭代器提供一个通用的接口,让我们遍历聚合的项,当我们编码使用聚合项时,就可以使用多态机制\n * 5.我们应该努力让一个类只分配一个责任\n * 6.组合模式提供一个结构,可同时包容个别对象和组合对象\n * 7.组合模式允许客户对个别对象以及组合对象一视同仁\n * 8.组合结构内的任意对象称为组件,组件可以是组合,也可以是叶节点\n * 9.在实现组合模式时,有许多设计上的折衷,你要根据需要平横透明性和安全性\n *\n */\npublic class CompositePattern {\n\n    public static void main(String args[]) {\n\n        CompositeSystemMenu userCenterMenu = new CompositeSystemMenu(\"用户系统\", \"这是用户系统的菜单\");\n        CompositeSystemMenu tradeMenu = new CompositeSystemMenu(\"交易系统\", \"交易系统菜单\");\n\n\n        userCenterMenu.add(\n                new CompositeMenuItem(\"1\", \"用户注册\", \"USER_REG\", \"0\"),\n                new CompositeMenuItem(\"2\", \"用户新增\", \"USER_ADD\", \"0\"),\n                new CompositeMenuItem(\"3\", \"用户删除\", \"USER_ADD\", \"0\"));\n\n        tradeMenu.add(new CompositeMenuItem(\"1\", \"订单查看\", \"TRADE_SEL\", \"0\"),\n                new CompositeMenuItem(\"1\", \"订单处理\", \"TRADE_OPE\", \"0\"),\n                new CompositeMenuItem(\"1\", \"订单删除\", \"TRADE_DEL\", \"0\"));\n\n\n        CompositeSystemMenu all = new CompositeSystemMenu(\"所有系统\", \"所有系统的菜单\");\n        all.add(userCenterMenu, tradeMenu);\n\n        CompositeClient compositeClient = new CompositeClient(all);\n        compositeClient.printMenu();\n        compositeClient.printAllMenu();\n\n    }\n\n\n}\n\n\n//客户端调用\n\n/**\n * 对比迭代其客户端,发现组合模式的客户端非常简单\n */\nclass CompositeClient {\n\n    MenuComponent allMenus;\n\n    public CompositeClient(MenuComponent allMenus) {\n        this.allMenus = allMenus;\n    }\n\n    public void printMenu() {\n        allMenus.print();\n    }\n\n    public void printAllMenu(){\n\n        Iterator iterator = allMenus.createIterator();\n        while (iterator.hasNext()){\n            MenuComponent menu = (MenuComponent)iterator.next();\n            try {\n                menu.print();\n            }catch (UnsupportedOperationException e){}\n        }\n\n    }\n\n\n}\n\n/**\n * 菜单组件抽象类\n * 所有的组件都必须实现当前接口,然后,叶节点和组合节点的角色不同,\n * 所以有些方法可能并不适合某种节点,面对这种情况,最好抛出运行时异常\n */\nabstract class MenuComponent {\n\n    public void add(MenuComponent... menuComponent) {\n        throw new UnsupportedOperationException();\n    }\n\n    public void remove(MenuComponent menuComponent) {\n        throw new UnsupportedOperationException();\n    }\n\n    public MenuComponent getChild(int i) {\n        throw new UnsupportedOperationException();\n    }\n\n\n    public String getName() {\n        throw new UnsupportedOperationException();\n    }\n\n    /**\n     * 描述\n     **/\n    public String getDescribe() {\n        throw new UnsupportedOperationException();\n    }\n\n    public String getCode() {\n        throw new UnsupportedOperationException();\n    }\n\n    public String getId() {\n        throw new UnsupportedOperationException();\n    }\n\n    public void print() {\n        throw new UnsupportedOperationException();\n    }\n\n    abstract java.util.Iterator createIterator();\n}\n\n/***\n * 系统菜单\n */\nclass CompositeSystemMenu extends MenuComponent {\n\n    ArrayList menuComponents = new ArrayList();\n    String name;\n    String describe;\n\n    public CompositeSystemMenu(String name, String describe) {\n        this.name = name;\n        this.describe = describe;\n    }\n\n    @Override\n    public void add(MenuComponent... menuComponent) {\n\n        for (MenuComponent m : menuComponent) {\n            menuComponents.add(m);\n        }\n\n    }\n\n    @Override\n    public void remove(MenuComponent menuComponent) {\n        menuComponents.remove(menuComponent);\n    }\n\n    @Override\n    public MenuComponent getChild(int i) {\n        return (MenuComponent) menuComponents.get(i);\n    }\n\n    @Override\n    public void print() {\n        System.out.println(this.toString());\n        java.util.Iterator iterator = menuComponents.iterator();\n        while (iterator.hasNext()) {\n            MenuComponent menuComponent = (MenuComponent) iterator.next();\n            menuComponent.print();\n        }\n\n    }\n\n    @Override\n    public String getName() {\n        return this.name;\n    }\n\n    @Override\n    public String getDescribe() {\n        return this.describe;\n    }\n\n    @Override\n    public String getId() {\n        return super.getId();\n    }\n\n    @Override\n    public String getCode() {\n        return super.getCode();\n    }\n\n    @Override\n    public String toString() {\n        return \"SystemMenu{\" +\n                \", name='\" + name + '\\'' +\n                \", describe='\" + describe + '\\'' +\n                '}';\n    }\n\n    @Override\n    Iterator createIterator() {\n        return new CompositeSystemMenuIterator(menuComponents.iterator());\n    }\n\n    class CompositeSystemMenuIterator implements java.util.Iterator{\n\n        Stack stack = new Stack();\n\n        public CompositeSystemMenuIterator(Iterator iterator) {\n           stack.push(iterator);\n        }\n\n        @Override\n        public boolean hasNext() {\n\n            if(stack.isEmpty()){return false;}\n            else{\n                Iterator iterator = (Iterator)stack.peek();\n\n                if(!iterator.hasNext()){\n                    stack.pop();\n                    return hasNext();\n                }else {\n                    return true;\n                }\n\n            }\n\n\n\n        }\n\n        @Override\n        public Object next() {\n           if(hasNext()){\n\n               Iterator iterator = (Iterator)stack.peek();\n               MenuComponent component = (MenuComponent)iterator.next();\n\n               if(component instanceof CompositeSystemMenu){\n                   stack.push(component.createIterator());\n               }\n               return component;\n           }else {\n               return null;\n           }\n        }\n\n        @Override\n        public void remove() {\n         throw  new UnsupportedOperationException();\n        }\n    }\n}\n\n/***\n * 菜单集合\n */\nclass CompositeMenuItem extends MenuComponent {\n\n    public CompositeMenuItem(String code, String id, String name, String paterId) {\n        this.code = code;\n        this.id = id;\n        this.name = name;\n        this.paterId = paterId;\n    }\n\n    private String id;\n    private String name;\n    private String code;\n    private String paterId;\n\n    @Override\n    public String getCode() {\n        return code;\n    }\n\n    @Override\n    public String getId() {\n        return id;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    public String getPaterId() {\n        return paterId;\n    }\n\n    @Override\n    public void print() {\n        System.out.println(this.toString());\n    }\n\n\n    @Override\n    public String toString() {\n        return \"MenuItem{\" +\n                \"code='\" + code + '\\'' +\n                \", id='\" + id + '\\'' +\n                \", name='\" + name + '\\'' +\n                \", paterId='\" + paterId + '\\'' +\n                '}';\n    }\n\n    @Override\n    Iterator createIterator() {\n        return new NullIterator();\n    }\n\n\n    private class NullIterator implements java.util.Iterator{\n\n        @Override\n        public boolean hasNext() {\n            return false;\n        }\n\n        @Override\n        public Object next() {\n            return null;\n        }\n\n        @Override\n        public void remove() {\n\n        }\n    }\n}\n\n````\n ","published":1,"updated":"2017-03-29T02:14:49.000Z","_id":"cj0uc8d0p000pey5rdkmuyjf8","comments":1,"photos":[],"link":"","content":"<h3 id=\"组合模式-允许你将对象组合成树形结构来表现-“整体-部分”-层次结构-组合能让客户以一致的方式处理个别对象以及对象组合\"><a href=\"#组合模式-允许你将对象组合成树形结构来表现-“整体-部分”-层次结构-组合能让客户以一致的方式处理个别对象以及对象组合\" class=\"headerlink\" title=\"组合模式 允许你将对象组合成树形结构来表现 “整体/部分” 层次结构, 组合能让客户以一致的方式处理个别对象以及对象组合\"></a>组合模式 允许你将对象组合成树形结构来表现 “整体/部分” 层次结构, 组合能让客户以一致的方式处理个别对象以及对象组合</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * ***当前例子为解决 迭代器模式中出现的问题***</div><div class=\"line\"> * 建议先看 迭代器模式</div><div class=\"line\"> * 组合模式:   允许你将对象组合成树形结构来表现 &quot;整体/部分&quot; 层次结构,</div><div class=\"line\"> *       组合能让客户以一致的方式处理个别对象以及对象组合</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * 当前实现方式: 就是将迭代器中的需要编码写入的 系统及菜单更换为 基于组合模式动态组织</div><div class=\"line\"> *</div><div class=\"line\"> * 要点:</div><div class=\"line\"> * 1.迭代器允许访问聚合的元素,而不需要暴露它的内部结构(存储方式)</div><div class=\"line\"> * 2.迭代器将遍历聚合的工作封装进一个对象中</div><div class=\"line\"> * 3.当使用迭代器的时候,我们依赖聚合提供遍历</div><div class=\"line\"> * 4.迭代器提供一个通用的接口,让我们遍历聚合的项,当我们编码使用聚合项时,就可以使用多态机制</div><div class=\"line\"> * 5.我们应该努力让一个类只分配一个责任</div><div class=\"line\"> * 6.组合模式提供一个结构,可同时包容个别对象和组合对象</div><div class=\"line\"> * 7.组合模式允许客户对个别对象以及组合对象一视同仁</div><div class=\"line\"> * 8.组合结构内的任意对象称为组件,组件可以是组合,也可以是叶节点</div><div class=\"line\"> * 9.在实现组合模式时,有许多设计上的折衷,你要根据需要平横透明性和安全性</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\">public class CompositePattern &#123;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String args[]) &#123;</div><div class=\"line\"></div><div class=\"line\">        CompositeSystemMenu userCenterMenu = new CompositeSystemMenu(&quot;用户系统&quot;, &quot;这是用户系统的菜单&quot;);</div><div class=\"line\">        CompositeSystemMenu tradeMenu = new CompositeSystemMenu(&quot;交易系统&quot;, &quot;交易系统菜单&quot;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        userCenterMenu.add(</div><div class=\"line\">                new CompositeMenuItem(&quot;1&quot;, &quot;用户注册&quot;, &quot;USER_REG&quot;, &quot;0&quot;),</div><div class=\"line\">                new CompositeMenuItem(&quot;2&quot;, &quot;用户新增&quot;, &quot;USER_ADD&quot;, &quot;0&quot;),</div><div class=\"line\">                new CompositeMenuItem(&quot;3&quot;, &quot;用户删除&quot;, &quot;USER_ADD&quot;, &quot;0&quot;));</div><div class=\"line\"></div><div class=\"line\">        tradeMenu.add(new CompositeMenuItem(&quot;1&quot;, &quot;订单查看&quot;, &quot;TRADE_SEL&quot;, &quot;0&quot;),</div><div class=\"line\">                new CompositeMenuItem(&quot;1&quot;, &quot;订单处理&quot;, &quot;TRADE_OPE&quot;, &quot;0&quot;),</div><div class=\"line\">                new CompositeMenuItem(&quot;1&quot;, &quot;订单删除&quot;, &quot;TRADE_DEL&quot;, &quot;0&quot;));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        CompositeSystemMenu all = new CompositeSystemMenu(&quot;所有系统&quot;, &quot;所有系统的菜单&quot;);</div><div class=\"line\">        all.add(userCenterMenu, tradeMenu);</div><div class=\"line\"></div><div class=\"line\">        CompositeClient compositeClient = new CompositeClient(all);</div><div class=\"line\">        compositeClient.printMenu();</div><div class=\"line\">        compositeClient.printAllMenu();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//客户端调用</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 对比迭代其客户端,发现组合模式的客户端非常简单</div><div class=\"line\"> */</div><div class=\"line\">class CompositeClient &#123;</div><div class=\"line\"></div><div class=\"line\">    MenuComponent allMenus;</div><div class=\"line\"></div><div class=\"line\">    public CompositeClient(MenuComponent allMenus) &#123;</div><div class=\"line\">        this.allMenus = allMenus;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void printMenu() &#123;</div><div class=\"line\">        allMenus.print();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void printAllMenu()&#123;</div><div class=\"line\"></div><div class=\"line\">        Iterator iterator = allMenus.createIterator();</div><div class=\"line\">        while (iterator.hasNext())&#123;</div><div class=\"line\">            MenuComponent menu = (MenuComponent)iterator.next();</div><div class=\"line\">            try &#123;</div><div class=\"line\">                menu.print();</div><div class=\"line\">            &#125;catch (UnsupportedOperationException e)&#123;&#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 菜单组件抽象类</div><div class=\"line\"> * 所有的组件都必须实现当前接口,然后,叶节点和组合节点的角色不同,</div><div class=\"line\"> * 所以有些方法可能并不适合某种节点,面对这种情况,最好抛出运行时异常</div><div class=\"line\"> */</div><div class=\"line\">abstract class MenuComponent &#123;</div><div class=\"line\"></div><div class=\"line\">    public void add(MenuComponent... menuComponent) &#123;</div><div class=\"line\">        throw new UnsupportedOperationException();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void remove(MenuComponent menuComponent) &#123;</div><div class=\"line\">        throw new UnsupportedOperationException();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public MenuComponent getChild(int i) &#123;</div><div class=\"line\">        throw new UnsupportedOperationException();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public String getName() &#123;</div><div class=\"line\">        throw new UnsupportedOperationException();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 描述</div><div class=\"line\">     **/</div><div class=\"line\">    public String getDescribe() &#123;</div><div class=\"line\">        throw new UnsupportedOperationException();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public String getCode() &#123;</div><div class=\"line\">        throw new UnsupportedOperationException();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public String getId() &#123;</div><div class=\"line\">        throw new UnsupportedOperationException();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void print() &#123;</div><div class=\"line\">        throw new UnsupportedOperationException();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    abstract java.util.Iterator createIterator();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/***</div><div class=\"line\"> * 系统菜单</div><div class=\"line\"> */</div><div class=\"line\">class CompositeSystemMenu extends MenuComponent &#123;</div><div class=\"line\"></div><div class=\"line\">    ArrayList menuComponents = new ArrayList();</div><div class=\"line\">    String name;</div><div class=\"line\">    String describe;</div><div class=\"line\"></div><div class=\"line\">    public CompositeSystemMenu(String name, String describe) &#123;</div><div class=\"line\">        this.name = name;</div><div class=\"line\">        this.describe = describe;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void add(MenuComponent... menuComponent) &#123;</div><div class=\"line\"></div><div class=\"line\">        for (MenuComponent m : menuComponent) &#123;</div><div class=\"line\">            menuComponents.add(m);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void remove(MenuComponent menuComponent) &#123;</div><div class=\"line\">        menuComponents.remove(menuComponent);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public MenuComponent getChild(int i) &#123;</div><div class=\"line\">        return (MenuComponent) menuComponents.get(i);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void print() &#123;</div><div class=\"line\">        System.out.println(this.toString());</div><div class=\"line\">        java.util.Iterator iterator = menuComponents.iterator();</div><div class=\"line\">        while (iterator.hasNext()) &#123;</div><div class=\"line\">            MenuComponent menuComponent = (MenuComponent) iterator.next();</div><div class=\"line\">            menuComponent.print();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String getName() &#123;</div><div class=\"line\">        return this.name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String getDescribe() &#123;</div><div class=\"line\">        return this.describe;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String getId() &#123;</div><div class=\"line\">        return super.getId();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String getCode() &#123;</div><div class=\"line\">        return super.getCode();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String toString() &#123;</div><div class=\"line\">        return &quot;SystemMenu&#123;&quot; +</div><div class=\"line\">                &quot;, name=&apos;&quot; + name + &apos;\\&apos;&apos; +</div><div class=\"line\">                &quot;, describe=&apos;&quot; + describe + &apos;\\&apos;&apos; +</div><div class=\"line\">                &apos;&#125;&apos;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    Iterator createIterator() &#123;</div><div class=\"line\">        return new CompositeSystemMenuIterator(menuComponents.iterator());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    class CompositeSystemMenuIterator implements java.util.Iterator&#123;</div><div class=\"line\"></div><div class=\"line\">        Stack stack = new Stack();</div><div class=\"line\"></div><div class=\"line\">        public CompositeSystemMenuIterator(Iterator iterator) &#123;</div><div class=\"line\">           stack.push(iterator);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        @Override</div><div class=\"line\">        public boolean hasNext() &#123;</div><div class=\"line\"></div><div class=\"line\">            if(stack.isEmpty())&#123;return false;&#125;</div><div class=\"line\">            else&#123;</div><div class=\"line\">                Iterator iterator = (Iterator)stack.peek();</div><div class=\"line\"></div><div class=\"line\">                if(!iterator.hasNext())&#123;</div><div class=\"line\">                    stack.pop();</div><div class=\"line\">                    return hasNext();</div><div class=\"line\">                &#125;else &#123;</div><div class=\"line\">                    return true;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        @Override</div><div class=\"line\">        public Object next() &#123;</div><div class=\"line\">           if(hasNext())&#123;</div><div class=\"line\"></div><div class=\"line\">               Iterator iterator = (Iterator)stack.peek();</div><div class=\"line\">               MenuComponent component = (MenuComponent)iterator.next();</div><div class=\"line\"></div><div class=\"line\">               if(component instanceof CompositeSystemMenu)&#123;</div><div class=\"line\">                   stack.push(component.createIterator());</div><div class=\"line\">               &#125;</div><div class=\"line\">               return component;</div><div class=\"line\">           &#125;else &#123;</div><div class=\"line\">               return null;</div><div class=\"line\">           &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        @Override</div><div class=\"line\">        public void remove() &#123;</div><div class=\"line\">         throw  new UnsupportedOperationException();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/***</div><div class=\"line\"> * 菜单集合</div><div class=\"line\"> */</div><div class=\"line\">class CompositeMenuItem extends MenuComponent &#123;</div><div class=\"line\"></div><div class=\"line\">    public CompositeMenuItem(String code, String id, String name, String paterId) &#123;</div><div class=\"line\">        this.code = code;</div><div class=\"line\">        this.id = id;</div><div class=\"line\">        this.name = name;</div><div class=\"line\">        this.paterId = paterId;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private String id;</div><div class=\"line\">    private String name;</div><div class=\"line\">    private String code;</div><div class=\"line\">    private String paterId;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String getCode() &#123;</div><div class=\"line\">        return code;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String getId() &#123;</div><div class=\"line\">        return id;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String getName() &#123;</div><div class=\"line\">        return name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public String getPaterId() &#123;</div><div class=\"line\">        return paterId;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void print() &#123;</div><div class=\"line\">        System.out.println(this.toString());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String toString() &#123;</div><div class=\"line\">        return &quot;MenuItem&#123;&quot; +</div><div class=\"line\">                &quot;code=&apos;&quot; + code + &apos;\\&apos;&apos; +</div><div class=\"line\">                &quot;, id=&apos;&quot; + id + &apos;\\&apos;&apos; +</div><div class=\"line\">                &quot;, name=&apos;&quot; + name + &apos;\\&apos;&apos; +</div><div class=\"line\">                &quot;, paterId=&apos;&quot; + paterId + &apos;\\&apos;&apos; +</div><div class=\"line\">                &apos;&#125;&apos;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    Iterator createIterator() &#123;</div><div class=\"line\">        return new NullIterator();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    private class NullIterator implements java.util.Iterator&#123;</div><div class=\"line\"></div><div class=\"line\">        @Override</div><div class=\"line\">        public boolean hasNext() &#123;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        @Override</div><div class=\"line\">        public Object next() &#123;</div><div class=\"line\">            return null;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        @Override</div><div class=\"line\">        public void remove() &#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h3 id=\"组合模式-允许你将对象组合成树形结构来表现-“整体-部分”-层次结构-组合能让客户以一致的方式处理个别对象以及对象组合\"><a href=\"#组合模式-允许你将对象组合成树形结构来表现-“整体-部分”-层次结构-组合能让客户以一致的方式处理个别对象以及对象组合\" class=\"headerlink\" title=\"组合模式 允许你将对象组合成树形结构来表现 “整体/部分” 层次结构, 组合能让客户以一致的方式处理个别对象以及对象组合\"></a>组合模式 允许你将对象组合成树形结构来表现 “整体/部分” 层次结构, 组合能让客户以一致的方式处理个别对象以及对象组合</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * ***当前例子为解决 迭代器模式中出现的问题***</div><div class=\"line\"> * 建议先看 迭代器模式</div><div class=\"line\"> * 组合模式:   允许你将对象组合成树形结构来表现 &quot;整体/部分&quot; 层次结构,</div><div class=\"line\"> *       组合能让客户以一致的方式处理个别对象以及对象组合</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * 当前实现方式: 就是将迭代器中的需要编码写入的 系统及菜单更换为 基于组合模式动态组织</div><div class=\"line\"> *</div><div class=\"line\"> * 要点:</div><div class=\"line\"> * 1.迭代器允许访问聚合的元素,而不需要暴露它的内部结构(存储方式)</div><div class=\"line\"> * 2.迭代器将遍历聚合的工作封装进一个对象中</div><div class=\"line\"> * 3.当使用迭代器的时候,我们依赖聚合提供遍历</div><div class=\"line\"> * 4.迭代器提供一个通用的接口,让我们遍历聚合的项,当我们编码使用聚合项时,就可以使用多态机制</div><div class=\"line\"> * 5.我们应该努力让一个类只分配一个责任</div><div class=\"line\"> * 6.组合模式提供一个结构,可同时包容个别对象和组合对象</div><div class=\"line\"> * 7.组合模式允许客户对个别对象以及组合对象一视同仁</div><div class=\"line\"> * 8.组合结构内的任意对象称为组件,组件可以是组合,也可以是叶节点</div><div class=\"line\"> * 9.在实现组合模式时,有许多设计上的折衷,你要根据需要平横透明性和安全性</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\">public class CompositePattern &#123;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String args[]) &#123;</div><div class=\"line\"></div><div class=\"line\">        CompositeSystemMenu userCenterMenu = new CompositeSystemMenu(&quot;用户系统&quot;, &quot;这是用户系统的菜单&quot;);</div><div class=\"line\">        CompositeSystemMenu tradeMenu = new CompositeSystemMenu(&quot;交易系统&quot;, &quot;交易系统菜单&quot;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        userCenterMenu.add(</div><div class=\"line\">                new CompositeMenuItem(&quot;1&quot;, &quot;用户注册&quot;, &quot;USER_REG&quot;, &quot;0&quot;),</div><div class=\"line\">                new CompositeMenuItem(&quot;2&quot;, &quot;用户新增&quot;, &quot;USER_ADD&quot;, &quot;0&quot;),</div><div class=\"line\">                new CompositeMenuItem(&quot;3&quot;, &quot;用户删除&quot;, &quot;USER_ADD&quot;, &quot;0&quot;));</div><div class=\"line\"></div><div class=\"line\">        tradeMenu.add(new CompositeMenuItem(&quot;1&quot;, &quot;订单查看&quot;, &quot;TRADE_SEL&quot;, &quot;0&quot;),</div><div class=\"line\">                new CompositeMenuItem(&quot;1&quot;, &quot;订单处理&quot;, &quot;TRADE_OPE&quot;, &quot;0&quot;),</div><div class=\"line\">                new CompositeMenuItem(&quot;1&quot;, &quot;订单删除&quot;, &quot;TRADE_DEL&quot;, &quot;0&quot;));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        CompositeSystemMenu all = new CompositeSystemMenu(&quot;所有系统&quot;, &quot;所有系统的菜单&quot;);</div><div class=\"line\">        all.add(userCenterMenu, tradeMenu);</div><div class=\"line\"></div><div class=\"line\">        CompositeClient compositeClient = new CompositeClient(all);</div><div class=\"line\">        compositeClient.printMenu();</div><div class=\"line\">        compositeClient.printAllMenu();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//客户端调用</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 对比迭代其客户端,发现组合模式的客户端非常简单</div><div class=\"line\"> */</div><div class=\"line\">class CompositeClient &#123;</div><div class=\"line\"></div><div class=\"line\">    MenuComponent allMenus;</div><div class=\"line\"></div><div class=\"line\">    public CompositeClient(MenuComponent allMenus) &#123;</div><div class=\"line\">        this.allMenus = allMenus;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void printMenu() &#123;</div><div class=\"line\">        allMenus.print();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void printAllMenu()&#123;</div><div class=\"line\"></div><div class=\"line\">        Iterator iterator = allMenus.createIterator();</div><div class=\"line\">        while (iterator.hasNext())&#123;</div><div class=\"line\">            MenuComponent menu = (MenuComponent)iterator.next();</div><div class=\"line\">            try &#123;</div><div class=\"line\">                menu.print();</div><div class=\"line\">            &#125;catch (UnsupportedOperationException e)&#123;&#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 菜单组件抽象类</div><div class=\"line\"> * 所有的组件都必须实现当前接口,然后,叶节点和组合节点的角色不同,</div><div class=\"line\"> * 所以有些方法可能并不适合某种节点,面对这种情况,最好抛出运行时异常</div><div class=\"line\"> */</div><div class=\"line\">abstract class MenuComponent &#123;</div><div class=\"line\"></div><div class=\"line\">    public void add(MenuComponent... menuComponent) &#123;</div><div class=\"line\">        throw new UnsupportedOperationException();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void remove(MenuComponent menuComponent) &#123;</div><div class=\"line\">        throw new UnsupportedOperationException();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public MenuComponent getChild(int i) &#123;</div><div class=\"line\">        throw new UnsupportedOperationException();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public String getName() &#123;</div><div class=\"line\">        throw new UnsupportedOperationException();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 描述</div><div class=\"line\">     **/</div><div class=\"line\">    public String getDescribe() &#123;</div><div class=\"line\">        throw new UnsupportedOperationException();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public String getCode() &#123;</div><div class=\"line\">        throw new UnsupportedOperationException();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public String getId() &#123;</div><div class=\"line\">        throw new UnsupportedOperationException();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void print() &#123;</div><div class=\"line\">        throw new UnsupportedOperationException();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    abstract java.util.Iterator createIterator();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/***</div><div class=\"line\"> * 系统菜单</div><div class=\"line\"> */</div><div class=\"line\">class CompositeSystemMenu extends MenuComponent &#123;</div><div class=\"line\"></div><div class=\"line\">    ArrayList menuComponents = new ArrayList();</div><div class=\"line\">    String name;</div><div class=\"line\">    String describe;</div><div class=\"line\"></div><div class=\"line\">    public CompositeSystemMenu(String name, String describe) &#123;</div><div class=\"line\">        this.name = name;</div><div class=\"line\">        this.describe = describe;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void add(MenuComponent... menuComponent) &#123;</div><div class=\"line\"></div><div class=\"line\">        for (MenuComponent m : menuComponent) &#123;</div><div class=\"line\">            menuComponents.add(m);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void remove(MenuComponent menuComponent) &#123;</div><div class=\"line\">        menuComponents.remove(menuComponent);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public MenuComponent getChild(int i) &#123;</div><div class=\"line\">        return (MenuComponent) menuComponents.get(i);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void print() &#123;</div><div class=\"line\">        System.out.println(this.toString());</div><div class=\"line\">        java.util.Iterator iterator = menuComponents.iterator();</div><div class=\"line\">        while (iterator.hasNext()) &#123;</div><div class=\"line\">            MenuComponent menuComponent = (MenuComponent) iterator.next();</div><div class=\"line\">            menuComponent.print();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String getName() &#123;</div><div class=\"line\">        return this.name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String getDescribe() &#123;</div><div class=\"line\">        return this.describe;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String getId() &#123;</div><div class=\"line\">        return super.getId();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String getCode() &#123;</div><div class=\"line\">        return super.getCode();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String toString() &#123;</div><div class=\"line\">        return &quot;SystemMenu&#123;&quot; +</div><div class=\"line\">                &quot;, name=&apos;&quot; + name + &apos;\\&apos;&apos; +</div><div class=\"line\">                &quot;, describe=&apos;&quot; + describe + &apos;\\&apos;&apos; +</div><div class=\"line\">                &apos;&#125;&apos;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    Iterator createIterator() &#123;</div><div class=\"line\">        return new CompositeSystemMenuIterator(menuComponents.iterator());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    class CompositeSystemMenuIterator implements java.util.Iterator&#123;</div><div class=\"line\"></div><div class=\"line\">        Stack stack = new Stack();</div><div class=\"line\"></div><div class=\"line\">        public CompositeSystemMenuIterator(Iterator iterator) &#123;</div><div class=\"line\">           stack.push(iterator);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        @Override</div><div class=\"line\">        public boolean hasNext() &#123;</div><div class=\"line\"></div><div class=\"line\">            if(stack.isEmpty())&#123;return false;&#125;</div><div class=\"line\">            else&#123;</div><div class=\"line\">                Iterator iterator = (Iterator)stack.peek();</div><div class=\"line\"></div><div class=\"line\">                if(!iterator.hasNext())&#123;</div><div class=\"line\">                    stack.pop();</div><div class=\"line\">                    return hasNext();</div><div class=\"line\">                &#125;else &#123;</div><div class=\"line\">                    return true;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        @Override</div><div class=\"line\">        public Object next() &#123;</div><div class=\"line\">           if(hasNext())&#123;</div><div class=\"line\"></div><div class=\"line\">               Iterator iterator = (Iterator)stack.peek();</div><div class=\"line\">               MenuComponent component = (MenuComponent)iterator.next();</div><div class=\"line\"></div><div class=\"line\">               if(component instanceof CompositeSystemMenu)&#123;</div><div class=\"line\">                   stack.push(component.createIterator());</div><div class=\"line\">               &#125;</div><div class=\"line\">               return component;</div><div class=\"line\">           &#125;else &#123;</div><div class=\"line\">               return null;</div><div class=\"line\">           &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        @Override</div><div class=\"line\">        public void remove() &#123;</div><div class=\"line\">         throw  new UnsupportedOperationException();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/***</div><div class=\"line\"> * 菜单集合</div><div class=\"line\"> */</div><div class=\"line\">class CompositeMenuItem extends MenuComponent &#123;</div><div class=\"line\"></div><div class=\"line\">    public CompositeMenuItem(String code, String id, String name, String paterId) &#123;</div><div class=\"line\">        this.code = code;</div><div class=\"line\">        this.id = id;</div><div class=\"line\">        this.name = name;</div><div class=\"line\">        this.paterId = paterId;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private String id;</div><div class=\"line\">    private String name;</div><div class=\"line\">    private String code;</div><div class=\"line\">    private String paterId;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String getCode() &#123;</div><div class=\"line\">        return code;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String getId() &#123;</div><div class=\"line\">        return id;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String getName() &#123;</div><div class=\"line\">        return name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public String getPaterId() &#123;</div><div class=\"line\">        return paterId;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void print() &#123;</div><div class=\"line\">        System.out.println(this.toString());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String toString() &#123;</div><div class=\"line\">        return &quot;MenuItem&#123;&quot; +</div><div class=\"line\">                &quot;code=&apos;&quot; + code + &apos;\\&apos;&apos; +</div><div class=\"line\">                &quot;, id=&apos;&quot; + id + &apos;\\&apos;&apos; +</div><div class=\"line\">                &quot;, name=&apos;&quot; + name + &apos;\\&apos;&apos; +</div><div class=\"line\">                &quot;, paterId=&apos;&quot; + paterId + &apos;\\&apos;&apos; +</div><div class=\"line\">                &apos;&#125;&apos;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    Iterator createIterator() &#123;</div><div class=\"line\">        return new NullIterator();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    private class NullIterator implements java.util.Iterator&#123;</div><div class=\"line\"></div><div class=\"line\">        @Override</div><div class=\"line\">        public boolean hasNext() &#123;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        @Override</div><div class=\"line\">        public Object next() &#123;</div><div class=\"line\">            return null;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        @Override</div><div class=\"line\">        public void remove() &#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"设计模式装饰模式-不解释","date":"2017-03-10T09:17:46.000Z","layout":"clean-blog","slug":"设计模式装饰模式-不解释","_content":"\n### 装饰模式:动态扩展功能\n\n```\n\n\nimport java.io.*;\nimport java.util.ArrayList;\n\n/**\n * 装饰模式:动态扩展功能\n * 基于继承的组合方式,灵活配置(InputStream ==> FileInputStream ==> BufferedInputStream)\n * 其实现核心: 使用对象中返回方法加工再返回\n * 缺点: 如果被装饰者中数据源非常多,不建议使用组合装饰,因为装饰者除去装饰方法,其他数据源也好同步更新\n * 适合: 少量数据原 其方法都是基于数据源操作\n * 可以参考 java.io 使用继承方式使用,只装饰需要处理的方法,因为是单一数据源,不需要复制其他属性\n * 单一数据源: 不是必须只是一个属性,而是基类型中构造器将如参对象进行属性赋值\n */\npublic class DecoratePattern {\n\n\n    public static void main(String args[]) {\n\n        //装饰模式演示\n        //decorateDemo();\n\n        //java IO 演示\n        //inputStreamExtDemo()\n\n        //上面两个看不不明白的看这里\n        //角色\n        //给角色装饰各种装备\n        GameRole game = new GameMage();\n\n        //把角色装饰三个武器\n        game = new YiTian(game);\n        game = new TuLongDao(game);\n        game = new NanMingLiHuoJian(game);\n\n        //新的角色\n        //game = new GameKnight();\n       // game = new NanMingLiHuoJian(game);\n\n       System.out.print( game.toString());\n        //游戏展示\n      //  new GameShow(game);\n\n\n    }\n\n\n    //java.io 演示\n    public static void inputStreamExtDemo() {\n\n        int c;\n        try {\n            InputStream in =\n                    new LowerCaseInputStream\n                            (new BufferedInputStream(\n                                    new FileInputStream(\"test.txt\")));\n\n            while ((c = in.read()) >= 0) {\n                System.out.println((char) c);\n            }\n\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    /**\n     * 装饰模式演示\n     * **/\n    public static void decorateDemo() {\n\n        Beverage beverage = new Espresso();\n\n        System.out.println(beverage.getDescription() + \" $\" + beverage.cost());\n\n        beverage = new Mocha(beverage);\n\n        System.out.println(beverage.getDescription() + \" $\" + beverage.cost());\n    }\n\n}\n\n\n/**************************************  Beverage ******************************************************************************************/\n\n\nabstract class Beverage {\n\n    String description = \"Unknown Beverage\";\n\n    public String getDescription() {\n        return description;\n    }\n\n    public abstract double cost();\n}\n\nabstract class CondimentDecorator extends Beverage {\n    public abstract String getDescription();\n}\n\n//被装饰\nclass Espresso extends Beverage {\n\n    public Espresso() {\n        description = \"Espresso\";\n    }\n\n    @Override\n    public double cost() {\n        return 1.99;\n    }\n}\n\n//被装饰\nclass HouseBlend extends Beverage {\n\n    public HouseBlend() {\n        description = \"House Blend\";\n    }\n\n    @Override\n    public double cost() {\n        return 0.89;\n    }\n}\n\n//装饰者\nclass Mocha extends CondimentDecorator {\n\n    Beverage beverage;\n\n    public Mocha(Beverage beverage) {\n        this.beverage = beverage;\n    }\n\n\n    @Override\n    public String getDescription() {\n        return beverage.getDescription() + \",Mocha\";\n    }\n\n    @Override\n    public double cost() {\n        return 0.2 + beverage.cost();\n    }\n}\n\n/**************************************  LowerCaseInputStream ******************************************************************************************/\n\n\n//java io\nclass LowerCaseInputStream extends FilterInputStream {\n\n    public LowerCaseInputStream(InputStream in) {\n        super(in);\n    }\n\n    public int read() throws IOException {\n        int c = super.read();\n        return (c == -1 ? c : Character.toLowerCase((char) c));\n    }\n\n    public int read(byte[] b, int offset, int len) throws IOException {\n        int result = super.read(b, offset, len);\n        for (int i = offset; i < offset + result; i++) {\n            b[i] = (byte) Character.toLowerCase((char) b[i]);\n        }\n\n        return result;\n    }\n\n\n}\n\n\n/**************************************  GameRole ******************************************************************************************/\n\n//游戏超类\nabstract class GameRole {\n\n    String name=\"角色名称\";\n    ArrayList<String> equip;\n    public GameRole(){}\n\n    public GameRole(String name){\n        this.name = name;\n    }\n\n    public GameRole(String name, ArrayList<String> equip){\n        this.name = name;\n        this.equip = equip;\n    }\n\n    public GameRole(GameRole role){\n        this.name = role.getName();\n        this.equip = role.getEquip();\n    }\n\n\n    abstract String getDescription();\n\n    abstract int getAttack();\n\n    public String getName() {\n        return name;\n    }\n\n    public ArrayList<String> getEquip() {\n        return equip==null?new ArrayList<>():equip;\n    }\n\n}\n\n//游戏角色装备\n//必须要实现的方法\nabstract class GameEquip extends GameRole {\n\n\n   public GameEquip(GameRole role){\n       super(role);\n   }\n    public abstract String getDescription();\n    public abstract ArrayList<String> getEquip();\n\n    @Override\n    public String toString(){\n        StringBuffer stringBuffer = new StringBuffer();\n        stringBuffer.append(\"名称: \").append(this.getName()).append(\" \\n\");\n        stringBuffer.append(\"描述: \").append(this.getDescription()).append(\"\\n\");\n        stringBuffer.append(\"总攻击: \").append(this.getAttack()).append(\"\\n\");\n        stringBuffer.append(\"装备: \").append(this.getEquip().toString()).append(\"\\n\");\n        return stringBuffer.toString();\n    }\n\n\n\n\n}\n\n/***\n *\n *  游戏显示\n * */\nclass GameShow {\n\n\n    GameRole game;\n\n    public GameShow(GameRole gameRole) {\n        this.game = gameRole;\n        StringBuffer stringBuffer = new StringBuffer();\n        stringBuffer.append(\"名称: \").append(game.getName()).append(\" \\n\");\n        stringBuffer.append(\"描述: \").append(game.getDescription()).append(\"\\n\");\n        stringBuffer.append(\"总攻击: \").append(game.getAttack()).append(\"\\n\");\n        stringBuffer.append(\"装备: \").append(game.getEquip().toString()).append(\"\\n\");\n\n        System.out.print(stringBuffer.toString());\n    }\n\n\n\n}\n\n\n/**\n * 倚天剑 就用拼音了,真不好翻译\n **/\nclass YiTian extends GameEquip {\n\n    private int atk = 200;\n\n\n    GameRole game;\n\n\n    //复制必要数据\n    public YiTian(GameRole game) {\n        super(game);\n        this.game = game;\n\n    }\n\n    @Override\n    int getAttack() {\n        return atk + game.getAttack();\n    }\n\n    @Override\n    public String getDescription() {\n        return game.getDescription()+\", 倚天剑攻击力+\" + atk+\"\";\n    }\n\n    @Override\n    public ArrayList<String> getEquip() {\n\n        this.equip.add(\"倚天剑\");\n        return equip;\n    }\n}\n\n//\n///**\n// * 屠龙刀 就用拼音了,真不好翻译\n// **/\nclass TuLongDao extends GameEquip {\n\n    private int atk = 200;\n\n\n    GameRole game;\n\n    public TuLongDao(GameRole game) {\n        super(game);\n        this.game = game;\n\n    }\n\n    @Override\n    int getAttack() {\n        return atk + game.getAttack();\n    }\n\n    @Override\n    public String getDescription() {\n        return game.getDescription()+\",屠龙刀攻击力+\" + atk+\"\";\n    }\n\n    @Override\n    public ArrayList<String> getEquip() {\n\n        equip.add(\"屠龙刀\");\n        return equip;\n    }\n}\n\n//\n///**\n// * 南明离火剑 就用拼音了,真不好翻译\n// **/\nclass NanMingLiHuoJian extends GameEquip {\n\n    private int atk = 1200;\n\n\n    GameRole game;\n\n    public NanMingLiHuoJian(GameRole game) {\n        super(game);\n        this.game = game;\n\n    }\n\n    @Override\n    int getAttack() {\n        return atk + game.getAttack();\n    }\n\n    @Override\n    public String getDescription() {\n        return game.getDescription()+\",南明离火剑攻击力+\" + atk+\"\";\n    }\n\n    @Override\n    public ArrayList<String> getEquip() {\n\n        equip.add(\"南明离火剑\");\n        return equip;\n    }\n}\n\n\n//角色-> 法师\nclass GameMage extends GameRole {\n\n\n    public GameMage(){\n        this.name = \"法师\";\n    }\n\n    @Override\n    public String getDescription() {\n        return \"远程攻击\";\n    }\n\n\n    @Override\n    int getAttack() {\n        return 1;\n    }\n\n}\n\n\n//角色-> 武士\nclass GameKnight extends GameRole {\n\n\n    public GameKnight(){\n        this.name = \"武士\";\n    }\n\n    @Override\n    public String getDescription() {\n        return \"近战型攻击\";\n    }\n\n\n    @Override\n    int getAttack() {\n        return 1;\n    }\n\n}\n\n\n```","source":"_posts/设计模式装饰模式-不解释.md","raw":"---\ntitle: 设计模式装饰模式-不解释\ndate: 2017-03-10 17:17:46\ntags: 设计模式\nlayout: clean-blog\nslug: DecoratePattern\n\n---\n\n### 装饰模式:动态扩展功能\n\n```\n\n\nimport java.io.*;\nimport java.util.ArrayList;\n\n/**\n * 装饰模式:动态扩展功能\n * 基于继承的组合方式,灵活配置(InputStream ==> FileInputStream ==> BufferedInputStream)\n * 其实现核心: 使用对象中返回方法加工再返回\n * 缺点: 如果被装饰者中数据源非常多,不建议使用组合装饰,因为装饰者除去装饰方法,其他数据源也好同步更新\n * 适合: 少量数据原 其方法都是基于数据源操作\n * 可以参考 java.io 使用继承方式使用,只装饰需要处理的方法,因为是单一数据源,不需要复制其他属性\n * 单一数据源: 不是必须只是一个属性,而是基类型中构造器将如参对象进行属性赋值\n */\npublic class DecoratePattern {\n\n\n    public static void main(String args[]) {\n\n        //装饰模式演示\n        //decorateDemo();\n\n        //java IO 演示\n        //inputStreamExtDemo()\n\n        //上面两个看不不明白的看这里\n        //角色\n        //给角色装饰各种装备\n        GameRole game = new GameMage();\n\n        //把角色装饰三个武器\n        game = new YiTian(game);\n        game = new TuLongDao(game);\n        game = new NanMingLiHuoJian(game);\n\n        //新的角色\n        //game = new GameKnight();\n       // game = new NanMingLiHuoJian(game);\n\n       System.out.print( game.toString());\n        //游戏展示\n      //  new GameShow(game);\n\n\n    }\n\n\n    //java.io 演示\n    public static void inputStreamExtDemo() {\n\n        int c;\n        try {\n            InputStream in =\n                    new LowerCaseInputStream\n                            (new BufferedInputStream(\n                                    new FileInputStream(\"test.txt\")));\n\n            while ((c = in.read()) >= 0) {\n                System.out.println((char) c);\n            }\n\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    /**\n     * 装饰模式演示\n     * **/\n    public static void decorateDemo() {\n\n        Beverage beverage = new Espresso();\n\n        System.out.println(beverage.getDescription() + \" $\" + beverage.cost());\n\n        beverage = new Mocha(beverage);\n\n        System.out.println(beverage.getDescription() + \" $\" + beverage.cost());\n    }\n\n}\n\n\n/**************************************  Beverage ******************************************************************************************/\n\n\nabstract class Beverage {\n\n    String description = \"Unknown Beverage\";\n\n    public String getDescription() {\n        return description;\n    }\n\n    public abstract double cost();\n}\n\nabstract class CondimentDecorator extends Beverage {\n    public abstract String getDescription();\n}\n\n//被装饰\nclass Espresso extends Beverage {\n\n    public Espresso() {\n        description = \"Espresso\";\n    }\n\n    @Override\n    public double cost() {\n        return 1.99;\n    }\n}\n\n//被装饰\nclass HouseBlend extends Beverage {\n\n    public HouseBlend() {\n        description = \"House Blend\";\n    }\n\n    @Override\n    public double cost() {\n        return 0.89;\n    }\n}\n\n//装饰者\nclass Mocha extends CondimentDecorator {\n\n    Beverage beverage;\n\n    public Mocha(Beverage beverage) {\n        this.beverage = beverage;\n    }\n\n\n    @Override\n    public String getDescription() {\n        return beverage.getDescription() + \",Mocha\";\n    }\n\n    @Override\n    public double cost() {\n        return 0.2 + beverage.cost();\n    }\n}\n\n/**************************************  LowerCaseInputStream ******************************************************************************************/\n\n\n//java io\nclass LowerCaseInputStream extends FilterInputStream {\n\n    public LowerCaseInputStream(InputStream in) {\n        super(in);\n    }\n\n    public int read() throws IOException {\n        int c = super.read();\n        return (c == -1 ? c : Character.toLowerCase((char) c));\n    }\n\n    public int read(byte[] b, int offset, int len) throws IOException {\n        int result = super.read(b, offset, len);\n        for (int i = offset; i < offset + result; i++) {\n            b[i] = (byte) Character.toLowerCase((char) b[i]);\n        }\n\n        return result;\n    }\n\n\n}\n\n\n/**************************************  GameRole ******************************************************************************************/\n\n//游戏超类\nabstract class GameRole {\n\n    String name=\"角色名称\";\n    ArrayList<String> equip;\n    public GameRole(){}\n\n    public GameRole(String name){\n        this.name = name;\n    }\n\n    public GameRole(String name, ArrayList<String> equip){\n        this.name = name;\n        this.equip = equip;\n    }\n\n    public GameRole(GameRole role){\n        this.name = role.getName();\n        this.equip = role.getEquip();\n    }\n\n\n    abstract String getDescription();\n\n    abstract int getAttack();\n\n    public String getName() {\n        return name;\n    }\n\n    public ArrayList<String> getEquip() {\n        return equip==null?new ArrayList<>():equip;\n    }\n\n}\n\n//游戏角色装备\n//必须要实现的方法\nabstract class GameEquip extends GameRole {\n\n\n   public GameEquip(GameRole role){\n       super(role);\n   }\n    public abstract String getDescription();\n    public abstract ArrayList<String> getEquip();\n\n    @Override\n    public String toString(){\n        StringBuffer stringBuffer = new StringBuffer();\n        stringBuffer.append(\"名称: \").append(this.getName()).append(\" \\n\");\n        stringBuffer.append(\"描述: \").append(this.getDescription()).append(\"\\n\");\n        stringBuffer.append(\"总攻击: \").append(this.getAttack()).append(\"\\n\");\n        stringBuffer.append(\"装备: \").append(this.getEquip().toString()).append(\"\\n\");\n        return stringBuffer.toString();\n    }\n\n\n\n\n}\n\n/***\n *\n *  游戏显示\n * */\nclass GameShow {\n\n\n    GameRole game;\n\n    public GameShow(GameRole gameRole) {\n        this.game = gameRole;\n        StringBuffer stringBuffer = new StringBuffer();\n        stringBuffer.append(\"名称: \").append(game.getName()).append(\" \\n\");\n        stringBuffer.append(\"描述: \").append(game.getDescription()).append(\"\\n\");\n        stringBuffer.append(\"总攻击: \").append(game.getAttack()).append(\"\\n\");\n        stringBuffer.append(\"装备: \").append(game.getEquip().toString()).append(\"\\n\");\n\n        System.out.print(stringBuffer.toString());\n    }\n\n\n\n}\n\n\n/**\n * 倚天剑 就用拼音了,真不好翻译\n **/\nclass YiTian extends GameEquip {\n\n    private int atk = 200;\n\n\n    GameRole game;\n\n\n    //复制必要数据\n    public YiTian(GameRole game) {\n        super(game);\n        this.game = game;\n\n    }\n\n    @Override\n    int getAttack() {\n        return atk + game.getAttack();\n    }\n\n    @Override\n    public String getDescription() {\n        return game.getDescription()+\", 倚天剑攻击力+\" + atk+\"\";\n    }\n\n    @Override\n    public ArrayList<String> getEquip() {\n\n        this.equip.add(\"倚天剑\");\n        return equip;\n    }\n}\n\n//\n///**\n// * 屠龙刀 就用拼音了,真不好翻译\n// **/\nclass TuLongDao extends GameEquip {\n\n    private int atk = 200;\n\n\n    GameRole game;\n\n    public TuLongDao(GameRole game) {\n        super(game);\n        this.game = game;\n\n    }\n\n    @Override\n    int getAttack() {\n        return atk + game.getAttack();\n    }\n\n    @Override\n    public String getDescription() {\n        return game.getDescription()+\",屠龙刀攻击力+\" + atk+\"\";\n    }\n\n    @Override\n    public ArrayList<String> getEquip() {\n\n        equip.add(\"屠龙刀\");\n        return equip;\n    }\n}\n\n//\n///**\n// * 南明离火剑 就用拼音了,真不好翻译\n// **/\nclass NanMingLiHuoJian extends GameEquip {\n\n    private int atk = 1200;\n\n\n    GameRole game;\n\n    public NanMingLiHuoJian(GameRole game) {\n        super(game);\n        this.game = game;\n\n    }\n\n    @Override\n    int getAttack() {\n        return atk + game.getAttack();\n    }\n\n    @Override\n    public String getDescription() {\n        return game.getDescription()+\",南明离火剑攻击力+\" + atk+\"\";\n    }\n\n    @Override\n    public ArrayList<String> getEquip() {\n\n        equip.add(\"南明离火剑\");\n        return equip;\n    }\n}\n\n\n//角色-> 法师\nclass GameMage extends GameRole {\n\n\n    public GameMage(){\n        this.name = \"法师\";\n    }\n\n    @Override\n    public String getDescription() {\n        return \"远程攻击\";\n    }\n\n\n    @Override\n    int getAttack() {\n        return 1;\n    }\n\n}\n\n\n//角色-> 武士\nclass GameKnight extends GameRole {\n\n\n    public GameKnight(){\n        this.name = \"武士\";\n    }\n\n    @Override\n    public String getDescription() {\n        return \"近战型攻击\";\n    }\n\n\n    @Override\n    int getAttack() {\n        return 1;\n    }\n\n}\n\n\n```","published":1,"updated":"2017-03-10T09:29:38.000Z","comments":1,"photos":[],"link":"","_id":"cj0uc8d0r000sey5rnblxh4po","content":"<h3 id=\"装饰模式-动态扩展功能\"><a href=\"#装饰模式-动态扩展功能\" class=\"headerlink\" title=\"装饰模式:动态扩展功能\"></a>装饰模式:动态扩展功能</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div><div class=\"line\">364</div><div class=\"line\">365</div><div class=\"line\">366</div><div class=\"line\">367</div><div class=\"line\">368</div><div class=\"line\">369</div><div class=\"line\">370</div><div class=\"line\">371</div><div class=\"line\">372</div><div class=\"line\">373</div><div class=\"line\">374</div><div class=\"line\">375</div><div class=\"line\">376</div><div class=\"line\">377</div><div class=\"line\">378</div><div class=\"line\">379</div><div class=\"line\">380</div><div class=\"line\">381</div><div class=\"line\">382</div><div class=\"line\">383</div><div class=\"line\">384</div><div class=\"line\">385</div><div class=\"line\">386</div><div class=\"line\">387</div><div class=\"line\">388</div><div class=\"line\">389</div><div class=\"line\">390</div><div class=\"line\">391</div><div class=\"line\">392</div><div class=\"line\">393</div><div class=\"line\">394</div><div class=\"line\">395</div><div class=\"line\">396</div><div class=\"line\">397</div><div class=\"line\">398</div><div class=\"line\">399</div><div class=\"line\">400</div><div class=\"line\">401</div><div class=\"line\">402</div><div class=\"line\">403</div><div class=\"line\">404</div><div class=\"line\">405</div><div class=\"line\">406</div><div class=\"line\">407</div><div class=\"line\">408</div><div class=\"line\">409</div><div class=\"line\">410</div><div class=\"line\">411</div><div class=\"line\">412</div><div class=\"line\">413</div><div class=\"line\">414</div><div class=\"line\">415</div><div class=\"line\">416</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">import java.io.*;</div><div class=\"line\">import java.util.ArrayList;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 装饰模式:动态扩展功能</div><div class=\"line\"> * 基于继承的组合方式,灵活配置(InputStream ==&gt; FileInputStream ==&gt; BufferedInputStream)</div><div class=\"line\"> * 其实现核心: 使用对象中返回方法加工再返回</div><div class=\"line\"> * 缺点: 如果被装饰者中数据源非常多,不建议使用组合装饰,因为装饰者除去装饰方法,其他数据源也好同步更新</div><div class=\"line\"> * 适合: 少量数据原 其方法都是基于数据源操作</div><div class=\"line\"> * 可以参考 java.io 使用继承方式使用,只装饰需要处理的方法,因为是单一数据源,不需要复制其他属性</div><div class=\"line\"> * 单一数据源: 不是必须只是一个属性,而是基类型中构造器将如参对象进行属性赋值</div><div class=\"line\"> */</div><div class=\"line\">public class DecoratePattern &#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public static void main(String args[]) &#123;</div><div class=\"line\"></div><div class=\"line\">        //装饰模式演示</div><div class=\"line\">        //decorateDemo();</div><div class=\"line\"></div><div class=\"line\">        //java IO 演示</div><div class=\"line\">        //inputStreamExtDemo()</div><div class=\"line\"></div><div class=\"line\">        //上面两个看不不明白的看这里</div><div class=\"line\">        //角色</div><div class=\"line\">        //给角色装饰各种装备</div><div class=\"line\">        GameRole game = new GameMage();</div><div class=\"line\"></div><div class=\"line\">        //把角色装饰三个武器</div><div class=\"line\">        game = new YiTian(game);</div><div class=\"line\">        game = new TuLongDao(game);</div><div class=\"line\">        game = new NanMingLiHuoJian(game);</div><div class=\"line\"></div><div class=\"line\">        //新的角色</div><div class=\"line\">        //game = new GameKnight();</div><div class=\"line\">       // game = new NanMingLiHuoJian(game);</div><div class=\"line\"></div><div class=\"line\">       System.out.print( game.toString());</div><div class=\"line\">        //游戏展示</div><div class=\"line\">      //  new GameShow(game);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    //java.io 演示</div><div class=\"line\">    public static void inputStreamExtDemo() &#123;</div><div class=\"line\"></div><div class=\"line\">        int c;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            InputStream in =</div><div class=\"line\">                    new LowerCaseInputStream</div><div class=\"line\">                            (new BufferedInputStream(</div><div class=\"line\">                                    new FileInputStream(&quot;test.txt&quot;)));</div><div class=\"line\"></div><div class=\"line\">            while ((c = in.read()) &gt;= 0) &#123;</div><div class=\"line\">                System.out.println((char) c);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        &#125; catch (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 装饰模式演示</div><div class=\"line\">     * **/</div><div class=\"line\">    public static void decorateDemo() &#123;</div><div class=\"line\"></div><div class=\"line\">        Beverage beverage = new Espresso();</div><div class=\"line\"></div><div class=\"line\">        System.out.println(beverage.getDescription() + &quot; $&quot; + beverage.cost());</div><div class=\"line\"></div><div class=\"line\">        beverage = new Mocha(beverage);</div><div class=\"line\"></div><div class=\"line\">        System.out.println(beverage.getDescription() + &quot; $&quot; + beverage.cost());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**************************************  Beverage ******************************************************************************************/</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">abstract class Beverage &#123;</div><div class=\"line\"></div><div class=\"line\">    String description = &quot;Unknown Beverage&quot;;</div><div class=\"line\"></div><div class=\"line\">    public String getDescription() &#123;</div><div class=\"line\">        return description;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public abstract double cost();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">abstract class CondimentDecorator extends Beverage &#123;</div><div class=\"line\">    public abstract String getDescription();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//被装饰</div><div class=\"line\">class Espresso extends Beverage &#123;</div><div class=\"line\"></div><div class=\"line\">    public Espresso() &#123;</div><div class=\"line\">        description = &quot;Espresso&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public double cost() &#123;</div><div class=\"line\">        return 1.99;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//被装饰</div><div class=\"line\">class HouseBlend extends Beverage &#123;</div><div class=\"line\"></div><div class=\"line\">    public HouseBlend() &#123;</div><div class=\"line\">        description = &quot;House Blend&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public double cost() &#123;</div><div class=\"line\">        return 0.89;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//装饰者</div><div class=\"line\">class Mocha extends CondimentDecorator &#123;</div><div class=\"line\"></div><div class=\"line\">    Beverage beverage;</div><div class=\"line\"></div><div class=\"line\">    public Mocha(Beverage beverage) &#123;</div><div class=\"line\">        this.beverage = beverage;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String getDescription() &#123;</div><div class=\"line\">        return beverage.getDescription() + &quot;,Mocha&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public double cost() &#123;</div><div class=\"line\">        return 0.2 + beverage.cost();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**************************************  LowerCaseInputStream ******************************************************************************************/</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//java io</div><div class=\"line\">class LowerCaseInputStream extends FilterInputStream &#123;</div><div class=\"line\"></div><div class=\"line\">    public LowerCaseInputStream(InputStream in) &#123;</div><div class=\"line\">        super(in);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public int read() throws IOException &#123;</div><div class=\"line\">        int c = super.read();</div><div class=\"line\">        return (c == -1 ? c : Character.toLowerCase((char) c));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public int read(byte[] b, int offset, int len) throws IOException &#123;</div><div class=\"line\">        int result = super.read(b, offset, len);</div><div class=\"line\">        for (int i = offset; i &lt; offset + result; i++) &#123;</div><div class=\"line\">            b[i] = (byte) Character.toLowerCase((char) b[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        return result;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**************************************  GameRole ******************************************************************************************/</div><div class=\"line\"></div><div class=\"line\">//游戏超类</div><div class=\"line\">abstract class GameRole &#123;</div><div class=\"line\"></div><div class=\"line\">    String name=&quot;角色名称&quot;;</div><div class=\"line\">    ArrayList&lt;String&gt; equip;</div><div class=\"line\">    public GameRole()&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    public GameRole(String name)&#123;</div><div class=\"line\">        this.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public GameRole(String name, ArrayList&lt;String&gt; equip)&#123;</div><div class=\"line\">        this.name = name;</div><div class=\"line\">        this.equip = equip;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public GameRole(GameRole role)&#123;</div><div class=\"line\">        this.name = role.getName();</div><div class=\"line\">        this.equip = role.getEquip();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    abstract String getDescription();</div><div class=\"line\"></div><div class=\"line\">    abstract int getAttack();</div><div class=\"line\"></div><div class=\"line\">    public String getName() &#123;</div><div class=\"line\">        return name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public ArrayList&lt;String&gt; getEquip() &#123;</div><div class=\"line\">        return equip==null?new ArrayList&lt;&gt;():equip;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//游戏角色装备</div><div class=\"line\">//必须要实现的方法</div><div class=\"line\">abstract class GameEquip extends GameRole &#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">   public GameEquip(GameRole role)&#123;</div><div class=\"line\">       super(role);</div><div class=\"line\">   &#125;</div><div class=\"line\">    public abstract String getDescription();</div><div class=\"line\">    public abstract ArrayList&lt;String&gt; getEquip();</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String toString()&#123;</div><div class=\"line\">        StringBuffer stringBuffer = new StringBuffer();</div><div class=\"line\">        stringBuffer.append(&quot;名称: &quot;).append(this.getName()).append(&quot; \\n&quot;);</div><div class=\"line\">        stringBuffer.append(&quot;描述: &quot;).append(this.getDescription()).append(&quot;\\n&quot;);</div><div class=\"line\">        stringBuffer.append(&quot;总攻击: &quot;).append(this.getAttack()).append(&quot;\\n&quot;);</div><div class=\"line\">        stringBuffer.append(&quot;装备: &quot;).append(this.getEquip().toString()).append(&quot;\\n&quot;);</div><div class=\"line\">        return stringBuffer.toString();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/***</div><div class=\"line\"> *</div><div class=\"line\"> *  游戏显示</div><div class=\"line\"> * */</div><div class=\"line\">class GameShow &#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    GameRole game;</div><div class=\"line\"></div><div class=\"line\">    public GameShow(GameRole gameRole) &#123;</div><div class=\"line\">        this.game = gameRole;</div><div class=\"line\">        StringBuffer stringBuffer = new StringBuffer();</div><div class=\"line\">        stringBuffer.append(&quot;名称: &quot;).append(game.getName()).append(&quot; \\n&quot;);</div><div class=\"line\">        stringBuffer.append(&quot;描述: &quot;).append(game.getDescription()).append(&quot;\\n&quot;);</div><div class=\"line\">        stringBuffer.append(&quot;总攻击: &quot;).append(game.getAttack()).append(&quot;\\n&quot;);</div><div class=\"line\">        stringBuffer.append(&quot;装备: &quot;).append(game.getEquip().toString()).append(&quot;\\n&quot;);</div><div class=\"line\"></div><div class=\"line\">        System.out.print(stringBuffer.toString());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 倚天剑 就用拼音了,真不好翻译</div><div class=\"line\"> **/</div><div class=\"line\">class YiTian extends GameEquip &#123;</div><div class=\"line\"></div><div class=\"line\">    private int atk = 200;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    GameRole game;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    //复制必要数据</div><div class=\"line\">    public YiTian(GameRole game) &#123;</div><div class=\"line\">        super(game);</div><div class=\"line\">        this.game = game;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    int getAttack() &#123;</div><div class=\"line\">        return atk + game.getAttack();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String getDescription() &#123;</div><div class=\"line\">        return game.getDescription()+&quot;, 倚天剑攻击力+&quot; + atk+&quot;&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public ArrayList&lt;String&gt; getEquip() &#123;</div><div class=\"line\"></div><div class=\"line\">        this.equip.add(&quot;倚天剑&quot;);</div><div class=\"line\">        return equip;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//</div><div class=\"line\">///**</div><div class=\"line\">// * 屠龙刀 就用拼音了,真不好翻译</div><div class=\"line\">// **/</div><div class=\"line\">class TuLongDao extends GameEquip &#123;</div><div class=\"line\"></div><div class=\"line\">    private int atk = 200;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    GameRole game;</div><div class=\"line\"></div><div class=\"line\">    public TuLongDao(GameRole game) &#123;</div><div class=\"line\">        super(game);</div><div class=\"line\">        this.game = game;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    int getAttack() &#123;</div><div class=\"line\">        return atk + game.getAttack();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String getDescription() &#123;</div><div class=\"line\">        return game.getDescription()+&quot;,屠龙刀攻击力+&quot; + atk+&quot;&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public ArrayList&lt;String&gt; getEquip() &#123;</div><div class=\"line\"></div><div class=\"line\">        equip.add(&quot;屠龙刀&quot;);</div><div class=\"line\">        return equip;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//</div><div class=\"line\">///**</div><div class=\"line\">// * 南明离火剑 就用拼音了,真不好翻译</div><div class=\"line\">// **/</div><div class=\"line\">class NanMingLiHuoJian extends GameEquip &#123;</div><div class=\"line\"></div><div class=\"line\">    private int atk = 1200;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    GameRole game;</div><div class=\"line\"></div><div class=\"line\">    public NanMingLiHuoJian(GameRole game) &#123;</div><div class=\"line\">        super(game);</div><div class=\"line\">        this.game = game;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    int getAttack() &#123;</div><div class=\"line\">        return atk + game.getAttack();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String getDescription() &#123;</div><div class=\"line\">        return game.getDescription()+&quot;,南明离火剑攻击力+&quot; + atk+&quot;&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public ArrayList&lt;String&gt; getEquip() &#123;</div><div class=\"line\"></div><div class=\"line\">        equip.add(&quot;南明离火剑&quot;);</div><div class=\"line\">        return equip;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//角色-&gt; 法师</div><div class=\"line\">class GameMage extends GameRole &#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public GameMage()&#123;</div><div class=\"line\">        this.name = &quot;法师&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String getDescription() &#123;</div><div class=\"line\">        return &quot;远程攻击&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    int getAttack() &#123;</div><div class=\"line\">        return 1;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//角色-&gt; 武士</div><div class=\"line\">class GameKnight extends GameRole &#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public GameKnight()&#123;</div><div class=\"line\">        this.name = &quot;武士&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String getDescription() &#123;</div><div class=\"line\">        return &quot;近战型攻击&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    int getAttack() &#123;</div><div class=\"line\">        return 1;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h3 id=\"装饰模式-动态扩展功能\"><a href=\"#装饰模式-动态扩展功能\" class=\"headerlink\" title=\"装饰模式:动态扩展功能\"></a>装饰模式:动态扩展功能</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div><div class=\"line\">364</div><div class=\"line\">365</div><div class=\"line\">366</div><div class=\"line\">367</div><div class=\"line\">368</div><div class=\"line\">369</div><div class=\"line\">370</div><div class=\"line\">371</div><div class=\"line\">372</div><div class=\"line\">373</div><div class=\"line\">374</div><div class=\"line\">375</div><div class=\"line\">376</div><div class=\"line\">377</div><div class=\"line\">378</div><div class=\"line\">379</div><div class=\"line\">380</div><div class=\"line\">381</div><div class=\"line\">382</div><div class=\"line\">383</div><div class=\"line\">384</div><div class=\"line\">385</div><div class=\"line\">386</div><div class=\"line\">387</div><div class=\"line\">388</div><div class=\"line\">389</div><div class=\"line\">390</div><div class=\"line\">391</div><div class=\"line\">392</div><div class=\"line\">393</div><div class=\"line\">394</div><div class=\"line\">395</div><div class=\"line\">396</div><div class=\"line\">397</div><div class=\"line\">398</div><div class=\"line\">399</div><div class=\"line\">400</div><div class=\"line\">401</div><div class=\"line\">402</div><div class=\"line\">403</div><div class=\"line\">404</div><div class=\"line\">405</div><div class=\"line\">406</div><div class=\"line\">407</div><div class=\"line\">408</div><div class=\"line\">409</div><div class=\"line\">410</div><div class=\"line\">411</div><div class=\"line\">412</div><div class=\"line\">413</div><div class=\"line\">414</div><div class=\"line\">415</div><div class=\"line\">416</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">import java.io.*;</div><div class=\"line\">import java.util.ArrayList;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 装饰模式:动态扩展功能</div><div class=\"line\"> * 基于继承的组合方式,灵活配置(InputStream ==&gt; FileInputStream ==&gt; BufferedInputStream)</div><div class=\"line\"> * 其实现核心: 使用对象中返回方法加工再返回</div><div class=\"line\"> * 缺点: 如果被装饰者中数据源非常多,不建议使用组合装饰,因为装饰者除去装饰方法,其他数据源也好同步更新</div><div class=\"line\"> * 适合: 少量数据原 其方法都是基于数据源操作</div><div class=\"line\"> * 可以参考 java.io 使用继承方式使用,只装饰需要处理的方法,因为是单一数据源,不需要复制其他属性</div><div class=\"line\"> * 单一数据源: 不是必须只是一个属性,而是基类型中构造器将如参对象进行属性赋值</div><div class=\"line\"> */</div><div class=\"line\">public class DecoratePattern &#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public static void main(String args[]) &#123;</div><div class=\"line\"></div><div class=\"line\">        //装饰模式演示</div><div class=\"line\">        //decorateDemo();</div><div class=\"line\"></div><div class=\"line\">        //java IO 演示</div><div class=\"line\">        //inputStreamExtDemo()</div><div class=\"line\"></div><div class=\"line\">        //上面两个看不不明白的看这里</div><div class=\"line\">        //角色</div><div class=\"line\">        //给角色装饰各种装备</div><div class=\"line\">        GameRole game = new GameMage();</div><div class=\"line\"></div><div class=\"line\">        //把角色装饰三个武器</div><div class=\"line\">        game = new YiTian(game);</div><div class=\"line\">        game = new TuLongDao(game);</div><div class=\"line\">        game = new NanMingLiHuoJian(game);</div><div class=\"line\"></div><div class=\"line\">        //新的角色</div><div class=\"line\">        //game = new GameKnight();</div><div class=\"line\">       // game = new NanMingLiHuoJian(game);</div><div class=\"line\"></div><div class=\"line\">       System.out.print( game.toString());</div><div class=\"line\">        //游戏展示</div><div class=\"line\">      //  new GameShow(game);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    //java.io 演示</div><div class=\"line\">    public static void inputStreamExtDemo() &#123;</div><div class=\"line\"></div><div class=\"line\">        int c;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            InputStream in =</div><div class=\"line\">                    new LowerCaseInputStream</div><div class=\"line\">                            (new BufferedInputStream(</div><div class=\"line\">                                    new FileInputStream(&quot;test.txt&quot;)));</div><div class=\"line\"></div><div class=\"line\">            while ((c = in.read()) &gt;= 0) &#123;</div><div class=\"line\">                System.out.println((char) c);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        &#125; catch (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 装饰模式演示</div><div class=\"line\">     * **/</div><div class=\"line\">    public static void decorateDemo() &#123;</div><div class=\"line\"></div><div class=\"line\">        Beverage beverage = new Espresso();</div><div class=\"line\"></div><div class=\"line\">        System.out.println(beverage.getDescription() + &quot; $&quot; + beverage.cost());</div><div class=\"line\"></div><div class=\"line\">        beverage = new Mocha(beverage);</div><div class=\"line\"></div><div class=\"line\">        System.out.println(beverage.getDescription() + &quot; $&quot; + beverage.cost());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**************************************  Beverage ******************************************************************************************/</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">abstract class Beverage &#123;</div><div class=\"line\"></div><div class=\"line\">    String description = &quot;Unknown Beverage&quot;;</div><div class=\"line\"></div><div class=\"line\">    public String getDescription() &#123;</div><div class=\"line\">        return description;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public abstract double cost();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">abstract class CondimentDecorator extends Beverage &#123;</div><div class=\"line\">    public abstract String getDescription();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//被装饰</div><div class=\"line\">class Espresso extends Beverage &#123;</div><div class=\"line\"></div><div class=\"line\">    public Espresso() &#123;</div><div class=\"line\">        description = &quot;Espresso&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public double cost() &#123;</div><div class=\"line\">        return 1.99;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//被装饰</div><div class=\"line\">class HouseBlend extends Beverage &#123;</div><div class=\"line\"></div><div class=\"line\">    public HouseBlend() &#123;</div><div class=\"line\">        description = &quot;House Blend&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public double cost() &#123;</div><div class=\"line\">        return 0.89;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//装饰者</div><div class=\"line\">class Mocha extends CondimentDecorator &#123;</div><div class=\"line\"></div><div class=\"line\">    Beverage beverage;</div><div class=\"line\"></div><div class=\"line\">    public Mocha(Beverage beverage) &#123;</div><div class=\"line\">        this.beverage = beverage;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String getDescription() &#123;</div><div class=\"line\">        return beverage.getDescription() + &quot;,Mocha&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public double cost() &#123;</div><div class=\"line\">        return 0.2 + beverage.cost();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**************************************  LowerCaseInputStream ******************************************************************************************/</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//java io</div><div class=\"line\">class LowerCaseInputStream extends FilterInputStream &#123;</div><div class=\"line\"></div><div class=\"line\">    public LowerCaseInputStream(InputStream in) &#123;</div><div class=\"line\">        super(in);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public int read() throws IOException &#123;</div><div class=\"line\">        int c = super.read();</div><div class=\"line\">        return (c == -1 ? c : Character.toLowerCase((char) c));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public int read(byte[] b, int offset, int len) throws IOException &#123;</div><div class=\"line\">        int result = super.read(b, offset, len);</div><div class=\"line\">        for (int i = offset; i &lt; offset + result; i++) &#123;</div><div class=\"line\">            b[i] = (byte) Character.toLowerCase((char) b[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        return result;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**************************************  GameRole ******************************************************************************************/</div><div class=\"line\"></div><div class=\"line\">//游戏超类</div><div class=\"line\">abstract class GameRole &#123;</div><div class=\"line\"></div><div class=\"line\">    String name=&quot;角色名称&quot;;</div><div class=\"line\">    ArrayList&lt;String&gt; equip;</div><div class=\"line\">    public GameRole()&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    public GameRole(String name)&#123;</div><div class=\"line\">        this.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public GameRole(String name, ArrayList&lt;String&gt; equip)&#123;</div><div class=\"line\">        this.name = name;</div><div class=\"line\">        this.equip = equip;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public GameRole(GameRole role)&#123;</div><div class=\"line\">        this.name = role.getName();</div><div class=\"line\">        this.equip = role.getEquip();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    abstract String getDescription();</div><div class=\"line\"></div><div class=\"line\">    abstract int getAttack();</div><div class=\"line\"></div><div class=\"line\">    public String getName() &#123;</div><div class=\"line\">        return name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public ArrayList&lt;String&gt; getEquip() &#123;</div><div class=\"line\">        return equip==null?new ArrayList&lt;&gt;():equip;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//游戏角色装备</div><div class=\"line\">//必须要实现的方法</div><div class=\"line\">abstract class GameEquip extends GameRole &#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">   public GameEquip(GameRole role)&#123;</div><div class=\"line\">       super(role);</div><div class=\"line\">   &#125;</div><div class=\"line\">    public abstract String getDescription();</div><div class=\"line\">    public abstract ArrayList&lt;String&gt; getEquip();</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String toString()&#123;</div><div class=\"line\">        StringBuffer stringBuffer = new StringBuffer();</div><div class=\"line\">        stringBuffer.append(&quot;名称: &quot;).append(this.getName()).append(&quot; \\n&quot;);</div><div class=\"line\">        stringBuffer.append(&quot;描述: &quot;).append(this.getDescription()).append(&quot;\\n&quot;);</div><div class=\"line\">        stringBuffer.append(&quot;总攻击: &quot;).append(this.getAttack()).append(&quot;\\n&quot;);</div><div class=\"line\">        stringBuffer.append(&quot;装备: &quot;).append(this.getEquip().toString()).append(&quot;\\n&quot;);</div><div class=\"line\">        return stringBuffer.toString();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/***</div><div class=\"line\"> *</div><div class=\"line\"> *  游戏显示</div><div class=\"line\"> * */</div><div class=\"line\">class GameShow &#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    GameRole game;</div><div class=\"line\"></div><div class=\"line\">    public GameShow(GameRole gameRole) &#123;</div><div class=\"line\">        this.game = gameRole;</div><div class=\"line\">        StringBuffer stringBuffer = new StringBuffer();</div><div class=\"line\">        stringBuffer.append(&quot;名称: &quot;).append(game.getName()).append(&quot; \\n&quot;);</div><div class=\"line\">        stringBuffer.append(&quot;描述: &quot;).append(game.getDescription()).append(&quot;\\n&quot;);</div><div class=\"line\">        stringBuffer.append(&quot;总攻击: &quot;).append(game.getAttack()).append(&quot;\\n&quot;);</div><div class=\"line\">        stringBuffer.append(&quot;装备: &quot;).append(game.getEquip().toString()).append(&quot;\\n&quot;);</div><div class=\"line\"></div><div class=\"line\">        System.out.print(stringBuffer.toString());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 倚天剑 就用拼音了,真不好翻译</div><div class=\"line\"> **/</div><div class=\"line\">class YiTian extends GameEquip &#123;</div><div class=\"line\"></div><div class=\"line\">    private int atk = 200;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    GameRole game;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    //复制必要数据</div><div class=\"line\">    public YiTian(GameRole game) &#123;</div><div class=\"line\">        super(game);</div><div class=\"line\">        this.game = game;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    int getAttack() &#123;</div><div class=\"line\">        return atk + game.getAttack();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String getDescription() &#123;</div><div class=\"line\">        return game.getDescription()+&quot;, 倚天剑攻击力+&quot; + atk+&quot;&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public ArrayList&lt;String&gt; getEquip() &#123;</div><div class=\"line\"></div><div class=\"line\">        this.equip.add(&quot;倚天剑&quot;);</div><div class=\"line\">        return equip;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//</div><div class=\"line\">///**</div><div class=\"line\">// * 屠龙刀 就用拼音了,真不好翻译</div><div class=\"line\">// **/</div><div class=\"line\">class TuLongDao extends GameEquip &#123;</div><div class=\"line\"></div><div class=\"line\">    private int atk = 200;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    GameRole game;</div><div class=\"line\"></div><div class=\"line\">    public TuLongDao(GameRole game) &#123;</div><div class=\"line\">        super(game);</div><div class=\"line\">        this.game = game;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    int getAttack() &#123;</div><div class=\"line\">        return atk + game.getAttack();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String getDescription() &#123;</div><div class=\"line\">        return game.getDescription()+&quot;,屠龙刀攻击力+&quot; + atk+&quot;&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public ArrayList&lt;String&gt; getEquip() &#123;</div><div class=\"line\"></div><div class=\"line\">        equip.add(&quot;屠龙刀&quot;);</div><div class=\"line\">        return equip;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//</div><div class=\"line\">///**</div><div class=\"line\">// * 南明离火剑 就用拼音了,真不好翻译</div><div class=\"line\">// **/</div><div class=\"line\">class NanMingLiHuoJian extends GameEquip &#123;</div><div class=\"line\"></div><div class=\"line\">    private int atk = 1200;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    GameRole game;</div><div class=\"line\"></div><div class=\"line\">    public NanMingLiHuoJian(GameRole game) &#123;</div><div class=\"line\">        super(game);</div><div class=\"line\">        this.game = game;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    int getAttack() &#123;</div><div class=\"line\">        return atk + game.getAttack();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String getDescription() &#123;</div><div class=\"line\">        return game.getDescription()+&quot;,南明离火剑攻击力+&quot; + atk+&quot;&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public ArrayList&lt;String&gt; getEquip() &#123;</div><div class=\"line\"></div><div class=\"line\">        equip.add(&quot;南明离火剑&quot;);</div><div class=\"line\">        return equip;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//角色-&gt; 法师</div><div class=\"line\">class GameMage extends GameRole &#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public GameMage()&#123;</div><div class=\"line\">        this.name = &quot;法师&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String getDescription() &#123;</div><div class=\"line\">        return &quot;远程攻击&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    int getAttack() &#123;</div><div class=\"line\">        return 1;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//角色-&gt; 武士</div><div class=\"line\">class GameKnight extends GameRole &#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public GameKnight()&#123;</div><div class=\"line\">        this.name = &quot;武士&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String getDescription() &#123;</div><div class=\"line\">        return &quot;近战型攻击&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    int getAttack() &#123;</div><div class=\"line\">        return 1;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"设计模式迭代器－不解释","date":"2017-03-29T02:09:26.000Z","layout":"clean-blog","slug":"设计模式迭代器－不解释","_content":"\n###   迭代器模式: 提供一种方法顺序访问一个聚合对象中的各个元素,而又不暴露其内部表示\n\n````\n\n/**\n * 迭代器模式: 提供一种方法顺序访问一个聚合对象中的各个元素,而又不暴露其内部表示\n *\n *\n * 要点:\n * 1.迭代器允许访问聚合的元素,而不需要暴露它的内部结构(存储方式)\n * 2.迭代器将遍历聚合的工作封装进一个对象中\n * 3.当使用迭代器的时候,我们依赖聚合提供遍历\n * 4.迭代器提供一个通用的接口,让我们遍历聚合的项,当我们编码使用聚合项时,就可以使用多态机制\n * 5.我们应该努力让一个类只分配一个责任\n * 6.组合模式提供一个结构,可同时包容个别对象和组合对象\n * 7.组合模式允许客户对个别对象以及组合对象一视同仁\n * 8.组合结构内的任意对象称为组件,组件可以是组合,也可以是叶节点\n * 9.在实现组合模式时,有许多设计上的折衷,你要根据需要平横透明性和安全性\n *\n * 如: 数据模型统一,但是实现存储方式不一样,\n * 这时候我们要便利集合内的对象实现起来代码重复会比较多\n * 下面我们一起来搞个迭代器来简化代码\n */\npublic class IteratorPattern {\n\n    public static void main(String args[]) {\n\n        MenuItemIterator userCenterMenu = new UserCenterMenu();\n        MenuItemIterator tradeMenu = new TradeMenu();\n\n        Client client = new Client(tradeMenu, userCenterMenu);\n        client.printlnMenu();\n    }\n\n}\n\ninterface MenuItemIterator {\n    Iterator createIterator();\n}\n\ninterface Iterator {\n\n    boolean hasNext();\n\n    Object next();\n}\n\n\n//客户调用使用\n// ===>   存在问题: 每一次添加新的模块后,客户端都要修改代码,\n//      还有如果系统中再有子系统,当前代码是解决不了的, 我们使用了另外一种模式 组合模式\nclass Client {\n\n    MenuItemIterator tradeMenu;\n    MenuItemIterator userCenterMenu;\n\n    public Client(MenuItemIterator tradeMenu, MenuItemIterator userCenterMenu) {\n        this.tradeMenu = tradeMenu;\n        this.userCenterMenu = userCenterMenu;\n    }\n\n    public void printlnMenu() {\n\n        Iterator u = userCenterMenu.createIterator();\n        Iterator t = tradeMenu.createIterator();\n        printMenu(u);\n        printMenu(t);\n\n    }\n\n    private void printMenu(Iterator iterator) {\n        while (iterator.hasNext()) {\n            MenuItem menuItem = (MenuItem) iterator.next();\n            System.out.println(menuItem.toString());\n        }\n    }\n}\n\n\n//用户系统菜单 - 数组实现\nclass UserCenterMenu implements MenuItemIterator {\n\n    static final int MAX_ITEMS = 3;\n    MenuItem[] menuItems;\n    int numberOfItems = 0;\n\n\n    public UserCenterMenu() {\n        menuItems = new MenuItem[MAX_ITEMS];\n        addItem(\"1\", \"用户注册\", \"USER_REG\", \"0\");\n        addItem(\"2\", \"用户新增\", \"USER_ADD\", \"0\");\n        addItem(\"3\", \"用户删除\", \"USER_DELETE\", \"0\");\n    }\n\n    public void addItem(String id, String name, String code, String paterId) {\n\n        MenuItem menuItem = new MenuItem(id, name, code, paterId);\n        if (numberOfItems >= MAX_ITEMS) {\n            System.err.println(\"操作异常:数组下标越界\");\n        } else {\n            menuItems[numberOfItems] = menuItem;\n            ++numberOfItems;\n        }\n\n    }\n\n    @Deprecated\n    public MenuItem[] getMenuItems() {\n        return menuItems;\n    }\n\n    @Override\n    public Iterator createIterator() {\n        return new UserCenterMenuIterator(menuItems);\n    }\n\n}\n\n//用户系统菜单迭代\nclass UserCenterMenuIterator implements Iterator {\n\n    MenuItem[] items;\n    int position = 0;\n\n    public UserCenterMenuIterator(MenuItem[] items) {\n        this.items = items;\n    }\n\n    @Override\n    public boolean hasNext() {\n\n        if (position >= items.length || items[position] == null) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    @Override\n    public Object next() {\n        MenuItem menuItem = items[position];\n        ++position;\n\n        return menuItem;\n    }\n\n}\n\n\n//交易系统菜单 - List实现\nclass TradeMenu implements MenuItemIterator {\n\n    ArrayList<MenuItem> menuItems;\n\n    public TradeMenu() {\n        menuItems = new ArrayList<>();\n        addItem(\"1\", \"订单查看\", \"TRADE_SEL\", \"0\");\n        addItem(\"2\", \"订单处理\", \"TRADE_OPE\", \"0\");\n        addItem(\"3\", \"订单删除\", \"TRADE_DEL\", \"0\");\n    }\n\n    public void addItem(String id, String name, String code, String paterId) {\n        MenuItem menuItem = new MenuItem(id, name, code, paterId);\n        menuItems.add(menuItem);\n    }\n\n    @Deprecated\n    public ArrayList getMenuItems() {\n        return menuItems;\n    }\n\n    @Override\n    public Iterator createIterator() {\n        return new TradeMenuIterator(menuItems);\n    }\n\n    private class TradeMenuIterator implements Iterator {\n\n        ArrayList<MenuItem> items;\n        int position = 0;\n\n        public TradeMenuIterator(ArrayList<MenuItem> items) {\n            this.items = items;\n        }\n\n        @Override\n        public boolean hasNext() {\n\n            if (position >= items.size()) {\n                return false;\n            } else {\n                return true;\n            }\n        }\n\n        @Override\n        public Object next() {\n            MenuItem menuItem = items.get(position);\n            ++position;\n            return menuItem;\n        }\n    }\n}\n\n\nclass MenuItem {\n\n    public MenuItem(String code, String id, String name, String paterId) {\n        this.code = code;\n        this.id = id;\n        this.name = name;\n        this.paterId = paterId;\n    }\n\n    private String id;\n    private String name;\n    private String code;\n    private String paterId;\n\n\n    public String getCode() {\n        return code;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getName() {\n        return name;\n    }\n    public String getPaterId() {\n        return paterId;\n    }\n\n\n\n    @Override\n    public String toString() {\n        return \"MenuItem{\" +\n                \"code='\" + code + '\\'' +\n                \", id='\" + id + '\\'' +\n                \", name='\" + name + '\\'' +\n                \", paterId='\" + paterId + '\\'' +\n                '}';\n    }\n}\n\n````","source":"_posts/设计模式迭代器－不解释.md","raw":"---\ntitle: 设计模式迭代器－不解释\ndate: 2017-03-29 10:09:26\ntags: 设计模式\nlayout: clean-blog\nslug: IteratorPattern\n---\n\n###   迭代器模式: 提供一种方法顺序访问一个聚合对象中的各个元素,而又不暴露其内部表示\n\n````\n\n/**\n * 迭代器模式: 提供一种方法顺序访问一个聚合对象中的各个元素,而又不暴露其内部表示\n *\n *\n * 要点:\n * 1.迭代器允许访问聚合的元素,而不需要暴露它的内部结构(存储方式)\n * 2.迭代器将遍历聚合的工作封装进一个对象中\n * 3.当使用迭代器的时候,我们依赖聚合提供遍历\n * 4.迭代器提供一个通用的接口,让我们遍历聚合的项,当我们编码使用聚合项时,就可以使用多态机制\n * 5.我们应该努力让一个类只分配一个责任\n * 6.组合模式提供一个结构,可同时包容个别对象和组合对象\n * 7.组合模式允许客户对个别对象以及组合对象一视同仁\n * 8.组合结构内的任意对象称为组件,组件可以是组合,也可以是叶节点\n * 9.在实现组合模式时,有许多设计上的折衷,你要根据需要平横透明性和安全性\n *\n * 如: 数据模型统一,但是实现存储方式不一样,\n * 这时候我们要便利集合内的对象实现起来代码重复会比较多\n * 下面我们一起来搞个迭代器来简化代码\n */\npublic class IteratorPattern {\n\n    public static void main(String args[]) {\n\n        MenuItemIterator userCenterMenu = new UserCenterMenu();\n        MenuItemIterator tradeMenu = new TradeMenu();\n\n        Client client = new Client(tradeMenu, userCenterMenu);\n        client.printlnMenu();\n    }\n\n}\n\ninterface MenuItemIterator {\n    Iterator createIterator();\n}\n\ninterface Iterator {\n\n    boolean hasNext();\n\n    Object next();\n}\n\n\n//客户调用使用\n// ===>   存在问题: 每一次添加新的模块后,客户端都要修改代码,\n//      还有如果系统中再有子系统,当前代码是解决不了的, 我们使用了另外一种模式 组合模式\nclass Client {\n\n    MenuItemIterator tradeMenu;\n    MenuItemIterator userCenterMenu;\n\n    public Client(MenuItemIterator tradeMenu, MenuItemIterator userCenterMenu) {\n        this.tradeMenu = tradeMenu;\n        this.userCenterMenu = userCenterMenu;\n    }\n\n    public void printlnMenu() {\n\n        Iterator u = userCenterMenu.createIterator();\n        Iterator t = tradeMenu.createIterator();\n        printMenu(u);\n        printMenu(t);\n\n    }\n\n    private void printMenu(Iterator iterator) {\n        while (iterator.hasNext()) {\n            MenuItem menuItem = (MenuItem) iterator.next();\n            System.out.println(menuItem.toString());\n        }\n    }\n}\n\n\n//用户系统菜单 - 数组实现\nclass UserCenterMenu implements MenuItemIterator {\n\n    static final int MAX_ITEMS = 3;\n    MenuItem[] menuItems;\n    int numberOfItems = 0;\n\n\n    public UserCenterMenu() {\n        menuItems = new MenuItem[MAX_ITEMS];\n        addItem(\"1\", \"用户注册\", \"USER_REG\", \"0\");\n        addItem(\"2\", \"用户新增\", \"USER_ADD\", \"0\");\n        addItem(\"3\", \"用户删除\", \"USER_DELETE\", \"0\");\n    }\n\n    public void addItem(String id, String name, String code, String paterId) {\n\n        MenuItem menuItem = new MenuItem(id, name, code, paterId);\n        if (numberOfItems >= MAX_ITEMS) {\n            System.err.println(\"操作异常:数组下标越界\");\n        } else {\n            menuItems[numberOfItems] = menuItem;\n            ++numberOfItems;\n        }\n\n    }\n\n    @Deprecated\n    public MenuItem[] getMenuItems() {\n        return menuItems;\n    }\n\n    @Override\n    public Iterator createIterator() {\n        return new UserCenterMenuIterator(menuItems);\n    }\n\n}\n\n//用户系统菜单迭代\nclass UserCenterMenuIterator implements Iterator {\n\n    MenuItem[] items;\n    int position = 0;\n\n    public UserCenterMenuIterator(MenuItem[] items) {\n        this.items = items;\n    }\n\n    @Override\n    public boolean hasNext() {\n\n        if (position >= items.length || items[position] == null) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    @Override\n    public Object next() {\n        MenuItem menuItem = items[position];\n        ++position;\n\n        return menuItem;\n    }\n\n}\n\n\n//交易系统菜单 - List实现\nclass TradeMenu implements MenuItemIterator {\n\n    ArrayList<MenuItem> menuItems;\n\n    public TradeMenu() {\n        menuItems = new ArrayList<>();\n        addItem(\"1\", \"订单查看\", \"TRADE_SEL\", \"0\");\n        addItem(\"2\", \"订单处理\", \"TRADE_OPE\", \"0\");\n        addItem(\"3\", \"订单删除\", \"TRADE_DEL\", \"0\");\n    }\n\n    public void addItem(String id, String name, String code, String paterId) {\n        MenuItem menuItem = new MenuItem(id, name, code, paterId);\n        menuItems.add(menuItem);\n    }\n\n    @Deprecated\n    public ArrayList getMenuItems() {\n        return menuItems;\n    }\n\n    @Override\n    public Iterator createIterator() {\n        return new TradeMenuIterator(menuItems);\n    }\n\n    private class TradeMenuIterator implements Iterator {\n\n        ArrayList<MenuItem> items;\n        int position = 0;\n\n        public TradeMenuIterator(ArrayList<MenuItem> items) {\n            this.items = items;\n        }\n\n        @Override\n        public boolean hasNext() {\n\n            if (position >= items.size()) {\n                return false;\n            } else {\n                return true;\n            }\n        }\n\n        @Override\n        public Object next() {\n            MenuItem menuItem = items.get(position);\n            ++position;\n            return menuItem;\n        }\n    }\n}\n\n\nclass MenuItem {\n\n    public MenuItem(String code, String id, String name, String paterId) {\n        this.code = code;\n        this.id = id;\n        this.name = name;\n        this.paterId = paterId;\n    }\n\n    private String id;\n    private String name;\n    private String code;\n    private String paterId;\n\n\n    public String getCode() {\n        return code;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getName() {\n        return name;\n    }\n    public String getPaterId() {\n        return paterId;\n    }\n\n\n\n    @Override\n    public String toString() {\n        return \"MenuItem{\" +\n                \"code='\" + code + '\\'' +\n                \", id='\" + id + '\\'' +\n                \", name='\" + name + '\\'' +\n                \", paterId='\" + paterId + '\\'' +\n                '}';\n    }\n}\n\n````","published":1,"updated":"2017-03-29T02:13:55.000Z","comments":1,"photos":[],"link":"","_id":"cj0uc8d0t000uey5riam3cxdl","content":"<h3 id=\"迭代器模式-提供一种方法顺序访问一个聚合对象中的各个元素-而又不暴露其内部表示\"><a href=\"#迭代器模式-提供一种方法顺序访问一个聚合对象中的各个元素-而又不暴露其内部表示\" class=\"headerlink\" title=\"迭代器模式: 提供一种方法顺序访问一个聚合对象中的各个元素,而又不暴露其内部表示\"></a>迭代器模式: 提供一种方法顺序访问一个聚合对象中的各个元素,而又不暴露其内部表示</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 迭代器模式: 提供一种方法顺序访问一个聚合对象中的各个元素,而又不暴露其内部表示</div><div class=\"line\"> *</div><div class=\"line\"> *</div><div class=\"line\"> * 要点:</div><div class=\"line\"> * 1.迭代器允许访问聚合的元素,而不需要暴露它的内部结构(存储方式)</div><div class=\"line\"> * 2.迭代器将遍历聚合的工作封装进一个对象中</div><div class=\"line\"> * 3.当使用迭代器的时候,我们依赖聚合提供遍历</div><div class=\"line\"> * 4.迭代器提供一个通用的接口,让我们遍历聚合的项,当我们编码使用聚合项时,就可以使用多态机制</div><div class=\"line\"> * 5.我们应该努力让一个类只分配一个责任</div><div class=\"line\"> * 6.组合模式提供一个结构,可同时包容个别对象和组合对象</div><div class=\"line\"> * 7.组合模式允许客户对个别对象以及组合对象一视同仁</div><div class=\"line\"> * 8.组合结构内的任意对象称为组件,组件可以是组合,也可以是叶节点</div><div class=\"line\"> * 9.在实现组合模式时,有许多设计上的折衷,你要根据需要平横透明性和安全性</div><div class=\"line\"> *</div><div class=\"line\"> * 如: 数据模型统一,但是实现存储方式不一样,</div><div class=\"line\"> * 这时候我们要便利集合内的对象实现起来代码重复会比较多</div><div class=\"line\"> * 下面我们一起来搞个迭代器来简化代码</div><div class=\"line\"> */</div><div class=\"line\">public class IteratorPattern &#123;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String args[]) &#123;</div><div class=\"line\"></div><div class=\"line\">        MenuItemIterator userCenterMenu = new UserCenterMenu();</div><div class=\"line\">        MenuItemIterator tradeMenu = new TradeMenu();</div><div class=\"line\"></div><div class=\"line\">        Client client = new Client(tradeMenu, userCenterMenu);</div><div class=\"line\">        client.printlnMenu();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">interface MenuItemIterator &#123;</div><div class=\"line\">    Iterator createIterator();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">interface Iterator &#123;</div><div class=\"line\"></div><div class=\"line\">    boolean hasNext();</div><div class=\"line\"></div><div class=\"line\">    Object next();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//客户调用使用</div><div class=\"line\">// ===&gt;   存在问题: 每一次添加新的模块后,客户端都要修改代码,</div><div class=\"line\">//      还有如果系统中再有子系统,当前代码是解决不了的, 我们使用了另外一种模式 组合模式</div><div class=\"line\">class Client &#123;</div><div class=\"line\"></div><div class=\"line\">    MenuItemIterator tradeMenu;</div><div class=\"line\">    MenuItemIterator userCenterMenu;</div><div class=\"line\"></div><div class=\"line\">    public Client(MenuItemIterator tradeMenu, MenuItemIterator userCenterMenu) &#123;</div><div class=\"line\">        this.tradeMenu = tradeMenu;</div><div class=\"line\">        this.userCenterMenu = userCenterMenu;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void printlnMenu() &#123;</div><div class=\"line\"></div><div class=\"line\">        Iterator u = userCenterMenu.createIterator();</div><div class=\"line\">        Iterator t = tradeMenu.createIterator();</div><div class=\"line\">        printMenu(u);</div><div class=\"line\">        printMenu(t);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private void printMenu(Iterator iterator) &#123;</div><div class=\"line\">        while (iterator.hasNext()) &#123;</div><div class=\"line\">            MenuItem menuItem = (MenuItem) iterator.next();</div><div class=\"line\">            System.out.println(menuItem.toString());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//用户系统菜单 - 数组实现</div><div class=\"line\">class UserCenterMenu implements MenuItemIterator &#123;</div><div class=\"line\"></div><div class=\"line\">    static final int MAX_ITEMS = 3;</div><div class=\"line\">    MenuItem[] menuItems;</div><div class=\"line\">    int numberOfItems = 0;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public UserCenterMenu() &#123;</div><div class=\"line\">        menuItems = new MenuItem[MAX_ITEMS];</div><div class=\"line\">        addItem(&quot;1&quot;, &quot;用户注册&quot;, &quot;USER_REG&quot;, &quot;0&quot;);</div><div class=\"line\">        addItem(&quot;2&quot;, &quot;用户新增&quot;, &quot;USER_ADD&quot;, &quot;0&quot;);</div><div class=\"line\">        addItem(&quot;3&quot;, &quot;用户删除&quot;, &quot;USER_DELETE&quot;, &quot;0&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void addItem(String id, String name, String code, String paterId) &#123;</div><div class=\"line\"></div><div class=\"line\">        MenuItem menuItem = new MenuItem(id, name, code, paterId);</div><div class=\"line\">        if (numberOfItems &gt;= MAX_ITEMS) &#123;</div><div class=\"line\">            System.err.println(&quot;操作异常:数组下标越界&quot;);</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            menuItems[numberOfItems] = menuItem;</div><div class=\"line\">            ++numberOfItems;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Deprecated</div><div class=\"line\">    public MenuItem[] getMenuItems() &#123;</div><div class=\"line\">        return menuItems;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public Iterator createIterator() &#123;</div><div class=\"line\">        return new UserCenterMenuIterator(menuItems);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//用户系统菜单迭代</div><div class=\"line\">class UserCenterMenuIterator implements Iterator &#123;</div><div class=\"line\"></div><div class=\"line\">    MenuItem[] items;</div><div class=\"line\">    int position = 0;</div><div class=\"line\"></div><div class=\"line\">    public UserCenterMenuIterator(MenuItem[] items) &#123;</div><div class=\"line\">        this.items = items;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public boolean hasNext() &#123;</div><div class=\"line\"></div><div class=\"line\">        if (position &gt;= items.length || items[position] == null) &#123;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public Object next() &#123;</div><div class=\"line\">        MenuItem menuItem = items[position];</div><div class=\"line\">        ++position;</div><div class=\"line\"></div><div class=\"line\">        return menuItem;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//交易系统菜单 - List实现</div><div class=\"line\">class TradeMenu implements MenuItemIterator &#123;</div><div class=\"line\"></div><div class=\"line\">    ArrayList&lt;MenuItem&gt; menuItems;</div><div class=\"line\"></div><div class=\"line\">    public TradeMenu() &#123;</div><div class=\"line\">        menuItems = new ArrayList&lt;&gt;();</div><div class=\"line\">        addItem(&quot;1&quot;, &quot;订单查看&quot;, &quot;TRADE_SEL&quot;, &quot;0&quot;);</div><div class=\"line\">        addItem(&quot;2&quot;, &quot;订单处理&quot;, &quot;TRADE_OPE&quot;, &quot;0&quot;);</div><div class=\"line\">        addItem(&quot;3&quot;, &quot;订单删除&quot;, &quot;TRADE_DEL&quot;, &quot;0&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void addItem(String id, String name, String code, String paterId) &#123;</div><div class=\"line\">        MenuItem menuItem = new MenuItem(id, name, code, paterId);</div><div class=\"line\">        menuItems.add(menuItem);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Deprecated</div><div class=\"line\">    public ArrayList getMenuItems() &#123;</div><div class=\"line\">        return menuItems;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public Iterator createIterator() &#123;</div><div class=\"line\">        return new TradeMenuIterator(menuItems);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private class TradeMenuIterator implements Iterator &#123;</div><div class=\"line\"></div><div class=\"line\">        ArrayList&lt;MenuItem&gt; items;</div><div class=\"line\">        int position = 0;</div><div class=\"line\"></div><div class=\"line\">        public TradeMenuIterator(ArrayList&lt;MenuItem&gt; items) &#123;</div><div class=\"line\">            this.items = items;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        @Override</div><div class=\"line\">        public boolean hasNext() &#123;</div><div class=\"line\"></div><div class=\"line\">            if (position &gt;= items.size()) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                return true;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        @Override</div><div class=\"line\">        public Object next() &#123;</div><div class=\"line\">            MenuItem menuItem = items.get(position);</div><div class=\"line\">            ++position;</div><div class=\"line\">            return menuItem;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">class MenuItem &#123;</div><div class=\"line\"></div><div class=\"line\">    public MenuItem(String code, String id, String name, String paterId) &#123;</div><div class=\"line\">        this.code = code;</div><div class=\"line\">        this.id = id;</div><div class=\"line\">        this.name = name;</div><div class=\"line\">        this.paterId = paterId;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private String id;</div><div class=\"line\">    private String name;</div><div class=\"line\">    private String code;</div><div class=\"line\">    private String paterId;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public String getCode() &#123;</div><div class=\"line\">        return code;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public String getId() &#123;</div><div class=\"line\">        return id;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public String getName() &#123;</div><div class=\"line\">        return name;</div><div class=\"line\">    &#125;</div><div class=\"line\">    public String getPaterId() &#123;</div><div class=\"line\">        return paterId;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String toString() &#123;</div><div class=\"line\">        return &quot;MenuItem&#123;&quot; +</div><div class=\"line\">                &quot;code=&apos;&quot; + code + &apos;\\&apos;&apos; +</div><div class=\"line\">                &quot;, id=&apos;&quot; + id + &apos;\\&apos;&apos; +</div><div class=\"line\">                &quot;, name=&apos;&quot; + name + &apos;\\&apos;&apos; +</div><div class=\"line\">                &quot;, paterId=&apos;&quot; + paterId + &apos;\\&apos;&apos; +</div><div class=\"line\">                &apos;&#125;&apos;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h3 id=\"迭代器模式-提供一种方法顺序访问一个聚合对象中的各个元素-而又不暴露其内部表示\"><a href=\"#迭代器模式-提供一种方法顺序访问一个聚合对象中的各个元素-而又不暴露其内部表示\" class=\"headerlink\" title=\"迭代器模式: 提供一种方法顺序访问一个聚合对象中的各个元素,而又不暴露其内部表示\"></a>迭代器模式: 提供一种方法顺序访问一个聚合对象中的各个元素,而又不暴露其内部表示</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 迭代器模式: 提供一种方法顺序访问一个聚合对象中的各个元素,而又不暴露其内部表示</div><div class=\"line\"> *</div><div class=\"line\"> *</div><div class=\"line\"> * 要点:</div><div class=\"line\"> * 1.迭代器允许访问聚合的元素,而不需要暴露它的内部结构(存储方式)</div><div class=\"line\"> * 2.迭代器将遍历聚合的工作封装进一个对象中</div><div class=\"line\"> * 3.当使用迭代器的时候,我们依赖聚合提供遍历</div><div class=\"line\"> * 4.迭代器提供一个通用的接口,让我们遍历聚合的项,当我们编码使用聚合项时,就可以使用多态机制</div><div class=\"line\"> * 5.我们应该努力让一个类只分配一个责任</div><div class=\"line\"> * 6.组合模式提供一个结构,可同时包容个别对象和组合对象</div><div class=\"line\"> * 7.组合模式允许客户对个别对象以及组合对象一视同仁</div><div class=\"line\"> * 8.组合结构内的任意对象称为组件,组件可以是组合,也可以是叶节点</div><div class=\"line\"> * 9.在实现组合模式时,有许多设计上的折衷,你要根据需要平横透明性和安全性</div><div class=\"line\"> *</div><div class=\"line\"> * 如: 数据模型统一,但是实现存储方式不一样,</div><div class=\"line\"> * 这时候我们要便利集合内的对象实现起来代码重复会比较多</div><div class=\"line\"> * 下面我们一起来搞个迭代器来简化代码</div><div class=\"line\"> */</div><div class=\"line\">public class IteratorPattern &#123;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String args[]) &#123;</div><div class=\"line\"></div><div class=\"line\">        MenuItemIterator userCenterMenu = new UserCenterMenu();</div><div class=\"line\">        MenuItemIterator tradeMenu = new TradeMenu();</div><div class=\"line\"></div><div class=\"line\">        Client client = new Client(tradeMenu, userCenterMenu);</div><div class=\"line\">        client.printlnMenu();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">interface MenuItemIterator &#123;</div><div class=\"line\">    Iterator createIterator();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">interface Iterator &#123;</div><div class=\"line\"></div><div class=\"line\">    boolean hasNext();</div><div class=\"line\"></div><div class=\"line\">    Object next();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//客户调用使用</div><div class=\"line\">// ===&gt;   存在问题: 每一次添加新的模块后,客户端都要修改代码,</div><div class=\"line\">//      还有如果系统中再有子系统,当前代码是解决不了的, 我们使用了另外一种模式 组合模式</div><div class=\"line\">class Client &#123;</div><div class=\"line\"></div><div class=\"line\">    MenuItemIterator tradeMenu;</div><div class=\"line\">    MenuItemIterator userCenterMenu;</div><div class=\"line\"></div><div class=\"line\">    public Client(MenuItemIterator tradeMenu, MenuItemIterator userCenterMenu) &#123;</div><div class=\"line\">        this.tradeMenu = tradeMenu;</div><div class=\"line\">        this.userCenterMenu = userCenterMenu;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void printlnMenu() &#123;</div><div class=\"line\"></div><div class=\"line\">        Iterator u = userCenterMenu.createIterator();</div><div class=\"line\">        Iterator t = tradeMenu.createIterator();</div><div class=\"line\">        printMenu(u);</div><div class=\"line\">        printMenu(t);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private void printMenu(Iterator iterator) &#123;</div><div class=\"line\">        while (iterator.hasNext()) &#123;</div><div class=\"line\">            MenuItem menuItem = (MenuItem) iterator.next();</div><div class=\"line\">            System.out.println(menuItem.toString());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//用户系统菜单 - 数组实现</div><div class=\"line\">class UserCenterMenu implements MenuItemIterator &#123;</div><div class=\"line\"></div><div class=\"line\">    static final int MAX_ITEMS = 3;</div><div class=\"line\">    MenuItem[] menuItems;</div><div class=\"line\">    int numberOfItems = 0;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public UserCenterMenu() &#123;</div><div class=\"line\">        menuItems = new MenuItem[MAX_ITEMS];</div><div class=\"line\">        addItem(&quot;1&quot;, &quot;用户注册&quot;, &quot;USER_REG&quot;, &quot;0&quot;);</div><div class=\"line\">        addItem(&quot;2&quot;, &quot;用户新增&quot;, &quot;USER_ADD&quot;, &quot;0&quot;);</div><div class=\"line\">        addItem(&quot;3&quot;, &quot;用户删除&quot;, &quot;USER_DELETE&quot;, &quot;0&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void addItem(String id, String name, String code, String paterId) &#123;</div><div class=\"line\"></div><div class=\"line\">        MenuItem menuItem = new MenuItem(id, name, code, paterId);</div><div class=\"line\">        if (numberOfItems &gt;= MAX_ITEMS) &#123;</div><div class=\"line\">            System.err.println(&quot;操作异常:数组下标越界&quot;);</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            menuItems[numberOfItems] = menuItem;</div><div class=\"line\">            ++numberOfItems;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Deprecated</div><div class=\"line\">    public MenuItem[] getMenuItems() &#123;</div><div class=\"line\">        return menuItems;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public Iterator createIterator() &#123;</div><div class=\"line\">        return new UserCenterMenuIterator(menuItems);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//用户系统菜单迭代</div><div class=\"line\">class UserCenterMenuIterator implements Iterator &#123;</div><div class=\"line\"></div><div class=\"line\">    MenuItem[] items;</div><div class=\"line\">    int position = 0;</div><div class=\"line\"></div><div class=\"line\">    public UserCenterMenuIterator(MenuItem[] items) &#123;</div><div class=\"line\">        this.items = items;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public boolean hasNext() &#123;</div><div class=\"line\"></div><div class=\"line\">        if (position &gt;= items.length || items[position] == null) &#123;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public Object next() &#123;</div><div class=\"line\">        MenuItem menuItem = items[position];</div><div class=\"line\">        ++position;</div><div class=\"line\"></div><div class=\"line\">        return menuItem;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//交易系统菜单 - List实现</div><div class=\"line\">class TradeMenu implements MenuItemIterator &#123;</div><div class=\"line\"></div><div class=\"line\">    ArrayList&lt;MenuItem&gt; menuItems;</div><div class=\"line\"></div><div class=\"line\">    public TradeMenu() &#123;</div><div class=\"line\">        menuItems = new ArrayList&lt;&gt;();</div><div class=\"line\">        addItem(&quot;1&quot;, &quot;订单查看&quot;, &quot;TRADE_SEL&quot;, &quot;0&quot;);</div><div class=\"line\">        addItem(&quot;2&quot;, &quot;订单处理&quot;, &quot;TRADE_OPE&quot;, &quot;0&quot;);</div><div class=\"line\">        addItem(&quot;3&quot;, &quot;订单删除&quot;, &quot;TRADE_DEL&quot;, &quot;0&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void addItem(String id, String name, String code, String paterId) &#123;</div><div class=\"line\">        MenuItem menuItem = new MenuItem(id, name, code, paterId);</div><div class=\"line\">        menuItems.add(menuItem);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Deprecated</div><div class=\"line\">    public ArrayList getMenuItems() &#123;</div><div class=\"line\">        return menuItems;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public Iterator createIterator() &#123;</div><div class=\"line\">        return new TradeMenuIterator(menuItems);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private class TradeMenuIterator implements Iterator &#123;</div><div class=\"line\"></div><div class=\"line\">        ArrayList&lt;MenuItem&gt; items;</div><div class=\"line\">        int position = 0;</div><div class=\"line\"></div><div class=\"line\">        public TradeMenuIterator(ArrayList&lt;MenuItem&gt; items) &#123;</div><div class=\"line\">            this.items = items;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        @Override</div><div class=\"line\">        public boolean hasNext() &#123;</div><div class=\"line\"></div><div class=\"line\">            if (position &gt;= items.size()) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                return true;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        @Override</div><div class=\"line\">        public Object next() &#123;</div><div class=\"line\">            MenuItem menuItem = items.get(position);</div><div class=\"line\">            ++position;</div><div class=\"line\">            return menuItem;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">class MenuItem &#123;</div><div class=\"line\"></div><div class=\"line\">    public MenuItem(String code, String id, String name, String paterId) &#123;</div><div class=\"line\">        this.code = code;</div><div class=\"line\">        this.id = id;</div><div class=\"line\">        this.name = name;</div><div class=\"line\">        this.paterId = paterId;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private String id;</div><div class=\"line\">    private String name;</div><div class=\"line\">    private String code;</div><div class=\"line\">    private String paterId;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public String getCode() &#123;</div><div class=\"line\">        return code;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public String getId() &#123;</div><div class=\"line\">        return id;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public String getName() &#123;</div><div class=\"line\">        return name;</div><div class=\"line\">    &#125;</div><div class=\"line\">    public String getPaterId() &#123;</div><div class=\"line\">        return paterId;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String toString() &#123;</div><div class=\"line\">        return &quot;MenuItem&#123;&quot; +</div><div class=\"line\">                &quot;code=&apos;&quot; + code + &apos;\\&apos;&apos; +</div><div class=\"line\">                &quot;, id=&apos;&quot; + id + &apos;\\&apos;&apos; +</div><div class=\"line\">                &quot;, name=&apos;&quot; + name + &apos;\\&apos;&apos; +</div><div class=\"line\">                &quot;, paterId=&apos;&quot; + paterId + &apos;\\&apos;&apos; +</div><div class=\"line\">                &apos;&#125;&apos;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"设计模式观察模式-不解释","date":"2017-03-10T09:08:36.000Z","layout":"clean-blog","slug":"设计模式观察模式-不解释","_content":"\n### 观察模式　有时被称作发布/订阅模式，观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己\n\n\n```\n\n\nimport java.util.Vector;\n\n\n/**\n * 观察模式(java 内部提供  java.util.Observable,java.util.Observer)\n * 当前demo中手动实现\n * 实现场景需求: 用户订制消息主题 一个用户可以订制多主题\n */\npublic class ObservePattren {\n\n\n    public static void main(String args[]) {\n\n\n        //用户注册消息\n        UserRegisterMsgSubject userRegisterMsgSubject = new UserRegisterMsgSubject();\n\n        //系统消息\n        SystemMsgSubject systemMsgSubject = new SystemMsgSubject();\n\n        //创建观察者\n        AdministratorObserve administratorObserve = new AdministratorObserve(userRegisterMsgSubject);\n        systemMsgSubject.addObserver(administratorObserve);\n\n        EmployeeObserve employeeObserve = new EmployeeObserve(userRegisterMsgSubject);\n        systemMsgSubject.addObserver(employeeObserve);\n\n        //广播通知\n        userRegisterMsgSubject.setUserRegisterMsgSubject(\"张铁锤\",\"129.12.1.21:9999\",\"123456\");\n        //系统消息\n        systemMsgSubject.setSystemMsgSubject(\"数据中心\",\"您好,这是一个系统消息\");\n\n\n    }\n\n\n}\n\n\ninterface Observe {\n    void update(MsgSubject o, Object arg);\n}\n\n\n/**\n * 管理员类型\n */\nclass AdministratorObserve implements Observe {\n\n    private MsgSubject subject;\n\n    public AdministratorObserve(MsgSubject subject) {\n        this.subject = subject;\n        subject.addObserver(this);\n    }\n\n    @Override\n    public void update(MsgSubject o, Object arg) {\n\n        if (o instanceof UserRegisterMsgSubject) {\n            UserRegisterMsgSubject userRegisterMsgSubject = (UserRegisterMsgSubject) o;\n            System.out.println(\"我是管理员==>\"+userRegisterMsgSubject.subjectName()+\"==>\"+userRegisterMsgSubject.getIp() + \"==\" + userRegisterMsgSubject.getUserName() + \"===\" + userRegisterMsgSubject.getPw());\n        }\n\n        if (o instanceof SystemMsgSubject) {\n            SystemMsgSubject systemMsgSubject = (SystemMsgSubject) o;\n            System.out.println(\"我是管理员==>\"+systemMsgSubject.getSystemName()+\"==>\"+arg);\n         }\n\n    }\n}\n\n\n/**\n * 员工类型\n */\nclass  EmployeeObserve implements Observe {\n\n    private MsgSubject subject;\n\n    public EmployeeObserve(MsgSubject subject) {\n        this.subject = subject;\n        subject.addObserver(this);\n    }\n\n    @Override\n    public void update(MsgSubject o, Object arg) {\n\n        if (o instanceof UserRegisterMsgSubject) {\n            UserRegisterMsgSubject userRegisterMsgSubject = (UserRegisterMsgSubject) o;\n            System.out.println(\"我是普通员工==>\"+userRegisterMsgSubject.subjectName()+\"==>\"+userRegisterMsgSubject.getIp() + \"==\" + userRegisterMsgSubject.getUserName() + \"===\" + userRegisterMsgSubject.getPw());\n        }\n\n        if (o instanceof SystemMsgSubject) {\n            SystemMsgSubject systemMsgSubject = (SystemMsgSubject) o;\n            System.out.println(\"我是普通员工==>\"+systemMsgSubject.getSystemName()+\"==>\"+arg);\n        }\n\n    }\n}\n\n\n/**\n * 用户注册消息\n */\nclass UserRegisterMsgSubject extends MsgSubject {\n\n    private String userName;\n    private String ip;\n    private String pw;\n\n    @Override\n    public String subjectName() {\n        return \"用户注册消息\";\n    }\n\n    public UserRegisterMsgSubject() {\n    }\n\n\n    public void notifyChange() {\n        setChanged();\n        notifyObserve();\n    }\n\n\n    public void setUserRegisterMsgSubject(String userName, String ip, String pw) {\n        this.userName = userName;\n        this.ip = ip;\n        this.pw = pw;\n        notifyChange();\n    }\n\n\n    public String getUserName() {\n        return userName;\n    }\n\n    public String getIp() {\n        return ip;\n    }\n\n    public String getPw() {\n        return pw;\n    }\n}\n\n\n/**\n * 系统消息\n */\nclass SystemMsgSubject extends MsgSubject {\n\n\n    private String systemName;\n\n    @Override\n    public String subjectName() {\n        return \"系统消息\";\n    }\n\n    public SystemMsgSubject() {\n    }\n\n\n    public void notifyChange(String msg) {\n        setChanged();\n        notifyObservers(msg);\n    }\n\n\n    public void setSystemMsgSubject(String systemName,String msg) {\n        this.systemName = systemName;\n        notifyChange(msg);\n    }\n\n    public String getSystemName() {\n        return systemName;\n    }\n\n}\n\n/**\n * 消息主题\n */\nabstract class MsgSubject {\n\n\n    private boolean changed = false;\n    private Vector<Observe> obs;\n\n    //必须要实现消息名称\n    abstract String subjectName();\n\n    public MsgSubject() {\n        obs = new Vector<>();\n    }\n\n    protected void addObserver(Observe o) {\n\n        if (o == null) {\n            throw new NullPointerException();\n        }\n\n        if (!obs.contains(o)) {\n            obs.add(o);\n        }\n    }\n\n    /**\n     * 删除观察者\n     **/\n    protected void deleteObserve(Observe o) {\n        obs.removeElement(o);\n    }\n\n    /**\n     * 通知观察者消息(不传入参数)\n     */\n    protected void notifyObserve() {\n        notifyObservers(null);\n    }\n\n    /**\n     * 通知观察者消息\n     */\n    protected void notifyObservers(Object arg) {\n\n        Object[] arrLocal = null;\n        if (!changed)\n            return;\n        arrLocal = obs.toArray();\n        clearChanged();\n        for (int i = arrLocal.length - 1; i >= 0; i--) {\n            ((Observe) arrLocal[i]).update(this, arg);\n        }\n    }\n\n\n    protected void setChanged() {\n        changed = true;\n    }\n\n\n    protected void clearChanged() {\n        changed = false;\n    }\n\n\n}\n\n\n```","source":"_posts/设计模式观察模式-不解释.md","raw":"---\ntitle: 设计模式观察模式-不解释\ndate: 2017-03-10 17:08:36\ntags: 设计模式\nlayout: clean-blog\nslug: ObservePattren\n---\n\n### 观察模式　有时被称作发布/订阅模式，观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己\n\n\n```\n\n\nimport java.util.Vector;\n\n\n/**\n * 观察模式(java 内部提供  java.util.Observable,java.util.Observer)\n * 当前demo中手动实现\n * 实现场景需求: 用户订制消息主题 一个用户可以订制多主题\n */\npublic class ObservePattren {\n\n\n    public static void main(String args[]) {\n\n\n        //用户注册消息\n        UserRegisterMsgSubject userRegisterMsgSubject = new UserRegisterMsgSubject();\n\n        //系统消息\n        SystemMsgSubject systemMsgSubject = new SystemMsgSubject();\n\n        //创建观察者\n        AdministratorObserve administratorObserve = new AdministratorObserve(userRegisterMsgSubject);\n        systemMsgSubject.addObserver(administratorObserve);\n\n        EmployeeObserve employeeObserve = new EmployeeObserve(userRegisterMsgSubject);\n        systemMsgSubject.addObserver(employeeObserve);\n\n        //广播通知\n        userRegisterMsgSubject.setUserRegisterMsgSubject(\"张铁锤\",\"129.12.1.21:9999\",\"123456\");\n        //系统消息\n        systemMsgSubject.setSystemMsgSubject(\"数据中心\",\"您好,这是一个系统消息\");\n\n\n    }\n\n\n}\n\n\ninterface Observe {\n    void update(MsgSubject o, Object arg);\n}\n\n\n/**\n * 管理员类型\n */\nclass AdministratorObserve implements Observe {\n\n    private MsgSubject subject;\n\n    public AdministratorObserve(MsgSubject subject) {\n        this.subject = subject;\n        subject.addObserver(this);\n    }\n\n    @Override\n    public void update(MsgSubject o, Object arg) {\n\n        if (o instanceof UserRegisterMsgSubject) {\n            UserRegisterMsgSubject userRegisterMsgSubject = (UserRegisterMsgSubject) o;\n            System.out.println(\"我是管理员==>\"+userRegisterMsgSubject.subjectName()+\"==>\"+userRegisterMsgSubject.getIp() + \"==\" + userRegisterMsgSubject.getUserName() + \"===\" + userRegisterMsgSubject.getPw());\n        }\n\n        if (o instanceof SystemMsgSubject) {\n            SystemMsgSubject systemMsgSubject = (SystemMsgSubject) o;\n            System.out.println(\"我是管理员==>\"+systemMsgSubject.getSystemName()+\"==>\"+arg);\n         }\n\n    }\n}\n\n\n/**\n * 员工类型\n */\nclass  EmployeeObserve implements Observe {\n\n    private MsgSubject subject;\n\n    public EmployeeObserve(MsgSubject subject) {\n        this.subject = subject;\n        subject.addObserver(this);\n    }\n\n    @Override\n    public void update(MsgSubject o, Object arg) {\n\n        if (o instanceof UserRegisterMsgSubject) {\n            UserRegisterMsgSubject userRegisterMsgSubject = (UserRegisterMsgSubject) o;\n            System.out.println(\"我是普通员工==>\"+userRegisterMsgSubject.subjectName()+\"==>\"+userRegisterMsgSubject.getIp() + \"==\" + userRegisterMsgSubject.getUserName() + \"===\" + userRegisterMsgSubject.getPw());\n        }\n\n        if (o instanceof SystemMsgSubject) {\n            SystemMsgSubject systemMsgSubject = (SystemMsgSubject) o;\n            System.out.println(\"我是普通员工==>\"+systemMsgSubject.getSystemName()+\"==>\"+arg);\n        }\n\n    }\n}\n\n\n/**\n * 用户注册消息\n */\nclass UserRegisterMsgSubject extends MsgSubject {\n\n    private String userName;\n    private String ip;\n    private String pw;\n\n    @Override\n    public String subjectName() {\n        return \"用户注册消息\";\n    }\n\n    public UserRegisterMsgSubject() {\n    }\n\n\n    public void notifyChange() {\n        setChanged();\n        notifyObserve();\n    }\n\n\n    public void setUserRegisterMsgSubject(String userName, String ip, String pw) {\n        this.userName = userName;\n        this.ip = ip;\n        this.pw = pw;\n        notifyChange();\n    }\n\n\n    public String getUserName() {\n        return userName;\n    }\n\n    public String getIp() {\n        return ip;\n    }\n\n    public String getPw() {\n        return pw;\n    }\n}\n\n\n/**\n * 系统消息\n */\nclass SystemMsgSubject extends MsgSubject {\n\n\n    private String systemName;\n\n    @Override\n    public String subjectName() {\n        return \"系统消息\";\n    }\n\n    public SystemMsgSubject() {\n    }\n\n\n    public void notifyChange(String msg) {\n        setChanged();\n        notifyObservers(msg);\n    }\n\n\n    public void setSystemMsgSubject(String systemName,String msg) {\n        this.systemName = systemName;\n        notifyChange(msg);\n    }\n\n    public String getSystemName() {\n        return systemName;\n    }\n\n}\n\n/**\n * 消息主题\n */\nabstract class MsgSubject {\n\n\n    private boolean changed = false;\n    private Vector<Observe> obs;\n\n    //必须要实现消息名称\n    abstract String subjectName();\n\n    public MsgSubject() {\n        obs = new Vector<>();\n    }\n\n    protected void addObserver(Observe o) {\n\n        if (o == null) {\n            throw new NullPointerException();\n        }\n\n        if (!obs.contains(o)) {\n            obs.add(o);\n        }\n    }\n\n    /**\n     * 删除观察者\n     **/\n    protected void deleteObserve(Observe o) {\n        obs.removeElement(o);\n    }\n\n    /**\n     * 通知观察者消息(不传入参数)\n     */\n    protected void notifyObserve() {\n        notifyObservers(null);\n    }\n\n    /**\n     * 通知观察者消息\n     */\n    protected void notifyObservers(Object arg) {\n\n        Object[] arrLocal = null;\n        if (!changed)\n            return;\n        arrLocal = obs.toArray();\n        clearChanged();\n        for (int i = arrLocal.length - 1; i >= 0; i--) {\n            ((Observe) arrLocal[i]).update(this, arg);\n        }\n    }\n\n\n    protected void setChanged() {\n        changed = true;\n    }\n\n\n    protected void clearChanged() {\n        changed = false;\n    }\n\n\n}\n\n\n```","published":1,"updated":"2017-03-10T09:29:40.000Z","comments":1,"photos":[],"link":"","_id":"cj0uc8d0v000wey5rntbm9g3j","content":"<h3 id=\"观察模式-有时被称作发布-订阅模式，观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己\"><a href=\"#观察模式-有时被称作发布-订阅模式，观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己\" class=\"headerlink\" title=\"观察模式　有时被称作发布/订阅模式，观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己\"></a>观察模式　有时被称作发布/订阅模式，观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">import java.util.Vector;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 观察模式(java 内部提供  java.util.Observable,java.util.Observer)</div><div class=\"line\"> * 当前demo中手动实现</div><div class=\"line\"> * 实现场景需求: 用户订制消息主题 一个用户可以订制多主题</div><div class=\"line\"> */</div><div class=\"line\">public class ObservePattren &#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public static void main(String args[]) &#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        //用户注册消息</div><div class=\"line\">        UserRegisterMsgSubject userRegisterMsgSubject = new UserRegisterMsgSubject();</div><div class=\"line\"></div><div class=\"line\">        //系统消息</div><div class=\"line\">        SystemMsgSubject systemMsgSubject = new SystemMsgSubject();</div><div class=\"line\"></div><div class=\"line\">        //创建观察者</div><div class=\"line\">        AdministratorObserve administratorObserve = new AdministratorObserve(userRegisterMsgSubject);</div><div class=\"line\">        systemMsgSubject.addObserver(administratorObserve);</div><div class=\"line\"></div><div class=\"line\">        EmployeeObserve employeeObserve = new EmployeeObserve(userRegisterMsgSubject);</div><div class=\"line\">        systemMsgSubject.addObserver(employeeObserve);</div><div class=\"line\"></div><div class=\"line\">        //广播通知</div><div class=\"line\">        userRegisterMsgSubject.setUserRegisterMsgSubject(&quot;张铁锤&quot;,&quot;129.12.1.21:9999&quot;,&quot;123456&quot;);</div><div class=\"line\">        //系统消息</div><div class=\"line\">        systemMsgSubject.setSystemMsgSubject(&quot;数据中心&quot;,&quot;您好,这是一个系统消息&quot;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">interface Observe &#123;</div><div class=\"line\">    void update(MsgSubject o, Object arg);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 管理员类型</div><div class=\"line\"> */</div><div class=\"line\">class AdministratorObserve implements Observe &#123;</div><div class=\"line\"></div><div class=\"line\">    private MsgSubject subject;</div><div class=\"line\"></div><div class=\"line\">    public AdministratorObserve(MsgSubject subject) &#123;</div><div class=\"line\">        this.subject = subject;</div><div class=\"line\">        subject.addObserver(this);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void update(MsgSubject o, Object arg) &#123;</div><div class=\"line\"></div><div class=\"line\">        if (o instanceof UserRegisterMsgSubject) &#123;</div><div class=\"line\">            UserRegisterMsgSubject userRegisterMsgSubject = (UserRegisterMsgSubject) o;</div><div class=\"line\">            System.out.println(&quot;我是管理员==&gt;&quot;+userRegisterMsgSubject.subjectName()+&quot;==&gt;&quot;+userRegisterMsgSubject.getIp() + &quot;==&quot; + userRegisterMsgSubject.getUserName() + &quot;===&quot; + userRegisterMsgSubject.getPw());</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        if (o instanceof SystemMsgSubject) &#123;</div><div class=\"line\">            SystemMsgSubject systemMsgSubject = (SystemMsgSubject) o;</div><div class=\"line\">            System.out.println(&quot;我是管理员==&gt;&quot;+systemMsgSubject.getSystemName()+&quot;==&gt;&quot;+arg);</div><div class=\"line\">         &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 员工类型</div><div class=\"line\"> */</div><div class=\"line\">class  EmployeeObserve implements Observe &#123;</div><div class=\"line\"></div><div class=\"line\">    private MsgSubject subject;</div><div class=\"line\"></div><div class=\"line\">    public EmployeeObserve(MsgSubject subject) &#123;</div><div class=\"line\">        this.subject = subject;</div><div class=\"line\">        subject.addObserver(this);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void update(MsgSubject o, Object arg) &#123;</div><div class=\"line\"></div><div class=\"line\">        if (o instanceof UserRegisterMsgSubject) &#123;</div><div class=\"line\">            UserRegisterMsgSubject userRegisterMsgSubject = (UserRegisterMsgSubject) o;</div><div class=\"line\">            System.out.println(&quot;我是普通员工==&gt;&quot;+userRegisterMsgSubject.subjectName()+&quot;==&gt;&quot;+userRegisterMsgSubject.getIp() + &quot;==&quot; + userRegisterMsgSubject.getUserName() + &quot;===&quot; + userRegisterMsgSubject.getPw());</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        if (o instanceof SystemMsgSubject) &#123;</div><div class=\"line\">            SystemMsgSubject systemMsgSubject = (SystemMsgSubject) o;</div><div class=\"line\">            System.out.println(&quot;我是普通员工==&gt;&quot;+systemMsgSubject.getSystemName()+&quot;==&gt;&quot;+arg);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 用户注册消息</div><div class=\"line\"> */</div><div class=\"line\">class UserRegisterMsgSubject extends MsgSubject &#123;</div><div class=\"line\"></div><div class=\"line\">    private String userName;</div><div class=\"line\">    private String ip;</div><div class=\"line\">    private String pw;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String subjectName() &#123;</div><div class=\"line\">        return &quot;用户注册消息&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public UserRegisterMsgSubject() &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public void notifyChange() &#123;</div><div class=\"line\">        setChanged();</div><div class=\"line\">        notifyObserve();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public void setUserRegisterMsgSubject(String userName, String ip, String pw) &#123;</div><div class=\"line\">        this.userName = userName;</div><div class=\"line\">        this.ip = ip;</div><div class=\"line\">        this.pw = pw;</div><div class=\"line\">        notifyChange();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public String getUserName() &#123;</div><div class=\"line\">        return userName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public String getIp() &#123;</div><div class=\"line\">        return ip;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public String getPw() &#123;</div><div class=\"line\">        return pw;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 系统消息</div><div class=\"line\"> */</div><div class=\"line\">class SystemMsgSubject extends MsgSubject &#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    private String systemName;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String subjectName() &#123;</div><div class=\"line\">        return &quot;系统消息&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public SystemMsgSubject() &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public void notifyChange(String msg) &#123;</div><div class=\"line\">        setChanged();</div><div class=\"line\">        notifyObservers(msg);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public void setSystemMsgSubject(String systemName,String msg) &#123;</div><div class=\"line\">        this.systemName = systemName;</div><div class=\"line\">        notifyChange(msg);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public String getSystemName() &#123;</div><div class=\"line\">        return systemName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 消息主题</div><div class=\"line\"> */</div><div class=\"line\">abstract class MsgSubject &#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    private boolean changed = false;</div><div class=\"line\">    private Vector&lt;Observe&gt; obs;</div><div class=\"line\"></div><div class=\"line\">    //必须要实现消息名称</div><div class=\"line\">    abstract String subjectName();</div><div class=\"line\"></div><div class=\"line\">    public MsgSubject() &#123;</div><div class=\"line\">        obs = new Vector&lt;&gt;();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void addObserver(Observe o) &#123;</div><div class=\"line\"></div><div class=\"line\">        if (o == null) &#123;</div><div class=\"line\">            throw new NullPointerException();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        if (!obs.contains(o)) &#123;</div><div class=\"line\">            obs.add(o);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 删除观察者</div><div class=\"line\">     **/</div><div class=\"line\">    protected void deleteObserve(Observe o) &#123;</div><div class=\"line\">        obs.removeElement(o);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 通知观察者消息(不传入参数)</div><div class=\"line\">     */</div><div class=\"line\">    protected void notifyObserve() &#123;</div><div class=\"line\">        notifyObservers(null);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 通知观察者消息</div><div class=\"line\">     */</div><div class=\"line\">    protected void notifyObservers(Object arg) &#123;</div><div class=\"line\"></div><div class=\"line\">        Object[] arrLocal = null;</div><div class=\"line\">        if (!changed)</div><div class=\"line\">            return;</div><div class=\"line\">        arrLocal = obs.toArray();</div><div class=\"line\">        clearChanged();</div><div class=\"line\">        for (int i = arrLocal.length - 1; i &gt;= 0; i--) &#123;</div><div class=\"line\">            ((Observe) arrLocal[i]).update(this, arg);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    protected void setChanged() &#123;</div><div class=\"line\">        changed = true;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    protected void clearChanged() &#123;</div><div class=\"line\">        changed = false;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h3 id=\"观察模式-有时被称作发布-订阅模式，观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己\"><a href=\"#观察模式-有时被称作发布-订阅模式，观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己\" class=\"headerlink\" title=\"观察模式　有时被称作发布/订阅模式，观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己\"></a>观察模式　有时被称作发布/订阅模式，观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">import java.util.Vector;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 观察模式(java 内部提供  java.util.Observable,java.util.Observer)</div><div class=\"line\"> * 当前demo中手动实现</div><div class=\"line\"> * 实现场景需求: 用户订制消息主题 一个用户可以订制多主题</div><div class=\"line\"> */</div><div class=\"line\">public class ObservePattren &#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public static void main(String args[]) &#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        //用户注册消息</div><div class=\"line\">        UserRegisterMsgSubject userRegisterMsgSubject = new UserRegisterMsgSubject();</div><div class=\"line\"></div><div class=\"line\">        //系统消息</div><div class=\"line\">        SystemMsgSubject systemMsgSubject = new SystemMsgSubject();</div><div class=\"line\"></div><div class=\"line\">        //创建观察者</div><div class=\"line\">        AdministratorObserve administratorObserve = new AdministratorObserve(userRegisterMsgSubject);</div><div class=\"line\">        systemMsgSubject.addObserver(administratorObserve);</div><div class=\"line\"></div><div class=\"line\">        EmployeeObserve employeeObserve = new EmployeeObserve(userRegisterMsgSubject);</div><div class=\"line\">        systemMsgSubject.addObserver(employeeObserve);</div><div class=\"line\"></div><div class=\"line\">        //广播通知</div><div class=\"line\">        userRegisterMsgSubject.setUserRegisterMsgSubject(&quot;张铁锤&quot;,&quot;129.12.1.21:9999&quot;,&quot;123456&quot;);</div><div class=\"line\">        //系统消息</div><div class=\"line\">        systemMsgSubject.setSystemMsgSubject(&quot;数据中心&quot;,&quot;您好,这是一个系统消息&quot;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">interface Observe &#123;</div><div class=\"line\">    void update(MsgSubject o, Object arg);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 管理员类型</div><div class=\"line\"> */</div><div class=\"line\">class AdministratorObserve implements Observe &#123;</div><div class=\"line\"></div><div class=\"line\">    private MsgSubject subject;</div><div class=\"line\"></div><div class=\"line\">    public AdministratorObserve(MsgSubject subject) &#123;</div><div class=\"line\">        this.subject = subject;</div><div class=\"line\">        subject.addObserver(this);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void update(MsgSubject o, Object arg) &#123;</div><div class=\"line\"></div><div class=\"line\">        if (o instanceof UserRegisterMsgSubject) &#123;</div><div class=\"line\">            UserRegisterMsgSubject userRegisterMsgSubject = (UserRegisterMsgSubject) o;</div><div class=\"line\">            System.out.println(&quot;我是管理员==&gt;&quot;+userRegisterMsgSubject.subjectName()+&quot;==&gt;&quot;+userRegisterMsgSubject.getIp() + &quot;==&quot; + userRegisterMsgSubject.getUserName() + &quot;===&quot; + userRegisterMsgSubject.getPw());</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        if (o instanceof SystemMsgSubject) &#123;</div><div class=\"line\">            SystemMsgSubject systemMsgSubject = (SystemMsgSubject) o;</div><div class=\"line\">            System.out.println(&quot;我是管理员==&gt;&quot;+systemMsgSubject.getSystemName()+&quot;==&gt;&quot;+arg);</div><div class=\"line\">         &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 员工类型</div><div class=\"line\"> */</div><div class=\"line\">class  EmployeeObserve implements Observe &#123;</div><div class=\"line\"></div><div class=\"line\">    private MsgSubject subject;</div><div class=\"line\"></div><div class=\"line\">    public EmployeeObserve(MsgSubject subject) &#123;</div><div class=\"line\">        this.subject = subject;</div><div class=\"line\">        subject.addObserver(this);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void update(MsgSubject o, Object arg) &#123;</div><div class=\"line\"></div><div class=\"line\">        if (o instanceof UserRegisterMsgSubject) &#123;</div><div class=\"line\">            UserRegisterMsgSubject userRegisterMsgSubject = (UserRegisterMsgSubject) o;</div><div class=\"line\">            System.out.println(&quot;我是普通员工==&gt;&quot;+userRegisterMsgSubject.subjectName()+&quot;==&gt;&quot;+userRegisterMsgSubject.getIp() + &quot;==&quot; + userRegisterMsgSubject.getUserName() + &quot;===&quot; + userRegisterMsgSubject.getPw());</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        if (o instanceof SystemMsgSubject) &#123;</div><div class=\"line\">            SystemMsgSubject systemMsgSubject = (SystemMsgSubject) o;</div><div class=\"line\">            System.out.println(&quot;我是普通员工==&gt;&quot;+systemMsgSubject.getSystemName()+&quot;==&gt;&quot;+arg);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 用户注册消息</div><div class=\"line\"> */</div><div class=\"line\">class UserRegisterMsgSubject extends MsgSubject &#123;</div><div class=\"line\"></div><div class=\"line\">    private String userName;</div><div class=\"line\">    private String ip;</div><div class=\"line\">    private String pw;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String subjectName() &#123;</div><div class=\"line\">        return &quot;用户注册消息&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public UserRegisterMsgSubject() &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public void notifyChange() &#123;</div><div class=\"line\">        setChanged();</div><div class=\"line\">        notifyObserve();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public void setUserRegisterMsgSubject(String userName, String ip, String pw) &#123;</div><div class=\"line\">        this.userName = userName;</div><div class=\"line\">        this.ip = ip;</div><div class=\"line\">        this.pw = pw;</div><div class=\"line\">        notifyChange();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public String getUserName() &#123;</div><div class=\"line\">        return userName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public String getIp() &#123;</div><div class=\"line\">        return ip;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public String getPw() &#123;</div><div class=\"line\">        return pw;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 系统消息</div><div class=\"line\"> */</div><div class=\"line\">class SystemMsgSubject extends MsgSubject &#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    private String systemName;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String subjectName() &#123;</div><div class=\"line\">        return &quot;系统消息&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public SystemMsgSubject() &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public void notifyChange(String msg) &#123;</div><div class=\"line\">        setChanged();</div><div class=\"line\">        notifyObservers(msg);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public void setSystemMsgSubject(String systemName,String msg) &#123;</div><div class=\"line\">        this.systemName = systemName;</div><div class=\"line\">        notifyChange(msg);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public String getSystemName() &#123;</div><div class=\"line\">        return systemName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 消息主题</div><div class=\"line\"> */</div><div class=\"line\">abstract class MsgSubject &#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    private boolean changed = false;</div><div class=\"line\">    private Vector&lt;Observe&gt; obs;</div><div class=\"line\"></div><div class=\"line\">    //必须要实现消息名称</div><div class=\"line\">    abstract String subjectName();</div><div class=\"line\"></div><div class=\"line\">    public MsgSubject() &#123;</div><div class=\"line\">        obs = new Vector&lt;&gt;();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void addObserver(Observe o) &#123;</div><div class=\"line\"></div><div class=\"line\">        if (o == null) &#123;</div><div class=\"line\">            throw new NullPointerException();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        if (!obs.contains(o)) &#123;</div><div class=\"line\">            obs.add(o);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 删除观察者</div><div class=\"line\">     **/</div><div class=\"line\">    protected void deleteObserve(Observe o) &#123;</div><div class=\"line\">        obs.removeElement(o);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 通知观察者消息(不传入参数)</div><div class=\"line\">     */</div><div class=\"line\">    protected void notifyObserve() &#123;</div><div class=\"line\">        notifyObservers(null);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 通知观察者消息</div><div class=\"line\">     */</div><div class=\"line\">    protected void notifyObservers(Object arg) &#123;</div><div class=\"line\"></div><div class=\"line\">        Object[] arrLocal = null;</div><div class=\"line\">        if (!changed)</div><div class=\"line\">            return;</div><div class=\"line\">        arrLocal = obs.toArray();</div><div class=\"line\">        clearChanged();</div><div class=\"line\">        for (int i = arrLocal.length - 1; i &gt;= 0; i--) &#123;</div><div class=\"line\">            ((Observe) arrLocal[i]).update(this, arg);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    protected void setChanged() &#123;</div><div class=\"line\">        changed = true;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    protected void clearChanged() &#123;</div><div class=\"line\">        changed = false;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"设计模式适配器模式-不解释","date":"2017-03-10T09:18:57.000Z","layout":"clean-blog","slug":"设计模式适配器模式-不解释","_content":"\n\n###  适配器模式: 将一个类的接口,转化成客户期望的另一个接口,适配器让原本不兼容的类可以合作无间\n\n```\n\n\n/**\n * 适配器模式: 将一个类的接口,转化成客户期望的另一个接口,适配器让原本不兼容的类可以合作无间\n * 适配过程\n * 1.客户通过目标接口调用适配器的方法对适配器发出请求\n * 2.适配器使用被适配者接口把请求转化成适配者的一个或多个调用接口\n * 3.客户接受到调用的结果,但并未察觉这一切是适配器在起转化作用\n *\n * 对象适配器:基于组合实现(所有方法必须使用适配者中的方法重新实现,可以接受任务目标接口子类)\n * 类适配器: 基于继承实现 (方法可自定义实现,不用完全重新目标接口中方法 直接继承被适配者)\n *\n *\n * ***************\n * 当需要使用一个现有的类而起接口并不符合你的需要时,就使用适配器\n * 当需要简化并统一一个很大的接口或是一群复杂的接口是,使用外观\n * 适配器改变接口符合客户的期望\n * 外观将客户从一个负责的子系统中解耦\n * 实现一个外观,需要将系统组合进外观中,然后工作委托给子系统执行\n * 适配器模式两种模式: 对象适配,类适配\n * 适配器将一个对象包装起来以改变其接口,装饰者将一个对象包装起来以增加新的行为和责任,而外观将一群对象包装起来简化其接口\n * ***************\n */\npublic class AdapterPattern {\n\n\n    public static void main(String args[]){\n\n\n        System.out.println(\"--------------------对象适配----------------------------------------\");\n\n\n        outdoorGameAdapterTestByObjectDemo();\n\n\n        System.out.println(\"--------------------类适配----------------------------------------\");\n\n        outdoorGameAdapterTestByClassDemo();\n    }\n\n\n\n    //对象适配器演示\n    public static void outdoorGameAdapterTestByObjectDemo(){\n        //计算机游戏\n        ComputerGame computerGame = new TheWorldOfLegendGame();\n\n        computerGame.spend();\n        computerGame.timeLimit();\n\n\n        //使用对象适配 户外活动游戏\n        OutdoorGame outdoorGame = new ClimbMountainGame();\n        computerGame = new OutdoorGameAdapter(outdoorGame);\n        System.out.println(\"===适配后===\");\n        computerGame.spend();\n        computerGame.timeLimit();\n    }\n\n    //类适配器演示\n    public static void outdoorGameAdapterTestByClassDemo(){\n        //计算机游戏\n        ComputerGame computerGame = new TheWorldOfLegendGame();\n\n        computerGame.spend();\n        computerGame.timeLimit();\n\n        computerGame = new OutdoorGameAdapter2(computerGame);\n\n        System.out.println(\"===适配后===\");\n        computerGame.spend();\n        computerGame.timeLimit();\n\n     }\n\n}\n\n//定义个计算机游戏接口\ninterface ComputerGame{\n\n    //游戏需要花费\n    void spend();\n\n    //游戏时间限制\n    void timeLimit();\n}\n\n//定义户外活动接口\ninterface OutdoorGame{\n\n    //活动报名费用\n    void enrollSpend();\n    //活动门票\n    void entranceSpend();\n    //活动车费\n    void waySpend();\n\n    //活动时间\n    void  SportTime();\n\n}\n\n//计算机游戏具体实现\nclass TheWorldOfLegendGame implements ComputerGame{\n\n    @Override\n    public void spend() {\n\n        System.out.println(\"传奇世界 需要花费每小时5元人民币\");\n    }\n\n    @Override\n    public void timeLimit() {\n\n        System.out.println(\"每天最多在线7小时\");\n    }\n}\n\n//获取活动具体实现\n\nclass ClimbMountainGame implements OutdoorGame{\n\n    @Override\n    public void enrollSpend() {\n        System.out.println(\"报名费 10元\");\n    }\n\n    @Override\n    public void entranceSpend() {\n        System.out.println(\"门票 15元\");\n    }\n\n    @Override\n    public void waySpend() {\n        System.out.println(\"路费 50元\");\n    }\n\n    @Override\n    public void SportTime() {\n        System.out.println(\"活动时间一天 17小时左右\");\n    }\n\n}\n\n\n\n\n\n//---------- 对象适配器 将 OutdoorGame 适配 SportGame 可以接受任意 ComputerGame 子类   ---------\n\n\n//定义 OutdoorGame 适配器\nclass OutdoorGameAdapter implements ComputerGame{\n\n    OutdoorGame outdoorGame;\n\n    public OutdoorGameAdapter(OutdoorGame outdoorGame) {\n        this.outdoorGame = outdoorGame;\n    }\n\n    @Override\n    public void spend() {\n        outdoorGame.enrollSpend();\n        outdoorGame.entranceSpend();\n        outdoorGame.waySpend();\n    }\n\n    @Override\n    public void timeLimit() {\n        outdoorGame.SportTime();\n    }\n}\n\n\n\n\n//---------- 类适配器 ---------\n\n//我们只想使用配适配这的 消费方法(spend()),时间方法沿用目标接口(timeLimit())\nclass OutdoorGameAdapter2 extends ClimbMountainGame implements ComputerGame{\n\n\n    ComputerGame computerGame;\n    public OutdoorGameAdapter2(ComputerGame computerGame) {\n        this.computerGame = computerGame;\n    }\n\n    @Override\n    public void spend() {\n        super.enrollSpend();\n        super.entranceSpend();\n        super.waySpend();\n    }\n\n    @Override\n    public void timeLimit() {\n        computerGame.timeLimit();\n    }\n\n\n}\n\n```","source":"_posts/设计模式适配器模式-不解释.md","raw":"---\ntitle: 设计模式适配器模式-不解释\ndate: 2017-03-10 17:18:57\ntags: 设计模式\nlayout: clean-blog\nslug: AdapterPattern\n\n\n---\n\n\n###  适配器模式: 将一个类的接口,转化成客户期望的另一个接口,适配器让原本不兼容的类可以合作无间\n\n```\n\n\n/**\n * 适配器模式: 将一个类的接口,转化成客户期望的另一个接口,适配器让原本不兼容的类可以合作无间\n * 适配过程\n * 1.客户通过目标接口调用适配器的方法对适配器发出请求\n * 2.适配器使用被适配者接口把请求转化成适配者的一个或多个调用接口\n * 3.客户接受到调用的结果,但并未察觉这一切是适配器在起转化作用\n *\n * 对象适配器:基于组合实现(所有方法必须使用适配者中的方法重新实现,可以接受任务目标接口子类)\n * 类适配器: 基于继承实现 (方法可自定义实现,不用完全重新目标接口中方法 直接继承被适配者)\n *\n *\n * ***************\n * 当需要使用一个现有的类而起接口并不符合你的需要时,就使用适配器\n * 当需要简化并统一一个很大的接口或是一群复杂的接口是,使用外观\n * 适配器改变接口符合客户的期望\n * 外观将客户从一个负责的子系统中解耦\n * 实现一个外观,需要将系统组合进外观中,然后工作委托给子系统执行\n * 适配器模式两种模式: 对象适配,类适配\n * 适配器将一个对象包装起来以改变其接口,装饰者将一个对象包装起来以增加新的行为和责任,而外观将一群对象包装起来简化其接口\n * ***************\n */\npublic class AdapterPattern {\n\n\n    public static void main(String args[]){\n\n\n        System.out.println(\"--------------------对象适配----------------------------------------\");\n\n\n        outdoorGameAdapterTestByObjectDemo();\n\n\n        System.out.println(\"--------------------类适配----------------------------------------\");\n\n        outdoorGameAdapterTestByClassDemo();\n    }\n\n\n\n    //对象适配器演示\n    public static void outdoorGameAdapterTestByObjectDemo(){\n        //计算机游戏\n        ComputerGame computerGame = new TheWorldOfLegendGame();\n\n        computerGame.spend();\n        computerGame.timeLimit();\n\n\n        //使用对象适配 户外活动游戏\n        OutdoorGame outdoorGame = new ClimbMountainGame();\n        computerGame = new OutdoorGameAdapter(outdoorGame);\n        System.out.println(\"===适配后===\");\n        computerGame.spend();\n        computerGame.timeLimit();\n    }\n\n    //类适配器演示\n    public static void outdoorGameAdapterTestByClassDemo(){\n        //计算机游戏\n        ComputerGame computerGame = new TheWorldOfLegendGame();\n\n        computerGame.spend();\n        computerGame.timeLimit();\n\n        computerGame = new OutdoorGameAdapter2(computerGame);\n\n        System.out.println(\"===适配后===\");\n        computerGame.spend();\n        computerGame.timeLimit();\n\n     }\n\n}\n\n//定义个计算机游戏接口\ninterface ComputerGame{\n\n    //游戏需要花费\n    void spend();\n\n    //游戏时间限制\n    void timeLimit();\n}\n\n//定义户外活动接口\ninterface OutdoorGame{\n\n    //活动报名费用\n    void enrollSpend();\n    //活动门票\n    void entranceSpend();\n    //活动车费\n    void waySpend();\n\n    //活动时间\n    void  SportTime();\n\n}\n\n//计算机游戏具体实现\nclass TheWorldOfLegendGame implements ComputerGame{\n\n    @Override\n    public void spend() {\n\n        System.out.println(\"传奇世界 需要花费每小时5元人民币\");\n    }\n\n    @Override\n    public void timeLimit() {\n\n        System.out.println(\"每天最多在线7小时\");\n    }\n}\n\n//获取活动具体实现\n\nclass ClimbMountainGame implements OutdoorGame{\n\n    @Override\n    public void enrollSpend() {\n        System.out.println(\"报名费 10元\");\n    }\n\n    @Override\n    public void entranceSpend() {\n        System.out.println(\"门票 15元\");\n    }\n\n    @Override\n    public void waySpend() {\n        System.out.println(\"路费 50元\");\n    }\n\n    @Override\n    public void SportTime() {\n        System.out.println(\"活动时间一天 17小时左右\");\n    }\n\n}\n\n\n\n\n\n//---------- 对象适配器 将 OutdoorGame 适配 SportGame 可以接受任意 ComputerGame 子类   ---------\n\n\n//定义 OutdoorGame 适配器\nclass OutdoorGameAdapter implements ComputerGame{\n\n    OutdoorGame outdoorGame;\n\n    public OutdoorGameAdapter(OutdoorGame outdoorGame) {\n        this.outdoorGame = outdoorGame;\n    }\n\n    @Override\n    public void spend() {\n        outdoorGame.enrollSpend();\n        outdoorGame.entranceSpend();\n        outdoorGame.waySpend();\n    }\n\n    @Override\n    public void timeLimit() {\n        outdoorGame.SportTime();\n    }\n}\n\n\n\n\n//---------- 类适配器 ---------\n\n//我们只想使用配适配这的 消费方法(spend()),时间方法沿用目标接口(timeLimit())\nclass OutdoorGameAdapter2 extends ClimbMountainGame implements ComputerGame{\n\n\n    ComputerGame computerGame;\n    public OutdoorGameAdapter2(ComputerGame computerGame) {\n        this.computerGame = computerGame;\n    }\n\n    @Override\n    public void spend() {\n        super.enrollSpend();\n        super.entranceSpend();\n        super.waySpend();\n    }\n\n    @Override\n    public void timeLimit() {\n        computerGame.timeLimit();\n    }\n\n\n}\n\n```","published":1,"updated":"2017-03-10T09:29:42.000Z","comments":1,"photos":[],"link":"","_id":"cj0uc8d0x000yey5rtmlqwcj0","content":"<h3 id=\"适配器模式-将一个类的接口-转化成客户期望的另一个接口-适配器让原本不兼容的类可以合作无间\"><a href=\"#适配器模式-将一个类的接口-转化成客户期望的另一个接口-适配器让原本不兼容的类可以合作无间\" class=\"headerlink\" title=\"适配器模式: 将一个类的接口,转化成客户期望的另一个接口,适配器让原本不兼容的类可以合作无间\"></a>适配器模式: 将一个类的接口,转化成客户期望的另一个接口,适配器让原本不兼容的类可以合作无间</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 适配器模式: 将一个类的接口,转化成客户期望的另一个接口,适配器让原本不兼容的类可以合作无间</div><div class=\"line\"> * 适配过程</div><div class=\"line\"> * 1.客户通过目标接口调用适配器的方法对适配器发出请求</div><div class=\"line\"> * 2.适配器使用被适配者接口把请求转化成适配者的一个或多个调用接口</div><div class=\"line\"> * 3.客户接受到调用的结果,但并未察觉这一切是适配器在起转化作用</div><div class=\"line\"> *</div><div class=\"line\"> * 对象适配器:基于组合实现(所有方法必须使用适配者中的方法重新实现,可以接受任务目标接口子类)</div><div class=\"line\"> * 类适配器: 基于继承实现 (方法可自定义实现,不用完全重新目标接口中方法 直接继承被适配者)</div><div class=\"line\"> *</div><div class=\"line\"> *</div><div class=\"line\"> * ***************</div><div class=\"line\"> * 当需要使用一个现有的类而起接口并不符合你的需要时,就使用适配器</div><div class=\"line\"> * 当需要简化并统一一个很大的接口或是一群复杂的接口是,使用外观</div><div class=\"line\"> * 适配器改变接口符合客户的期望</div><div class=\"line\"> * 外观将客户从一个负责的子系统中解耦</div><div class=\"line\"> * 实现一个外观,需要将系统组合进外观中,然后工作委托给子系统执行</div><div class=\"line\"> * 适配器模式两种模式: 对象适配,类适配</div><div class=\"line\"> * 适配器将一个对象包装起来以改变其接口,装饰者将一个对象包装起来以增加新的行为和责任,而外观将一群对象包装起来简化其接口</div><div class=\"line\"> * ***************</div><div class=\"line\"> */</div><div class=\"line\">public class AdapterPattern &#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public static void main(String args[])&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;--------------------对象适配----------------------------------------&quot;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        outdoorGameAdapterTestByObjectDemo();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;--------------------类适配----------------------------------------&quot;);</div><div class=\"line\"></div><div class=\"line\">        outdoorGameAdapterTestByClassDemo();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    //对象适配器演示</div><div class=\"line\">    public static void outdoorGameAdapterTestByObjectDemo()&#123;</div><div class=\"line\">        //计算机游戏</div><div class=\"line\">        ComputerGame computerGame = new TheWorldOfLegendGame();</div><div class=\"line\"></div><div class=\"line\">        computerGame.spend();</div><div class=\"line\">        computerGame.timeLimit();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        //使用对象适配 户外活动游戏</div><div class=\"line\">        OutdoorGame outdoorGame = new ClimbMountainGame();</div><div class=\"line\">        computerGame = new OutdoorGameAdapter(outdoorGame);</div><div class=\"line\">        System.out.println(&quot;===适配后===&quot;);</div><div class=\"line\">        computerGame.spend();</div><div class=\"line\">        computerGame.timeLimit();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //类适配器演示</div><div class=\"line\">    public static void outdoorGameAdapterTestByClassDemo()&#123;</div><div class=\"line\">        //计算机游戏</div><div class=\"line\">        ComputerGame computerGame = new TheWorldOfLegendGame();</div><div class=\"line\"></div><div class=\"line\">        computerGame.spend();</div><div class=\"line\">        computerGame.timeLimit();</div><div class=\"line\"></div><div class=\"line\">        computerGame = new OutdoorGameAdapter2(computerGame);</div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;===适配后===&quot;);</div><div class=\"line\">        computerGame.spend();</div><div class=\"line\">        computerGame.timeLimit();</div><div class=\"line\"></div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//定义个计算机游戏接口</div><div class=\"line\">interface ComputerGame&#123;</div><div class=\"line\"></div><div class=\"line\">    //游戏需要花费</div><div class=\"line\">    void spend();</div><div class=\"line\"></div><div class=\"line\">    //游戏时间限制</div><div class=\"line\">    void timeLimit();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//定义户外活动接口</div><div class=\"line\">interface OutdoorGame&#123;</div><div class=\"line\"></div><div class=\"line\">    //活动报名费用</div><div class=\"line\">    void enrollSpend();</div><div class=\"line\">    //活动门票</div><div class=\"line\">    void entranceSpend();</div><div class=\"line\">    //活动车费</div><div class=\"line\">    void waySpend();</div><div class=\"line\"></div><div class=\"line\">    //活动时间</div><div class=\"line\">    void  SportTime();</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//计算机游戏具体实现</div><div class=\"line\">class TheWorldOfLegendGame implements ComputerGame&#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void spend() &#123;</div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;传奇世界 需要花费每小时5元人民币&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void timeLimit() &#123;</div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;每天最多在线7小时&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//获取活动具体实现</div><div class=\"line\"></div><div class=\"line\">class ClimbMountainGame implements OutdoorGame&#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void enrollSpend() &#123;</div><div class=\"line\">        System.out.println(&quot;报名费 10元&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void entranceSpend() &#123;</div><div class=\"line\">        System.out.println(&quot;门票 15元&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void waySpend() &#123;</div><div class=\"line\">        System.out.println(&quot;路费 50元&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void SportTime() &#123;</div><div class=\"line\">        System.out.println(&quot;活动时间一天 17小时左右&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//---------- 对象适配器 将 OutdoorGame 适配 SportGame 可以接受任意 ComputerGame 子类   ---------</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//定义 OutdoorGame 适配器</div><div class=\"line\">class OutdoorGameAdapter implements ComputerGame&#123;</div><div class=\"line\"></div><div class=\"line\">    OutdoorGame outdoorGame;</div><div class=\"line\"></div><div class=\"line\">    public OutdoorGameAdapter(OutdoorGame outdoorGame) &#123;</div><div class=\"line\">        this.outdoorGame = outdoorGame;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void spend() &#123;</div><div class=\"line\">        outdoorGame.enrollSpend();</div><div class=\"line\">        outdoorGame.entranceSpend();</div><div class=\"line\">        outdoorGame.waySpend();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void timeLimit() &#123;</div><div class=\"line\">        outdoorGame.SportTime();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//---------- 类适配器 ---------</div><div class=\"line\"></div><div class=\"line\">//我们只想使用配适配这的 消费方法(spend()),时间方法沿用目标接口(timeLimit())</div><div class=\"line\">class OutdoorGameAdapter2 extends ClimbMountainGame implements ComputerGame&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    ComputerGame computerGame;</div><div class=\"line\">    public OutdoorGameAdapter2(ComputerGame computerGame) &#123;</div><div class=\"line\">        this.computerGame = computerGame;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void spend() &#123;</div><div class=\"line\">        super.enrollSpend();</div><div class=\"line\">        super.entranceSpend();</div><div class=\"line\">        super.waySpend();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void timeLimit() &#123;</div><div class=\"line\">        computerGame.timeLimit();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h3 id=\"适配器模式-将一个类的接口-转化成客户期望的另一个接口-适配器让原本不兼容的类可以合作无间\"><a href=\"#适配器模式-将一个类的接口-转化成客户期望的另一个接口-适配器让原本不兼容的类可以合作无间\" class=\"headerlink\" title=\"适配器模式: 将一个类的接口,转化成客户期望的另一个接口,适配器让原本不兼容的类可以合作无间\"></a>适配器模式: 将一个类的接口,转化成客户期望的另一个接口,适配器让原本不兼容的类可以合作无间</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 适配器模式: 将一个类的接口,转化成客户期望的另一个接口,适配器让原本不兼容的类可以合作无间</div><div class=\"line\"> * 适配过程</div><div class=\"line\"> * 1.客户通过目标接口调用适配器的方法对适配器发出请求</div><div class=\"line\"> * 2.适配器使用被适配者接口把请求转化成适配者的一个或多个调用接口</div><div class=\"line\"> * 3.客户接受到调用的结果,但并未察觉这一切是适配器在起转化作用</div><div class=\"line\"> *</div><div class=\"line\"> * 对象适配器:基于组合实现(所有方法必须使用适配者中的方法重新实现,可以接受任务目标接口子类)</div><div class=\"line\"> * 类适配器: 基于继承实现 (方法可自定义实现,不用完全重新目标接口中方法 直接继承被适配者)</div><div class=\"line\"> *</div><div class=\"line\"> *</div><div class=\"line\"> * ***************</div><div class=\"line\"> * 当需要使用一个现有的类而起接口并不符合你的需要时,就使用适配器</div><div class=\"line\"> * 当需要简化并统一一个很大的接口或是一群复杂的接口是,使用外观</div><div class=\"line\"> * 适配器改变接口符合客户的期望</div><div class=\"line\"> * 外观将客户从一个负责的子系统中解耦</div><div class=\"line\"> * 实现一个外观,需要将系统组合进外观中,然后工作委托给子系统执行</div><div class=\"line\"> * 适配器模式两种模式: 对象适配,类适配</div><div class=\"line\"> * 适配器将一个对象包装起来以改变其接口,装饰者将一个对象包装起来以增加新的行为和责任,而外观将一群对象包装起来简化其接口</div><div class=\"line\"> * ***************</div><div class=\"line\"> */</div><div class=\"line\">public class AdapterPattern &#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public static void main(String args[])&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;--------------------对象适配----------------------------------------&quot;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        outdoorGameAdapterTestByObjectDemo();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;--------------------类适配----------------------------------------&quot;);</div><div class=\"line\"></div><div class=\"line\">        outdoorGameAdapterTestByClassDemo();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    //对象适配器演示</div><div class=\"line\">    public static void outdoorGameAdapterTestByObjectDemo()&#123;</div><div class=\"line\">        //计算机游戏</div><div class=\"line\">        ComputerGame computerGame = new TheWorldOfLegendGame();</div><div class=\"line\"></div><div class=\"line\">        computerGame.spend();</div><div class=\"line\">        computerGame.timeLimit();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        //使用对象适配 户外活动游戏</div><div class=\"line\">        OutdoorGame outdoorGame = new ClimbMountainGame();</div><div class=\"line\">        computerGame = new OutdoorGameAdapter(outdoorGame);</div><div class=\"line\">        System.out.println(&quot;===适配后===&quot;);</div><div class=\"line\">        computerGame.spend();</div><div class=\"line\">        computerGame.timeLimit();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //类适配器演示</div><div class=\"line\">    public static void outdoorGameAdapterTestByClassDemo()&#123;</div><div class=\"line\">        //计算机游戏</div><div class=\"line\">        ComputerGame computerGame = new TheWorldOfLegendGame();</div><div class=\"line\"></div><div class=\"line\">        computerGame.spend();</div><div class=\"line\">        computerGame.timeLimit();</div><div class=\"line\"></div><div class=\"line\">        computerGame = new OutdoorGameAdapter2(computerGame);</div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;===适配后===&quot;);</div><div class=\"line\">        computerGame.spend();</div><div class=\"line\">        computerGame.timeLimit();</div><div class=\"line\"></div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//定义个计算机游戏接口</div><div class=\"line\">interface ComputerGame&#123;</div><div class=\"line\"></div><div class=\"line\">    //游戏需要花费</div><div class=\"line\">    void spend();</div><div class=\"line\"></div><div class=\"line\">    //游戏时间限制</div><div class=\"line\">    void timeLimit();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//定义户外活动接口</div><div class=\"line\">interface OutdoorGame&#123;</div><div class=\"line\"></div><div class=\"line\">    //活动报名费用</div><div class=\"line\">    void enrollSpend();</div><div class=\"line\">    //活动门票</div><div class=\"line\">    void entranceSpend();</div><div class=\"line\">    //活动车费</div><div class=\"line\">    void waySpend();</div><div class=\"line\"></div><div class=\"line\">    //活动时间</div><div class=\"line\">    void  SportTime();</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//计算机游戏具体实现</div><div class=\"line\">class TheWorldOfLegendGame implements ComputerGame&#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void spend() &#123;</div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;传奇世界 需要花费每小时5元人民币&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void timeLimit() &#123;</div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;每天最多在线7小时&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//获取活动具体实现</div><div class=\"line\"></div><div class=\"line\">class ClimbMountainGame implements OutdoorGame&#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void enrollSpend() &#123;</div><div class=\"line\">        System.out.println(&quot;报名费 10元&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void entranceSpend() &#123;</div><div class=\"line\">        System.out.println(&quot;门票 15元&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void waySpend() &#123;</div><div class=\"line\">        System.out.println(&quot;路费 50元&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void SportTime() &#123;</div><div class=\"line\">        System.out.println(&quot;活动时间一天 17小时左右&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//---------- 对象适配器 将 OutdoorGame 适配 SportGame 可以接受任意 ComputerGame 子类   ---------</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//定义 OutdoorGame 适配器</div><div class=\"line\">class OutdoorGameAdapter implements ComputerGame&#123;</div><div class=\"line\"></div><div class=\"line\">    OutdoorGame outdoorGame;</div><div class=\"line\"></div><div class=\"line\">    public OutdoorGameAdapter(OutdoorGame outdoorGame) &#123;</div><div class=\"line\">        this.outdoorGame = outdoorGame;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void spend() &#123;</div><div class=\"line\">        outdoorGame.enrollSpend();</div><div class=\"line\">        outdoorGame.entranceSpend();</div><div class=\"line\">        outdoorGame.waySpend();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void timeLimit() &#123;</div><div class=\"line\">        outdoorGame.SportTime();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//---------- 类适配器 ---------</div><div class=\"line\"></div><div class=\"line\">//我们只想使用配适配这的 消费方法(spend()),时间方法沿用目标接口(timeLimit())</div><div class=\"line\">class OutdoorGameAdapter2 extends ClimbMountainGame implements ComputerGame&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    ComputerGame computerGame;</div><div class=\"line\">    public OutdoorGameAdapter2(ComputerGame computerGame) &#123;</div><div class=\"line\">        this.computerGame = computerGame;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void spend() &#123;</div><div class=\"line\">        super.enrollSpend();</div><div class=\"line\">        super.entranceSpend();</div><div class=\"line\">        super.waySpend();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void timeLimit() &#123;</div><div class=\"line\">        computerGame.timeLimit();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"适合多层级调转,各种子模块引用返回保留上一次查询记录","date":"2017-02-10T08:25:34.000Z","layout":"cache","slug":"适合多层级调转-各种子模块引用返回保留上一次查询记录","_content":"用于使用web系统中查询\n\n\n \n[源码下载com.pagecache.zip](http://ol5i7ltje.bkt.clouddn.com/data/git/packagecachecom.pagecache.zip)\n\n基于Spring APO 环绕通知实现\n\n1.添加配置文件\naction-servlet.xml 最后添加\n\n<import resource=\"spring-aop-settings.xml\"/>\nspring-aop-settings.xml  \n\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\nxsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd\">\n<aop:aspectj-autoproxy proxy-target-class=\"true\" />\n</beans>\n```\n\n\n2.修改代码(CacheAspectAdvice.java)\n第28行 指定切入点控制层\n\n```\n   @Pointcut(\"execution(* com.*.web.*.*(..))\")\n    public void CacheAspectAdvice() {\n    }\n    ```\n\n3.加入注解\n在自定控制层入口,加入需要记忆和恢复的注解(@FieldCache)\n\n```\n @RequestMapping(value = \"/list.do\")\n public ModelAndView list(HttpServletRequest request,@FieldCache SearchEntity domain){\n            ModelAndView modelAndView=new ModelAndView();\n            modelAndView.setViewName(\"list\");\n            return  modelAndView;\n  }\n```\n\n查询数据模型中,默认只会处理 String,Integer 两种类型\n如果不需要记录属性上方加入 @FieldTransient\n\n```\n//这是个栗了\npublic class SearchEntity extends BaseInput {\n    @FieldTransient\n    private String searchName;\n    public String get/set...\n}\n```\n\n如果其他引用对象里面也要加入记录和恢复(@FieldCache)\n\n```\n//父类同样回记录,回迭代最终Object\npublic class SearchEntity extends BaseInput {\n    @FieldTransient\n    private String searchName;\n    @FieldCache\n    private Page page;\n    public String getSearchName...\n   public String getPage...\n}\n```\n\n说明 \n1.从菜单进入需要加参数,会执行清空已经记录查询条件(pagCatchClean) 如:http://xxx/xxx.do?pagCatchClean\n\n2.默认情况下 post 的请求记录,get 请求清空,如果post 情况下 也好恢复记录不记录 加参数(pageRecover) 如:http://xxx/xxx.do?pageRecover\n\n3.缓存默认使用的本地,如果需要系统是负载(非hash)模式,需要 实现SearchObjectCache.java接口,存放到共享存储中(redis,mongodb....),\nSearchObjectCacheManager.java 缓存管理类实现好后 修改 其SearchObjectCache引用即可\n\nObjectCache.java 第34行开始\n\n```\n\n   /**\n     * 清空缓存标记\n     * 在浏览器地址加入\n     * http://xxx/xxx.do?pagCatchClean\n     **/\n    public static String pagCatchClean = \"pageCacheClean\";\n    public static String pagRecover = \"pageRecover\";\n    Logger logger = Logger.getLogger(ObjectCache.class.getName());\n public void cacheManager(HttpServletRequest request, Object o) {\n        String sessionId = request.getSession().getId();\n        String uri = request.getRequestURI();\n        if (null == uri || uri.equals(\"\")) {\n            return;\n        }\n        if (uri.indexOf(\"?\") > 0) {\n            uri = uri.substring(0, uri.indexOf(\"?\"));\n        }\n        String cacheKey = uri.concat(sessionId);\n        boolean isClean = request.getParameter(pagCatchClean) == null ? false : true;\n        //空清空缓存\n        if (isClean) {\n            SearainbowCacheManager.del(cacheKey);\n            logger.info(\"清空缓存 key==> \" + cacheKey);\n            return;\n        }\n        //post 查询 存储查询条件\n         if(request.getMethod().toUpperCase().equals(\"POST\") &&  null == request.getParameter(pagRecover)){\n             cache(sessionId, uri, isClean, o);\n         }else {\n             //get 或是其他 还原查询条件\n             recover(sessionId, uri, o);\n         }\n    }\n```\n ","source":"_posts/适合多层级调转-各种子模块引用返回保留上一次查询记录.md","raw":"---\ntitle: '适合多层级调转,各种子模块引用返回保留上一次查询记录'\ndate: 2017-02-10 16:25:34\ntags: java\nlayout: cache\nslug: pagecache\n---\n用于使用web系统中查询\n\n\n \n[源码下载com.pagecache.zip](http://ol5i7ltje.bkt.clouddn.com/data/git/packagecachecom.pagecache.zip)\n\n基于Spring APO 环绕通知实现\n\n1.添加配置文件\naction-servlet.xml 最后添加\n\n<import resource=\"spring-aop-settings.xml\"/>\nspring-aop-settings.xml  \n\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\nxsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd\">\n<aop:aspectj-autoproxy proxy-target-class=\"true\" />\n</beans>\n```\n\n\n2.修改代码(CacheAspectAdvice.java)\n第28行 指定切入点控制层\n\n```\n   @Pointcut(\"execution(* com.*.web.*.*(..))\")\n    public void CacheAspectAdvice() {\n    }\n    ```\n\n3.加入注解\n在自定控制层入口,加入需要记忆和恢复的注解(@FieldCache)\n\n```\n @RequestMapping(value = \"/list.do\")\n public ModelAndView list(HttpServletRequest request,@FieldCache SearchEntity domain){\n            ModelAndView modelAndView=new ModelAndView();\n            modelAndView.setViewName(\"list\");\n            return  modelAndView;\n  }\n```\n\n查询数据模型中,默认只会处理 String,Integer 两种类型\n如果不需要记录属性上方加入 @FieldTransient\n\n```\n//这是个栗了\npublic class SearchEntity extends BaseInput {\n    @FieldTransient\n    private String searchName;\n    public String get/set...\n}\n```\n\n如果其他引用对象里面也要加入记录和恢复(@FieldCache)\n\n```\n//父类同样回记录,回迭代最终Object\npublic class SearchEntity extends BaseInput {\n    @FieldTransient\n    private String searchName;\n    @FieldCache\n    private Page page;\n    public String getSearchName...\n   public String getPage...\n}\n```\n\n说明 \n1.从菜单进入需要加参数,会执行清空已经记录查询条件(pagCatchClean) 如:http://xxx/xxx.do?pagCatchClean\n\n2.默认情况下 post 的请求记录,get 请求清空,如果post 情况下 也好恢复记录不记录 加参数(pageRecover) 如:http://xxx/xxx.do?pageRecover\n\n3.缓存默认使用的本地,如果需要系统是负载(非hash)模式,需要 实现SearchObjectCache.java接口,存放到共享存储中(redis,mongodb....),\nSearchObjectCacheManager.java 缓存管理类实现好后 修改 其SearchObjectCache引用即可\n\nObjectCache.java 第34行开始\n\n```\n\n   /**\n     * 清空缓存标记\n     * 在浏览器地址加入\n     * http://xxx/xxx.do?pagCatchClean\n     **/\n    public static String pagCatchClean = \"pageCacheClean\";\n    public static String pagRecover = \"pageRecover\";\n    Logger logger = Logger.getLogger(ObjectCache.class.getName());\n public void cacheManager(HttpServletRequest request, Object o) {\n        String sessionId = request.getSession().getId();\n        String uri = request.getRequestURI();\n        if (null == uri || uri.equals(\"\")) {\n            return;\n        }\n        if (uri.indexOf(\"?\") > 0) {\n            uri = uri.substring(0, uri.indexOf(\"?\"));\n        }\n        String cacheKey = uri.concat(sessionId);\n        boolean isClean = request.getParameter(pagCatchClean) == null ? false : true;\n        //空清空缓存\n        if (isClean) {\n            SearainbowCacheManager.del(cacheKey);\n            logger.info(\"清空缓存 key==> \" + cacheKey);\n            return;\n        }\n        //post 查询 存储查询条件\n         if(request.getMethod().toUpperCase().equals(\"POST\") &&  null == request.getParameter(pagRecover)){\n             cache(sessionId, uri, isClean, o);\n         }else {\n             //get 或是其他 还原查询条件\n             recover(sessionId, uri, o);\n         }\n    }\n```\n ","published":1,"updated":"2017-03-10T09:29:45.000Z","comments":1,"photos":[],"link":"","_id":"cj0uc8d0z0010ey5rbolut02z","content":"<p>用于使用web系统中查询</p>\n<p><a href=\"http://ol5i7ltje.bkt.clouddn.com/data/git/packagecachecom.pagecache.zip\" target=\"_blank\" rel=\"external\">源码下载com.pagecache.zip</a></p>\n<p>基于Spring APO 环绕通知实现</p>\n<p>1.添加配置文件<br>action-servlet.xml 最后添加</p>\n<p><import resource=\"spring-aop-settings.xml\"><br>spring-aop-settings.xml  </import></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class=\"line\">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class=\"line\">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;</div><div class=\"line\">&lt;aop:aspectj-autoproxy proxy-target-class=&quot;true&quot; /&gt;</div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure>\n<p>2.修改代码(CacheAspectAdvice.java)<br>第28行 指定切入点控制层</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Pointcut(&quot;execution(* com.*.web.*.*(..))&quot;)</div><div class=\"line\"> public void CacheAspectAdvice() &#123;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>3.加入注解<br>在自定控制层入口,加入需要记忆和恢复的注解(@FieldCache)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">@RequestMapping(value = &quot;/list.do&quot;)</div><div class=\"line\">public ModelAndView list(HttpServletRequest request,@FieldCache SearchEntity domain)&#123;</div><div class=\"line\">           ModelAndView modelAndView=new ModelAndView();</div><div class=\"line\">           modelAndView.setViewName(&quot;list&quot;);</div><div class=\"line\">           return  modelAndView;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>查询数据模型中,默认只会处理 String,Integer 两种类型<br>如果不需要记录属性上方加入 @FieldTransient</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//这是个栗了</div><div class=\"line\">public class SearchEntity extends BaseInput &#123;</div><div class=\"line\">    @FieldTransient</div><div class=\"line\">    private String searchName;</div><div class=\"line\">    public String get/set...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果其他引用对象里面也要加入记录和恢复(@FieldCache)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//父类同样回记录,回迭代最终Object</div><div class=\"line\">public class SearchEntity extends BaseInput &#123;</div><div class=\"line\">    @FieldTransient</div><div class=\"line\">    private String searchName;</div><div class=\"line\">    @FieldCache</div><div class=\"line\">    private Page page;</div><div class=\"line\">    public String getSearchName...</div><div class=\"line\">   public String getPage...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>说明<br>1.从菜单进入需要加参数,会执行清空已经记录查询条件(pagCatchClean) 如:<a href=\"http://xxx/xxx.do?pagCatchClean\" target=\"_blank\" rel=\"external\">http://xxx/xxx.do?pagCatchClean</a></p>\n<p>2.默认情况下 post 的请求记录,get 请求清空,如果post 情况下 也好恢复记录不记录 加参数(pageRecover) 如:<a href=\"http://xxx/xxx.do?pageRecover\" target=\"_blank\" rel=\"external\">http://xxx/xxx.do?pageRecover</a></p>\n<p>3.缓存默认使用的本地,如果需要系统是负载(非hash)模式,需要 实现SearchObjectCache.java接口,存放到共享存储中(redis,mongodb….),<br>SearchObjectCacheManager.java 缓存管理类实现好后 修改 其SearchObjectCache引用即可</p>\n<p>ObjectCache.java 第34行开始</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">    * 清空缓存标记</div><div class=\"line\">    * 在浏览器地址加入</div><div class=\"line\">    * http://xxx/xxx.do?pagCatchClean</div><div class=\"line\">    **/</div><div class=\"line\">   public static String pagCatchClean = &quot;pageCacheClean&quot;;</div><div class=\"line\">   public static String pagRecover = &quot;pageRecover&quot;;</div><div class=\"line\">   Logger logger = Logger.getLogger(ObjectCache.class.getName());</div><div class=\"line\">public void cacheManager(HttpServletRequest request, Object o) &#123;</div><div class=\"line\">       String sessionId = request.getSession().getId();</div><div class=\"line\">       String uri = request.getRequestURI();</div><div class=\"line\">       if (null == uri || uri.equals(&quot;&quot;)) &#123;</div><div class=\"line\">           return;</div><div class=\"line\">       &#125;</div><div class=\"line\">       if (uri.indexOf(&quot;?&quot;) &gt; 0) &#123;</div><div class=\"line\">           uri = uri.substring(0, uri.indexOf(&quot;?&quot;));</div><div class=\"line\">       &#125;</div><div class=\"line\">       String cacheKey = uri.concat(sessionId);</div><div class=\"line\">       boolean isClean = request.getParameter(pagCatchClean) == null ? false : true;</div><div class=\"line\">       //空清空缓存</div><div class=\"line\">       if (isClean) &#123;</div><div class=\"line\">           SearainbowCacheManager.del(cacheKey);</div><div class=\"line\">           logger.info(&quot;清空缓存 key==&gt; &quot; + cacheKey);</div><div class=\"line\">           return;</div><div class=\"line\">       &#125;</div><div class=\"line\">       //post 查询 存储查询条件</div><div class=\"line\">        if(request.getMethod().toUpperCase().equals(&quot;POST&quot;) &amp;&amp;  null == request.getParameter(pagRecover))&#123;</div><div class=\"line\">            cache(sessionId, uri, isClean, o);</div><div class=\"line\">        &#125;else &#123;</div><div class=\"line\">            //get 或是其他 还原查询条件</div><div class=\"line\">            recover(sessionId, uri, o);</div><div class=\"line\">        &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>用于使用web系统中查询</p>\n<p><a href=\"http://ol5i7ltje.bkt.clouddn.com/data/git/packagecachecom.pagecache.zip\">源码下载com.pagecache.zip</a></p>\n<p>基于Spring APO 环绕通知实现</p>\n<p>1.添加配置文件<br>action-servlet.xml 最后添加</p>\n<p><import resource=\"spring-aop-settings.xml\"/><br>spring-aop-settings.xml  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class=\"line\">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class=\"line\">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;</div><div class=\"line\">&lt;aop:aspectj-autoproxy proxy-target-class=&quot;true&quot; /&gt;</div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure>\n<p>2.修改代码(CacheAspectAdvice.java)<br>第28行 指定切入点控制层</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Pointcut(&quot;execution(* com.*.web.*.*(..))&quot;)</div><div class=\"line\"> public void CacheAspectAdvice() &#123;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>3.加入注解<br>在自定控制层入口,加入需要记忆和恢复的注解(@FieldCache)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">@RequestMapping(value = &quot;/list.do&quot;)</div><div class=\"line\">public ModelAndView list(HttpServletRequest request,@FieldCache SearchEntity domain)&#123;</div><div class=\"line\">           ModelAndView modelAndView=new ModelAndView();</div><div class=\"line\">           modelAndView.setViewName(&quot;list&quot;);</div><div class=\"line\">           return  modelAndView;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>查询数据模型中,默认只会处理 String,Integer 两种类型<br>如果不需要记录属性上方加入 @FieldTransient</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//这是个栗了</div><div class=\"line\">public class SearchEntity extends BaseInput &#123;</div><div class=\"line\">    @FieldTransient</div><div class=\"line\">    private String searchName;</div><div class=\"line\">    public String get/set...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果其他引用对象里面也要加入记录和恢复(@FieldCache)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//父类同样回记录,回迭代最终Object</div><div class=\"line\">public class SearchEntity extends BaseInput &#123;</div><div class=\"line\">    @FieldTransient</div><div class=\"line\">    private String searchName;</div><div class=\"line\">    @FieldCache</div><div class=\"line\">    private Page page;</div><div class=\"line\">    public String getSearchName...</div><div class=\"line\">   public String getPage...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>说明<br>1.从菜单进入需要加参数,会执行清空已经记录查询条件(pagCatchClean) 如:<a href=\"http://xxx/xxx.do?pagCatchClean\">http://xxx/xxx.do?pagCatchClean</a></p>\n<p>2.默认情况下 post 的请求记录,get 请求清空,如果post 情况下 也好恢复记录不记录 加参数(pageRecover) 如:<a href=\"http://xxx/xxx.do?pageRecover\">http://xxx/xxx.do?pageRecover</a></p>\n<p>3.缓存默认使用的本地,如果需要系统是负载(非hash)模式,需要 实现SearchObjectCache.java接口,存放到共享存储中(redis,mongodb….),<br>SearchObjectCacheManager.java 缓存管理类实现好后 修改 其SearchObjectCache引用即可</p>\n<p>ObjectCache.java 第34行开始</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">    * 清空缓存标记</div><div class=\"line\">    * 在浏览器地址加入</div><div class=\"line\">    * http://xxx/xxx.do?pagCatchClean</div><div class=\"line\">    **/</div><div class=\"line\">   public static String pagCatchClean = &quot;pageCacheClean&quot;;</div><div class=\"line\">   public static String pagRecover = &quot;pageRecover&quot;;</div><div class=\"line\">   Logger logger = Logger.getLogger(ObjectCache.class.getName());</div><div class=\"line\">public void cacheManager(HttpServletRequest request, Object o) &#123;</div><div class=\"line\">       String sessionId = request.getSession().getId();</div><div class=\"line\">       String uri = request.getRequestURI();</div><div class=\"line\">       if (null == uri || uri.equals(&quot;&quot;)) &#123;</div><div class=\"line\">           return;</div><div class=\"line\">       &#125;</div><div class=\"line\">       if (uri.indexOf(&quot;?&quot;) &gt; 0) &#123;</div><div class=\"line\">           uri = uri.substring(0, uri.indexOf(&quot;?&quot;));</div><div class=\"line\">       &#125;</div><div class=\"line\">       String cacheKey = uri.concat(sessionId);</div><div class=\"line\">       boolean isClean = request.getParameter(pagCatchClean) == null ? false : true;</div><div class=\"line\">       //空清空缓存</div><div class=\"line\">       if (isClean) &#123;</div><div class=\"line\">           SearainbowCacheManager.del(cacheKey);</div><div class=\"line\">           logger.info(&quot;清空缓存 key==&gt; &quot; + cacheKey);</div><div class=\"line\">           return;</div><div class=\"line\">       &#125;</div><div class=\"line\">       //post 查询 存储查询条件</div><div class=\"line\">        if(request.getMethod().toUpperCase().equals(&quot;POST&quot;) &amp;&amp;  null == request.getParameter(pagRecover))&#123;</div><div class=\"line\">            cache(sessionId, uri, isClean, o);</div><div class=\"line\">        &#125;else &#123;</div><div class=\"line\">            //get 或是其他 还原查询条件</div><div class=\"line\">            recover(sessionId, uri, o);</div><div class=\"line\">        &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj0uc8d090004ey5rx8nktxla","tag_id":"cj0uc8d050002ey5r18abzeeb","_id":"cj0uc8d0e0007ey5rrbdiqlvr"},{"post_id":"cj0uc8czy0000ey5r5brn9ytr","tag_id":"cj0uc8d050002ey5r18abzeeb","_id":"cj0uc8d0f0009ey5r18vz6489"},{"post_id":"cj0uc8d0b0005ey5rboq72178","tag_id":"cj0uc8d050002ey5r18abzeeb","_id":"cj0uc8d0h000cey5r58i6oq3y"},{"post_id":"cj0uc8d0e0008ey5rm9yenpdf","tag_id":"cj0uc8d050002ey5r18abzeeb","_id":"cj0uc8d0i000eey5ron37aqxy"},{"post_id":"cj0uc8d020001ey5rmaa3fs83","tag_id":"cj0uc8d050002ey5r18abzeeb","_id":"cj0uc8d0j000hey5r8sb6zdu2"},{"post_id":"cj0uc8d070003ey5rvrlkpad2","tag_id":"cj0uc8d0g000bey5r5h3wr8bg","_id":"cj0uc8d0k000jey5raewdiqy3"},{"post_id":"cj0uc8d0j000iey5r598rbia6","tag_id":"cj0uc8d0j000gey5rqex17vt6","_id":"cj0uc8d0n000mey5rg7e61wca"},{"post_id":"cj0uc8d0f000aey5r4l3skwg5","tag_id":"cj0uc8d0j000gey5rqex17vt6","_id":"cj0uc8d0p000oey5rx1lhecwb"},{"post_id":"cj0uc8d0k000key5rcwyl2qdu","tag_id":"cj0uc8d0j000gey5rqex17vt6","_id":"cj0uc8d0q000rey5rox4cgunp"},{"post_id":"cj0uc8d0o000ney5rijbd6fc3","tag_id":"cj0uc8d0j000gey5rqex17vt6","_id":"cj0uc8d0t000tey5r188xpnfj"},{"post_id":"cj0uc8d0h000dey5rwibu3gen","tag_id":"cj0uc8d0j000gey5rqex17vt6","_id":"cj0uc8d0u000vey5rr0smzh5z"},{"post_id":"cj0uc8d0p000pey5rdkmuyjf8","tag_id":"cj0uc8d0j000gey5rqex17vt6","_id":"cj0uc8d0w000xey5r8prbj22h"},{"post_id":"cj0uc8d0r000sey5rnblxh4po","tag_id":"cj0uc8d0j000gey5rqex17vt6","_id":"cj0uc8d0z000zey5r3l6qzq7w"},{"post_id":"cj0uc8d0i000fey5ryt4hwpit","tag_id":"cj0uc8d0j000gey5rqex17vt6","_id":"cj0uc8d100011ey5ratj80m05"},{"post_id":"cj0uc8d0t000uey5riam3cxdl","tag_id":"cj0uc8d0j000gey5rqex17vt6","_id":"cj0uc8d100012ey5r1ph4boqr"},{"post_id":"cj0uc8d0v000wey5rntbm9g3j","tag_id":"cj0uc8d0j000gey5rqex17vt6","_id":"cj0uc8d100013ey5r7yjrutji"},{"post_id":"cj0uc8d0x000yey5rtmlqwcj0","tag_id":"cj0uc8d0j000gey5rqex17vt6","_id":"cj0uc8d120014ey5r928ue798"},{"post_id":"cj0uc8d0z0010ey5rbolut02z","tag_id":"cj0uc8d050002ey5r18abzeeb","_id":"cj0uc8d130015ey5rjozzyvql"}],"Tag":[{"name":"java","_id":"cj0uc8d050002ey5r18abzeeb"},{"name":"linux","_id":"cj0uc8d0g000bey5r5h3wr8bg"},{"name":"设计模式","_id":"cj0uc8d0j000gey5rqex17vt6"}]}}