{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/clean-blog/source/css/article.styl","path":"css/article.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/base.styl","path":"css/base.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/mixins.styl","path":"css/mixins.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/variables.styl","path":"css/variables.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/img/about-bg.jpg","path":"img/about-bg.jpg","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/img/home-bg.jpg","path":"img/home-bg.jpg","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"ac5df94c2bc25cb38dc63fadb71c8eab26770b45","modified":1489052866000},{"_id":"themes/clean-blog/.DS_Store","hash":"370cbdbfbfe3df40234642b1d0b91c559c08bd03","modified":1486966410000},{"_id":"themes/clean-blog/README.md","hash":"c5c7b0fd01aa229304e7b00697517aaca51de577","modified":1486721475000},{"_id":"themes/clean-blog/LICENSE","hash":"8726b416df4f067cff579e859f05c4b594b8be09","modified":1486713054000},{"_id":"themes/clean-blog/_config.yml","hash":"c5724a28b3298af65d8dc3f1c92c003d8e3107e4","modified":1486952919000},{"_id":"source/_posts/JMeter-测试工具-入门.md","hash":"bc100c25ff61f4aa71158ec0aa23ff6ad6e0372f","modified":1486966576000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1488781422000},{"_id":"source/_posts/crontab-定时任务.md","hash":"32561e42d40e49ccce2376cbbfb0b86c542bf276","modified":1486968533000},{"_id":"source/_posts/spring-boot-完成版本－不解释.md","hash":"bcc7a205041bc8062ebb5b3878344dad93248815","modified":1489054994000},{"_id":"source/_posts/spring-boot-搭建-不解释.md","hash":"6910108eb8ca809b7a38b28f007f40a86d407faa","modified":1489053046000},{"_id":"source/_posts/适合多层级调转-各种子模块引用返回保留上一次查询记录.md","hash":"ff1b8619395bae1df8abd4ea47a6aa906a57c2ff","modified":1486965944000},{"_id":"themes/clean-blog/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1486713054000},{"_id":"themes/clean-blog/.git/config","hash":"0037ed70f19e4933b19020ad514d8e9e049174f1","modified":1486713054000},{"_id":"themes/clean-blog/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1486713045000},{"_id":"themes/clean-blog/.git/index","hash":"8f6c1dde19e1683fc8ffdf92ae561f6762f39176","modified":1486952621000},{"_id":"themes/clean-blog/.git/packed-refs","hash":"1dadbd4fdd53bbb7038fa2c7b3c71cd028c4ead4","modified":1486713054000},{"_id":"themes/clean-blog/languages/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1486713054000},{"_id":"themes/clean-blog/languages/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1486713054000},{"_id":"themes/clean-blog/languages/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1486713054000},{"_id":"themes/clean-blog/languages/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1486713054000},{"_id":"themes/clean-blog/languages/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1486713054000},{"_id":"themes/clean-blog/languages/fr.yml","hash":"e9e6f7cb362ebb7997f11027498a2748fe3bac95","modified":1486713054000},{"_id":"themes/clean-blog/languages/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1486713054000},{"_id":"themes/clean-blog/languages/pt.yml","hash":"1d0c3689eb32fe13f37f8f6f303af7624ebfbaf0","modified":1486713054000},{"_id":"themes/clean-blog/languages/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1486713054000},{"_id":"themes/clean-blog/languages/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1486713054000},{"_id":"themes/clean-blog/languages/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1486713054000},{"_id":"themes/clean-blog/layout/index.ejs","hash":"87995288ca6f95a04add641727aedd3f6afa55eb","modified":1486713054000},{"_id":"themes/clean-blog/layout/archive.ejs","hash":"ad0da72df13ce3566985bb390c2c9a9352cf4f07","modified":1486720858000},{"_id":"themes/clean-blog/layout/layout.ejs","hash":"da2f9018047924ddaf376aee5996c7ddc06cebc1","modified":1486713054000},{"_id":"themes/clean-blog/layout/page.ejs","hash":"38382e9bbeb6b8d2eafbd53fff2984111f524c1a","modified":1486713054000},{"_id":"themes/clean-blog/layout/post.ejs","hash":"38382e9bbeb6b8d2eafbd53fff2984111f524c1a","modified":1486713054000},{"_id":"themes/clean-blog/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1486713045000},{"_id":"themes/clean-blog/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1486713045000},{"_id":"themes/clean-blog/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1486713045000},{"_id":"themes/clean-blog/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1486713045000},{"_id":"themes/clean-blog/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1486713045000},{"_id":"themes/clean-blog/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1486713045000},{"_id":"themes/clean-blog/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1486713045000},{"_id":"themes/clean-blog/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1486713045000},{"_id":"themes/clean-blog/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1486713045000},{"_id":"themes/clean-blog/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1486713045000},{"_id":"themes/clean-blog/.git/logs/HEAD","hash":"1c514eb906ae36c0bcf335566a106e9776434d7a","modified":1486713054000},{"_id":"themes/clean-blog/layout/_partial/after-footer.ejs","hash":"80970a6cfbf9b1abe0c472636b321a9be08fdc43","modified":1486720822000},{"_id":"themes/clean-blog/layout/_partial/article-archive.ejs","hash":"3d8d98c6545b8332a6d6ed4f8b00327df03ea945","modified":1486713054000},{"_id":"themes/clean-blog/layout/_partial/article-categories.ejs","hash":"5a0bf5a20f670621d8013c9b9d7976b45c8aa80f","modified":1486713054000},{"_id":"themes/clean-blog/layout/_partial/article-index.ejs","hash":"e433df4e245e2d4c628052c6e59966563542d94d","modified":1486713054000},{"_id":"themes/clean-blog/layout/_partial/article-full.ejs","hash":"8d63ce240bbcc850b5d438d1f45ad9441ac1c9cc","modified":1486713054000},{"_id":"themes/clean-blog/layout/_partial/article-tags.ejs","hash":"6136434be09056c1466149cecb3cc2e80d107999","modified":1486713054000},{"_id":"themes/clean-blog/layout/_partial/footer.ejs","hash":"d252fb1a41890e6481bb054f9cc4ceec3c0b0ed9","modified":1486713054000},{"_id":"themes/clean-blog/layout/_partial/comments.ejs","hash":"c60fae074b578dae26a612bd9eb9021f887c2851","modified":1486965712000},{"_id":"themes/clean-blog/layout/_partial/gallery.ejs","hash":"21e4f28909f4a79ff7d9f10bdfef6a8cb11632bf","modified":1486713054000},{"_id":"themes/clean-blog/layout/_partial/google-analytics.ejs","hash":"4e6e8de9becea5a1636a4dcadcf7a10c06e2426e","modified":1486713054000},{"_id":"themes/clean-blog/layout/_partial/menu.ejs","hash":"ba299316400499e9ede154e9627cafb7ce411888","modified":1486713054000},{"_id":"themes/clean-blog/layout/_partial/head.ejs","hash":"3a7eb32f2cc540746c9e11010a4513b832743d1e","modified":1486713054000},{"_id":"themes/clean-blog/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1486713054000},{"_id":"themes/clean-blog/source/css/article.styl","hash":"f5294d7a3d6127fcb287de3ff0c12aebb1766c7b","modified":1486713054000},{"_id":"themes/clean-blog/source/css/style.styl","hash":"c40dc495a41007d21c59f342ee42b2d31d7b5ff4","modified":1486713054000},{"_id":"themes/clean-blog/source/css/base.styl","hash":"f0a6fcf58fe515e1359acde0ed34081f580ec7a3","modified":1486713054000},{"_id":"themes/clean-blog/source/css/mixins.styl","hash":"892f55e8a71f2e23a52e48e217dad3303bbad913","modified":1486713054000},{"_id":"themes/clean-blog/source/css/variables.styl","hash":"cd82df5ca8dfbcfec12d833f01adfac00878e835","modified":1486713054000},{"_id":"themes/clean-blog/source/img/about-bg.jpg","hash":"d39126a6456f2bac0169d1779304725f179c9900","modified":1486713054000},{"_id":"themes/clean-blog/.git/objects/pack/pack-150961354dcaf41617990f9a9d18fb969ec0b9fb.idx","hash":"32e5daf443ca079417d364b3ef3a4144baae432b","modified":1486713054000},{"_id":"themes/clean-blog/.git/refs/heads/master","hash":"cce37529c01e70f25e6266bf6fb91c4c88b2f9fb","modified":1486713054000},{"_id":"themes/clean-blog/source/img/home-bg.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1486713054000},{"_id":"themes/clean-blog/.git/logs/refs/heads/master","hash":"1c514eb906ae36c0bcf335566a106e9776434d7a","modified":1486713054000},{"_id":"themes/clean-blog/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1486713054000},{"_id":"themes/clean-blog/source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1486713054000},{"_id":"themes/clean-blog/.git/logs/refs/remotes/origin/HEAD","hash":"1c514eb906ae36c0bcf335566a106e9776434d7a","modified":1486713054000},{"_id":"themes/clean-blog/.git/objects/pack/pack-150961354dcaf41617990f9a9d18fb969ec0b9fb.pack","hash":"4cc90aed47a7c34d707952de5396981e230bfff1","modified":1486713054000}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"JMeter 测试工具 入门","date":"2017-02-13T03:00:17.000Z","layout":"jmeter","slug":"JMeter-测试工具-入门","_content":"### 说明(入门使用)：\n* jdk版本 1.7 \n* 下载 [apache-jmeter](http://jmeter.apache.org/download_jmeter.cgi) 版本随意 实例中使用的2.13\n* Test Plan 执行计划  执行使用  测试使用 如：回放测试\n* WorkBench 工作区域，准备使用，如：录制\n* --启动 ./bin/jmeter.sh \n\n\n###下面开始自动话测试，录制 ＋ 回放\n\n#####创建线程组和控制器\n \n ![1](http://ol5i7ltje.bkt.clouddn.com/69124311-7331-472F-B9CB-19D667B74D7E.png)\n ![2](http://ol5i7ltje.bkt.clouddn.com/76DDFAC0-EDB8-4378-A370-B0EAEBCABAEC.png)\n ![3](http://ol5i7ltje.bkt.clouddn.com/A850D422-5CF4-40FD-8657-964B3A3DA5C0.png)\n ![4](http://ol5i7ltje.bkt.clouddn.com/EB68A8DB-D06C-4B7C-806E-B0DDF988C9A2.png)\n ![5](http://ol5i7ltje.bkt.clouddn.com/D1658BF8-BF4D-432F-B681-3403C4D0A1C1.png)\n ![6](http://ol5i7ltje.bkt.clouddn.com/05067694-C406-4261-B40F-081A9CF60879.png)\n  \n#####选择目标控制器\n ![7](http://ol5i7ltje.bkt.clouddn.com/E9F57B0D-DD8F-4DA9-8DD9-51C96A325669.png)\n \n#####创建两个监听查询\n ![8](http://ol5i7ltje.bkt.clouddn.com/041812CA-5FD8-486F-B77E-44B65E0B69FC.png)\n ![9](http://ol5i7ltje.bkt.clouddn.com/43CEA00E-37B1-4DE0-A382-1E791A624BB4.png)\n ![10](http://ol5i7ltje.bkt.clouddn.com/9FC2876B-4DCF-4219-ACD7-31FDE6473981.png)\n \n#####开始录制\n ![10](http://ol5i7ltje.bkt.clouddn.com/B70872B0-209B-4F0A-BE8B-F8647B04DCF8.png)\n \n#####已经开始录制了\n ![11](http://ol5i7ltje.bkt.clouddn.com/5B221055-B544-468D-BD04-E434EC658201.png)\n \n#####准备回放，停止录制\n ![11](http://ol5i7ltje.bkt.clouddn.com/77BA9F59-AD43-480B-AACC-AC60E18D7EC6.png) \n \n#####开始回放\n  ![11](http://ol5i7ltje.bkt.clouddn.com/D219EB49-D5DB-4C1C-B6C5-827A36B0A6DB.png) \n ","source":"_posts/JMeter-测试工具-入门.md","raw":"---\ntitle: JMeter 测试工具 入门\ndate: 2017-02-13 11:00:17\ntags: java\nlayout: jmeter\nslug: apache-jmeter\n---\n### 说明(入门使用)：\n* jdk版本 1.7 \n* 下载 [apache-jmeter](http://jmeter.apache.org/download_jmeter.cgi) 版本随意 实例中使用的2.13\n* Test Plan 执行计划  执行使用  测试使用 如：回放测试\n* WorkBench 工作区域，准备使用，如：录制\n* --启动 ./bin/jmeter.sh \n\n\n###下面开始自动话测试，录制 ＋ 回放\n\n#####创建线程组和控制器\n \n ![1](http://ol5i7ltje.bkt.clouddn.com/69124311-7331-472F-B9CB-19D667B74D7E.png)\n ![2](http://ol5i7ltje.bkt.clouddn.com/76DDFAC0-EDB8-4378-A370-B0EAEBCABAEC.png)\n ![3](http://ol5i7ltje.bkt.clouddn.com/A850D422-5CF4-40FD-8657-964B3A3DA5C0.png)\n ![4](http://ol5i7ltje.bkt.clouddn.com/EB68A8DB-D06C-4B7C-806E-B0DDF988C9A2.png)\n ![5](http://ol5i7ltje.bkt.clouddn.com/D1658BF8-BF4D-432F-B681-3403C4D0A1C1.png)\n ![6](http://ol5i7ltje.bkt.clouddn.com/05067694-C406-4261-B40F-081A9CF60879.png)\n  \n#####选择目标控制器\n ![7](http://ol5i7ltje.bkt.clouddn.com/E9F57B0D-DD8F-4DA9-8DD9-51C96A325669.png)\n \n#####创建两个监听查询\n ![8](http://ol5i7ltje.bkt.clouddn.com/041812CA-5FD8-486F-B77E-44B65E0B69FC.png)\n ![9](http://ol5i7ltje.bkt.clouddn.com/43CEA00E-37B1-4DE0-A382-1E791A624BB4.png)\n ![10](http://ol5i7ltje.bkt.clouddn.com/9FC2876B-4DCF-4219-ACD7-31FDE6473981.png)\n \n#####开始录制\n ![10](http://ol5i7ltje.bkt.clouddn.com/B70872B0-209B-4F0A-BE8B-F8647B04DCF8.png)\n \n#####已经开始录制了\n ![11](http://ol5i7ltje.bkt.clouddn.com/5B221055-B544-468D-BD04-E434EC658201.png)\n \n#####准备回放，停止录制\n ![11](http://ol5i7ltje.bkt.clouddn.com/77BA9F59-AD43-480B-AACC-AC60E18D7EC6.png) \n \n#####开始回放\n  ![11](http://ol5i7ltje.bkt.clouddn.com/D219EB49-D5DB-4C1C-B6C5-827A36B0A6DB.png) \n ","published":1,"updated":"2017-02-13T06:16:16.000Z","comments":1,"photos":[],"link":"","_id":"cj028widn0000325ry5v8ty26","content":"<h3 id=\"说明-入门使用-：\"><a href=\"#说明-入门使用-：\" class=\"headerlink\" title=\"说明(入门使用)：\"></a>说明(入门使用)：</h3><ul>\n<li>jdk版本 1.7 </li>\n<li>下载 <a href=\"http://jmeter.apache.org/download_jmeter.cgi\" target=\"_blank\" rel=\"external\">apache-jmeter</a> 版本随意 实例中使用的2.13</li>\n<li>Test Plan 执行计划  执行使用  测试使用 如：回放测试</li>\n<li>WorkBench 工作区域，准备使用，如：录制</li>\n<li>–启动 ./bin/jmeter.sh </li>\n</ul>\n<p>###下面开始自动话测试，录制 ＋ 回放</p>\n<p>#####创建线程组和控制器</p>\n<p> <img src=\"http://ol5i7ltje.bkt.clouddn.com/69124311-7331-472F-B9CB-19D667B74D7E.png\" alt=\"1\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/76DDFAC0-EDB8-4378-A370-B0EAEBCABAEC.png\" alt=\"2\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/A850D422-5CF4-40FD-8657-964B3A3DA5C0.png\" alt=\"3\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/EB68A8DB-D06C-4B7C-806E-B0DDF988C9A2.png\" alt=\"4\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/D1658BF8-BF4D-432F-B681-3403C4D0A1C1.png\" alt=\"5\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/05067694-C406-4261-B40F-081A9CF60879.png\" alt=\"6\"></p>\n<p>#####选择目标控制器<br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/E9F57B0D-DD8F-4DA9-8DD9-51C96A325669.png\" alt=\"7\"></p>\n<p>#####创建两个监听查询<br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/041812CA-5FD8-486F-B77E-44B65E0B69FC.png\" alt=\"8\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/43CEA00E-37B1-4DE0-A382-1E791A624BB4.png\" alt=\"9\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/9FC2876B-4DCF-4219-ACD7-31FDE6473981.png\" alt=\"10\"></p>\n<p>#####开始录制<br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/B70872B0-209B-4F0A-BE8B-F8647B04DCF8.png\" alt=\"10\"></p>\n<p>#####已经开始录制了<br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/5B221055-B544-468D-BD04-E434EC658201.png\" alt=\"11\"></p>\n<p>#####准备回放，停止录制<br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/77BA9F59-AD43-480B-AACC-AC60E18D7EC6.png\" alt=\"11\"> </p>\n<p>#####开始回放<br>  <img src=\"http://ol5i7ltje.bkt.clouddn.com/D219EB49-D5DB-4C1C-B6C5-827A36B0A6DB.png\" alt=\"11\"> </p>\n","excerpt":"","more":"<h3 id=\"说明-入门使用-：\"><a href=\"#说明-入门使用-：\" class=\"headerlink\" title=\"说明(入门使用)：\"></a>说明(入门使用)：</h3><ul>\n<li>jdk版本 1.7 </li>\n<li>下载 <a href=\"http://jmeter.apache.org/download_jmeter.cgi\">apache-jmeter</a> 版本随意 实例中使用的2.13</li>\n<li>Test Plan 执行计划  执行使用  测试使用 如：回放测试</li>\n<li>WorkBench 工作区域，准备使用，如：录制</li>\n<li>–启动 ./bin/jmeter.sh </li>\n</ul>\n<p>###下面开始自动话测试，录制 ＋ 回放</p>\n<p>#####创建线程组和控制器</p>\n<p> <img src=\"http://ol5i7ltje.bkt.clouddn.com/69124311-7331-472F-B9CB-19D667B74D7E.png\" alt=\"1\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/76DDFAC0-EDB8-4378-A370-B0EAEBCABAEC.png\" alt=\"2\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/A850D422-5CF4-40FD-8657-964B3A3DA5C0.png\" alt=\"3\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/EB68A8DB-D06C-4B7C-806E-B0DDF988C9A2.png\" alt=\"4\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/D1658BF8-BF4D-432F-B681-3403C4D0A1C1.png\" alt=\"5\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/05067694-C406-4261-B40F-081A9CF60879.png\" alt=\"6\"></p>\n<p>#####选择目标控制器<br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/E9F57B0D-DD8F-4DA9-8DD9-51C96A325669.png\" alt=\"7\"></p>\n<p>#####创建两个监听查询<br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/041812CA-5FD8-486F-B77E-44B65E0B69FC.png\" alt=\"8\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/43CEA00E-37B1-4DE0-A382-1E791A624BB4.png\" alt=\"9\"><br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/9FC2876B-4DCF-4219-ACD7-31FDE6473981.png\" alt=\"10\"></p>\n<p>#####开始录制<br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/B70872B0-209B-4F0A-BE8B-F8647B04DCF8.png\" alt=\"10\"></p>\n<p>#####已经开始录制了<br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/5B221055-B544-468D-BD04-E434EC658201.png\" alt=\"11\"></p>\n<p>#####准备回放，停止录制<br> <img src=\"http://ol5i7ltje.bkt.clouddn.com/77BA9F59-AD43-480B-AACC-AC60E18D7EC6.png\" alt=\"11\"> </p>\n<p>#####开始回放<br>  <img src=\"http://ol5i7ltje.bkt.clouddn.com/D219EB49-D5DB-4C1C-B6C5-827A36B0A6DB.png\" alt=\"11\"> </p>\n"},{"title":"spring-boot 完成版本－不解释","date":"2017-03-09T09:47:31.000Z","layout":"clean-blog","slug":"spring-boot-完成版本－不解释","_content":"## 本文为Spring-boot 完整版本，可用于基础开发\n  \n  \n  \n###### 上一文中我们介绍了如何搭建sprign-boot 服务，下面我们一起来搞出完整版本（以下是包含使用到的技术）\n   \n   \n  1. Swagger2 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。总体目标是使客户端和文件系统作为服务器以同样的速度来更新。文件的方法，参数和模型紧密集成到服务器端的代码，允许API来始终保持同步。 \n  2. Spring jap 已经实现了很多数据库操作相关功能，但是拼写SQL是个硬伤，当前项目中实现了一种方式，将 resources/dbsql下的 XXX.xml 映射到全局map中，下面会有详细介绍\n \n   \n---\n####  项目源码:[github源码地址](https://github.com/zccccccc/cici) \n---\n\n  \n\n\n  \n  ---\n#### Swagger2介绍 开始\n   \n   \n ***pom.xml 添加***\n \n ```\n \n     <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger2</artifactId>\n            <version>2.2.2</version>\n        </dependency>\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger-ui</artifactId>\n            <version>2.2.2</version>\n        </dependency>\n \n ```\n   \n***在MainApplication平级创建 Swagger2.java***\n\n```\n\n@Configuration\n@EnableSwagger2\npublic class Swagger2 {\n\n    @Bean\n    public Docket createRestApi() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.springboot.demo\"))\n                .paths(PathSelectors.any())\n                .build();\n    }\n\n\n    private ApiInfo apiInfo() {\n\n\n                return new ApiInfoBuilder()\n                .title(\"Spring Boot 中使用Swagger2构建RESTful APIs\").version(\"2.0\").build();\n\n    }\n\n}\n\n\n```\n\n*** API接口方法中加入下面注解，就可以了使用了，访问地址 http://localhost:7777 /swagger-ui.html 就可以访问了***  \n \n ```\n    @ApiOperation(value = \"获取用户列表\", notes = \"需要传入json参数\")\n    @ApiImplicitParams({\n            @ApiImplicitParam(name = \"sysUserDomain\", value = \"系统用户实体\", required = true, dataType = \"SysUserDomain\")\n    })\n    @ApiResponses(value = {\n            @ApiResponse(code = 200, message = \"Success\", response = BaseOutput.class),\n            @ApiResponse(code = 401, message = \"Unauthorized\"),\n            @ApiResponse(code = 403, message = \"Forbidden\"),\n            @ApiResponse(code = 404, message = \"Not Found\"),\n            @ApiResponse(code = 500, message = \"Failure\")})\n    @PostMapping(value = \"list\")\n    public BaseOutput<SysUser> list(HttpServletRequest request, HttpServletResponse response, @RequestBody SysUserDomain sysUserDomain) {\n        BaseOutput<SysUser> baseOutput = null;\n        try {\n\n            baseOutput = sysUserService.findList(sysUserDomain);\n\n        } catch (Exception ex) {\n\n            baseOutput = baseOutput == null ? (baseOutput = new BaseOutput<SysUser>()) : baseOutput;\n            baseOutput.setReturnCode(new ReturnCode(ReturnCodeDict.ERROR.k, ReturnCodeDict.ERROR.m, ex.getMessage()));\n\n\n        } finally {\n            return baseOutput;\n        }\n\n    }\n \n ```\n  \n---  \n####  将sql放到xml中，系统启动时候加载到各个模块中\n*** 在resources 下创建dbsql文件夹 里面包含各种sql的xml: namespace(具体使用实现类，获取sql时使用),version(版本控制后期会加入自动热部署) ***\n\n```\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<db-sql>\n<mapper namespace=\"com.springboot.demo.usercenter.usermanager.serve.SysUserServiceImpl\" version=\"1.0\" >\n\n    <sql id=\"findListNativeSql\">\n        SELECT\n        distinct\n        XX.module_id,\n        XX.action_code,\n        XX.action_name,\n        ZZ.name module_name,\n        ZZ.url,\n        ZZ.order_id,\n        ZZ.module_desc,\n        ZZ.code module_code,\n        ZZ.parent_id\n        FROM SYS_PRIVILEGE XX,\n        SYS_MODULE ZZ\n        WHERE XX.module_id =ZZ.id\n        AND ZZ.enable_state='10'\n        and exists\n        ( SELECT 1\n        FROM SYS_USER_AUTH AA,SYS_ROLE BB\n        WHERE AA.user_id =  ?1\n        AND AA.role_id = BB.id\n        AND BB.enable_state='10'\n        and AA.role_id = XX.role_id\n        AND EXISTS\n        ( SELECT 1\n        FROM sys_system SS\n        WHERE SS.id = BB.sys_id\n        AND SS.code =  ?2 )\n        AND AA.role_id=BB.id)\n    </sql>\n\n</mapper>\n</db-sql>\n\n```\n  \n  \n***读取XML并映射到HashMap中 创建LoadingSqlXml.java***\n\n \n*** 完整版本 ***\n\n```\npublic enum LoadingSqlXml {\n\n    INSTANCE;\n\n    //获取dbsql绝对路径\n    private final static String dbSqlPath = ClassUtils.getDefaultClassLoader().getResource(\"dbsql\").getPath();\n    //定义私有SQLMap  XML中的namespace,version 该文件下的sql集合\n    private static final Map<String, HashMap<Double, HashMap<String, String>>> myHashMaps = new HashMap<String, HashMap<Double, HashMap<String, String>>>();\n\n    //定义私有SQLMap集合\n    private static HashMap sqlMap = null;\n\n    //定义版本集合\n    private static final HashMap<Double, HashMap<String, String>> versionMap = new HashMap();\n\n\n    //根据名称找到当前实现类下需要使用的SQL集合\n    //如:   private HashMap<String, String> dbSqlMap = LoadingSqlXml.INSTANCE.findSqlMap(this.getClass().getName());\n    //  dbSqlMap.get(\"sqlId\");\n    public HashMap<String, String> findSqlMap(String c) {\n\n        if (myHashMaps.isEmpty()) {\n            try {\n                init();\n            } catch (Exception ex) {\n                ex.printStackTrace();\n            }\n        }\n\n        HashMap<String, String> _h = null;\n        for (Map.Entry<Double, HashMap<String, String>> entry0 : myHashMaps.get(c).entrySet()) {\n            _h = entry0.getValue();\n        }\n        return _h;\n    }\n\n    //初始化执行\n    public void init() throws InitDataSqlReaderException, DocumentException {\n        if (!myHashMaps.isEmpty()) {\n            return;\n        }\n        File file = new File(dbSqlPath);\n        File[] files = file.listFiles();\n        for (File f : files) {\n            ReadDbSqlXml(f);\n        }\n    }\n\n    //读取文件XML并解析到 数据集合中\n    private void ReadDbSqlXml(File f) throws InitDataSqlReaderException, DocumentException {\n\n        SAXReader reader = new SAXReader();\n        Document doc = reader.read(f);\n        Element root = doc.getRootElement();\n        Element fo;\n        Element value;\n        String fileName = f.getName();\n\n        //迭代器查看有几个\n        for (Iterator i = root.elementIterator(\"mapper\"); i.hasNext(); ) {\n\n            fo = (Element) i.next();\n\n            List<String> attributes = fo.attributes();\n            if (attributes.size() == 0) {\n                throw new InitDataSqlReaderException(fileName.concat(\" 在mapper节点找不到属性,请定义 [namespace,version] \"));\n            }\n\n            String namespace = fo.attribute(\"namespace\").getValue();\n            String version = fo.attribute(\"version\").getValue();\n\n            if (StringUtils.isEmpty(namespace)) {\n                throw new InitDataSqlReaderException(fileName.concat(\" 在mapper节点找不到属性,请定义 namespace \"));\n            }\n            if (StringUtils.isEmpty(version)) {\n                throw new InitDataSqlReaderException(fileName.concat(\" 在mapper节点找不到属性,请定义 version \"));\n            }\n\n            if (myHashMaps.get(namespace) != null) {\n                throw new InitDataSqlReaderException(fileName.concat(\" 在mapper节点 中的 namespace 定义重复 ==>\" + namespace));\n            }\n\n            for (Iterator k = fo.elementIterator(\"sql\"); k.hasNext(); ) {\n                sqlMap = new HashMap();\n                value = (Element) k.next();\n                String id = value.attribute(\"id\").getValue();\n\n                if (id.equals(\"\")) {\n                    throw new InitDataSqlReaderException(fileName.concat(\"在mapper下sql未定义id\"));\n                }\n\n                String sql = String.valueOf(value.getData());\n                if (sqlMap.get(id) == null) {\n                    sqlMap.put(id, sql);\n                } else {\n                    throw new InitDataSqlReaderException(fileName.concat(\"sql 节点 ID 定义重复 当前ID=\" + id));\n                }\n\n            }\n            versionMap.put(Double.parseDouble(version), sqlMap);\n            myHashMaps.put(namespace, versionMap);\n        }\n    }\n    }\n    \n ```\n \n \n \t *具体实现代码就不在这里展示了直接看源码吧，比较简单，目录结构 下载到源码后从com.springboot.demo.usercenter.usermanager.web.SysUserController 开始向上阅读*\n \t   \n \t   \n     \n  *目前只是简单实现，后续会介绍完整版本 基于spring cloud 微服务架构整合*\n    \n    \n---\n####  项目源码:[github源码地址](https://github.com/zccccccc/cici) \n---\n\n    \n    \n \n   \n\n\n\n\n\n\n\n  \n  ","source":"_posts/spring-boot-完成版本－不解释.md","raw":"---\ntitle: spring-boot 完成版本－不解释\ndate: 2017-03-09 17:47:31\ntags: java\nlayout: clean-blog\nslug: spring-boot-first2\n\n---\n## 本文为Spring-boot 完整版本，可用于基础开发\n  \n  \n  \n###### 上一文中我们介绍了如何搭建sprign-boot 服务，下面我们一起来搞出完整版本（以下是包含使用到的技术）\n   \n   \n  1. Swagger2 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。总体目标是使客户端和文件系统作为服务器以同样的速度来更新。文件的方法，参数和模型紧密集成到服务器端的代码，允许API来始终保持同步。 \n  2. Spring jap 已经实现了很多数据库操作相关功能，但是拼写SQL是个硬伤，当前项目中实现了一种方式，将 resources/dbsql下的 XXX.xml 映射到全局map中，下面会有详细介绍\n \n   \n---\n####  项目源码:[github源码地址](https://github.com/zccccccc/cici) \n---\n\n  \n\n\n  \n  ---\n#### Swagger2介绍 开始\n   \n   \n ***pom.xml 添加***\n \n ```\n \n     <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger2</artifactId>\n            <version>2.2.2</version>\n        </dependency>\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger-ui</artifactId>\n            <version>2.2.2</version>\n        </dependency>\n \n ```\n   \n***在MainApplication平级创建 Swagger2.java***\n\n```\n\n@Configuration\n@EnableSwagger2\npublic class Swagger2 {\n\n    @Bean\n    public Docket createRestApi() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.springboot.demo\"))\n                .paths(PathSelectors.any())\n                .build();\n    }\n\n\n    private ApiInfo apiInfo() {\n\n\n                return new ApiInfoBuilder()\n                .title(\"Spring Boot 中使用Swagger2构建RESTful APIs\").version(\"2.0\").build();\n\n    }\n\n}\n\n\n```\n\n*** API接口方法中加入下面注解，就可以了使用了，访问地址 http://localhost:7777 /swagger-ui.html 就可以访问了***  \n \n ```\n    @ApiOperation(value = \"获取用户列表\", notes = \"需要传入json参数\")\n    @ApiImplicitParams({\n            @ApiImplicitParam(name = \"sysUserDomain\", value = \"系统用户实体\", required = true, dataType = \"SysUserDomain\")\n    })\n    @ApiResponses(value = {\n            @ApiResponse(code = 200, message = \"Success\", response = BaseOutput.class),\n            @ApiResponse(code = 401, message = \"Unauthorized\"),\n            @ApiResponse(code = 403, message = \"Forbidden\"),\n            @ApiResponse(code = 404, message = \"Not Found\"),\n            @ApiResponse(code = 500, message = \"Failure\")})\n    @PostMapping(value = \"list\")\n    public BaseOutput<SysUser> list(HttpServletRequest request, HttpServletResponse response, @RequestBody SysUserDomain sysUserDomain) {\n        BaseOutput<SysUser> baseOutput = null;\n        try {\n\n            baseOutput = sysUserService.findList(sysUserDomain);\n\n        } catch (Exception ex) {\n\n            baseOutput = baseOutput == null ? (baseOutput = new BaseOutput<SysUser>()) : baseOutput;\n            baseOutput.setReturnCode(new ReturnCode(ReturnCodeDict.ERROR.k, ReturnCodeDict.ERROR.m, ex.getMessage()));\n\n\n        } finally {\n            return baseOutput;\n        }\n\n    }\n \n ```\n  \n---  \n####  将sql放到xml中，系统启动时候加载到各个模块中\n*** 在resources 下创建dbsql文件夹 里面包含各种sql的xml: namespace(具体使用实现类，获取sql时使用),version(版本控制后期会加入自动热部署) ***\n\n```\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<db-sql>\n<mapper namespace=\"com.springboot.demo.usercenter.usermanager.serve.SysUserServiceImpl\" version=\"1.0\" >\n\n    <sql id=\"findListNativeSql\">\n        SELECT\n        distinct\n        XX.module_id,\n        XX.action_code,\n        XX.action_name,\n        ZZ.name module_name,\n        ZZ.url,\n        ZZ.order_id,\n        ZZ.module_desc,\n        ZZ.code module_code,\n        ZZ.parent_id\n        FROM SYS_PRIVILEGE XX,\n        SYS_MODULE ZZ\n        WHERE XX.module_id =ZZ.id\n        AND ZZ.enable_state='10'\n        and exists\n        ( SELECT 1\n        FROM SYS_USER_AUTH AA,SYS_ROLE BB\n        WHERE AA.user_id =  ?1\n        AND AA.role_id = BB.id\n        AND BB.enable_state='10'\n        and AA.role_id = XX.role_id\n        AND EXISTS\n        ( SELECT 1\n        FROM sys_system SS\n        WHERE SS.id = BB.sys_id\n        AND SS.code =  ?2 )\n        AND AA.role_id=BB.id)\n    </sql>\n\n</mapper>\n</db-sql>\n\n```\n  \n  \n***读取XML并映射到HashMap中 创建LoadingSqlXml.java***\n\n \n*** 完整版本 ***\n\n```\npublic enum LoadingSqlXml {\n\n    INSTANCE;\n\n    //获取dbsql绝对路径\n    private final static String dbSqlPath = ClassUtils.getDefaultClassLoader().getResource(\"dbsql\").getPath();\n    //定义私有SQLMap  XML中的namespace,version 该文件下的sql集合\n    private static final Map<String, HashMap<Double, HashMap<String, String>>> myHashMaps = new HashMap<String, HashMap<Double, HashMap<String, String>>>();\n\n    //定义私有SQLMap集合\n    private static HashMap sqlMap = null;\n\n    //定义版本集合\n    private static final HashMap<Double, HashMap<String, String>> versionMap = new HashMap();\n\n\n    //根据名称找到当前实现类下需要使用的SQL集合\n    //如:   private HashMap<String, String> dbSqlMap = LoadingSqlXml.INSTANCE.findSqlMap(this.getClass().getName());\n    //  dbSqlMap.get(\"sqlId\");\n    public HashMap<String, String> findSqlMap(String c) {\n\n        if (myHashMaps.isEmpty()) {\n            try {\n                init();\n            } catch (Exception ex) {\n                ex.printStackTrace();\n            }\n        }\n\n        HashMap<String, String> _h = null;\n        for (Map.Entry<Double, HashMap<String, String>> entry0 : myHashMaps.get(c).entrySet()) {\n            _h = entry0.getValue();\n        }\n        return _h;\n    }\n\n    //初始化执行\n    public void init() throws InitDataSqlReaderException, DocumentException {\n        if (!myHashMaps.isEmpty()) {\n            return;\n        }\n        File file = new File(dbSqlPath);\n        File[] files = file.listFiles();\n        for (File f : files) {\n            ReadDbSqlXml(f);\n        }\n    }\n\n    //读取文件XML并解析到 数据集合中\n    private void ReadDbSqlXml(File f) throws InitDataSqlReaderException, DocumentException {\n\n        SAXReader reader = new SAXReader();\n        Document doc = reader.read(f);\n        Element root = doc.getRootElement();\n        Element fo;\n        Element value;\n        String fileName = f.getName();\n\n        //迭代器查看有几个\n        for (Iterator i = root.elementIterator(\"mapper\"); i.hasNext(); ) {\n\n            fo = (Element) i.next();\n\n            List<String> attributes = fo.attributes();\n            if (attributes.size() == 0) {\n                throw new InitDataSqlReaderException(fileName.concat(\" 在mapper节点找不到属性,请定义 [namespace,version] \"));\n            }\n\n            String namespace = fo.attribute(\"namespace\").getValue();\n            String version = fo.attribute(\"version\").getValue();\n\n            if (StringUtils.isEmpty(namespace)) {\n                throw new InitDataSqlReaderException(fileName.concat(\" 在mapper节点找不到属性,请定义 namespace \"));\n            }\n            if (StringUtils.isEmpty(version)) {\n                throw new InitDataSqlReaderException(fileName.concat(\" 在mapper节点找不到属性,请定义 version \"));\n            }\n\n            if (myHashMaps.get(namespace) != null) {\n                throw new InitDataSqlReaderException(fileName.concat(\" 在mapper节点 中的 namespace 定义重复 ==>\" + namespace));\n            }\n\n            for (Iterator k = fo.elementIterator(\"sql\"); k.hasNext(); ) {\n                sqlMap = new HashMap();\n                value = (Element) k.next();\n                String id = value.attribute(\"id\").getValue();\n\n                if (id.equals(\"\")) {\n                    throw new InitDataSqlReaderException(fileName.concat(\"在mapper下sql未定义id\"));\n                }\n\n                String sql = String.valueOf(value.getData());\n                if (sqlMap.get(id) == null) {\n                    sqlMap.put(id, sql);\n                } else {\n                    throw new InitDataSqlReaderException(fileName.concat(\"sql 节点 ID 定义重复 当前ID=\" + id));\n                }\n\n            }\n            versionMap.put(Double.parseDouble(version), sqlMap);\n            myHashMaps.put(namespace, versionMap);\n        }\n    }\n    }\n    \n ```\n \n \n \t *具体实现代码就不在这里展示了直接看源码吧，比较简单，目录结构 下载到源码后从com.springboot.demo.usercenter.usermanager.web.SysUserController 开始向上阅读*\n \t   \n \t   \n     \n  *目前只是简单实现，后续会介绍完整版本 基于spring cloud 微服务架构整合*\n    \n    \n---\n####  项目源码:[github源码地址](https://github.com/zccccccc/cici) \n---\n\n    \n    \n \n   \n\n\n\n\n\n\n\n  \n  ","published":1,"updated":"2017-03-10T02:01:26.000Z","_id":"cj028widq0001325rpr88fj0b","comments":1,"photos":[],"link":"","content":"<h2 id=\"本文为Spring-boot-完整版本，可用于基础开发\"><a href=\"#本文为Spring-boot-完整版本，可用于基础开发\" class=\"headerlink\" title=\"本文为Spring-boot 完整版本，可用于基础开发\"></a>本文为Spring-boot 完整版本，可用于基础开发</h2><h6 id=\"上一文中我们介绍了如何搭建sprign-boot-服务，下面我们一起来搞出完整版本（以下是包含使用到的技术）\"><a href=\"#上一文中我们介绍了如何搭建sprign-boot-服务，下面我们一起来搞出完整版本（以下是包含使用到的技术）\" class=\"headerlink\" title=\"上一文中我们介绍了如何搭建sprign-boot 服务，下面我们一起来搞出完整版本（以下是包含使用到的技术）\"></a>上一文中我们介绍了如何搭建sprign-boot 服务，下面我们一起来搞出完整版本（以下是包含使用到的技术）</h6><ol>\n<li>Swagger2 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。总体目标是使客户端和文件系统作为服务器以同样的速度来更新。文件的方法，参数和模型紧密集成到服务器端的代码，允许API来始终保持同步。 </li>\n<li>Spring jap 已经实现了很多数据库操作相关功能，但是拼写SQL是个硬伤，当前项目中实现了一种方式，将 resources/dbsql下的 XXX.xml 映射到全局map中，下面会有详细介绍</li>\n</ol>\n<hr>\n<h4 id=\"项目源码-github源码地址\"><a href=\"#项目源码-github源码地址\" class=\"headerlink\" title=\"项目源码:github源码地址\"></a>项目源码:<a href=\"https://github.com/zccccccc/cici\">github源码地址</a></h4><hr>\n<hr>\n<h4 id=\"Swagger2介绍-开始\"><a href=\"#Swagger2介绍-开始\" class=\"headerlink\" title=\"Swagger2介绍 开始\"></a>Swagger2介绍 开始</h4><p> <strong><em>pom.xml 添加</em></strong></p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div><div class=\"line\">&lt;dependency&gt;</div><div class=\"line\">       &lt;groupId&gt;io.springfox&lt;/groupId&gt;</div><div class=\"line\">       &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</div><div class=\"line\">       &lt;version&gt;2.2.2&lt;/version&gt;</div><div class=\"line\">   &lt;/dependency&gt;</div><div class=\"line\">   &lt;dependency&gt;</div><div class=\"line\">       &lt;groupId&gt;io.springfox&lt;/groupId&gt;</div><div class=\"line\">       &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</div><div class=\"line\">       &lt;version&gt;2.2.2&lt;/version&gt;</div><div class=\"line\">   &lt;/dependency&gt;</div></pre></td></tr></table></figure>\n<p><strong><em>在MainApplication平级创建 Swagger2.java</em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@Configuration</div><div class=\"line\">@EnableSwagger2</div><div class=\"line\">public class Swagger2 &#123;</div><div class=\"line\"></div><div class=\"line\">    @Bean</div><div class=\"line\">    public Docket createRestApi() &#123;</div><div class=\"line\">        return new Docket(DocumentationType.SWAGGER_2)</div><div class=\"line\">                .apiInfo(apiInfo())</div><div class=\"line\">                .select()</div><div class=\"line\">                .apis(RequestHandlerSelectors.basePackage(&quot;com.springboot.demo&quot;))</div><div class=\"line\">                .paths(PathSelectors.any())</div><div class=\"line\">                .build();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    private ApiInfo apiInfo() &#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">                return new ApiInfoBuilder()</div><div class=\"line\">                .title(&quot;Spring Boot 中使用Swagger2构建RESTful APIs&quot;).version(&quot;2.0&quot;).build();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong><em> API接口方法中加入下面注解，就可以了使用了，访问地址 <a href=\"http://localhost:7777\" target=\"_blank\" rel=\"external\">http://localhost:7777</a> /swagger-ui.html 就可以访问了</em></strong>  </p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">@ApiOperation(value = &quot;获取用户列表&quot;, notes = &quot;需要传入json参数&quot;)</div><div class=\"line\">@ApiImplicitParams(&#123;</div><div class=\"line\">        @ApiImplicitParam(name = &quot;sysUserDomain&quot;, value = &quot;系统用户实体&quot;, required = true, dataType = &quot;SysUserDomain&quot;)</div><div class=\"line\">&#125;)</div><div class=\"line\">@ApiResponses(value = &#123;</div><div class=\"line\">        @ApiResponse(code = 200, message = &quot;Success&quot;, response = BaseOutput.class),</div><div class=\"line\">        @ApiResponse(code = 401, message = &quot;Unauthorized&quot;),</div><div class=\"line\">        @ApiResponse(code = 403, message = &quot;Forbidden&quot;),</div><div class=\"line\">        @ApiResponse(code = 404, message = &quot;Not Found&quot;),</div><div class=\"line\">        @ApiResponse(code = 500, message = &quot;Failure&quot;)&#125;)</div><div class=\"line\">@PostMapping(value = &quot;list&quot;)</div><div class=\"line\">public BaseOutput&lt;SysUser&gt; list(HttpServletRequest request, HttpServletResponse response, @RequestBody SysUserDomain sysUserDomain) &#123;</div><div class=\"line\">    BaseOutput&lt;SysUser&gt; baseOutput = null;</div><div class=\"line\">    try &#123;</div><div class=\"line\"></div><div class=\"line\">        baseOutput = sysUserService.findList(sysUserDomain);</div><div class=\"line\"></div><div class=\"line\">    &#125; catch (Exception ex) &#123;</div><div class=\"line\"></div><div class=\"line\">        baseOutput = baseOutput == null ? (baseOutput = new BaseOutput&lt;SysUser&gt;()) : baseOutput;</div><div class=\"line\">        baseOutput.setReturnCode(new ReturnCode(ReturnCodeDict.ERROR.k, ReturnCodeDict.ERROR.m, ex.getMessage()));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125; finally &#123;</div><div class=\"line\">        return baseOutput;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"将sql放到xml中，系统启动时候加载到各个模块中\"><a href=\"#将sql放到xml中，系统启动时候加载到各个模块中\" class=\"headerlink\" title=\"将sql放到xml中，系统启动时候加载到各个模块中\"></a>将sql放到xml中，系统启动时候加载到各个模块中</h4><p><strong><em> 在resources 下创建dbsql文件夹 里面包含各种sql的xml: namespace(具体使用实现类，获取sql时使用),version(版本控制后期会加入自动热部署) </em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;db-sql&gt;</div><div class=\"line\">&lt;mapper namespace=&quot;com.springboot.demo.usercenter.usermanager.serve.SysUserServiceImpl&quot; version=&quot;1.0&quot; &gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;sql id=&quot;findListNativeSql&quot;&gt;</div><div class=\"line\">        SELECT</div><div class=\"line\">        distinct</div><div class=\"line\">        XX.module_id,</div><div class=\"line\">        XX.action_code,</div><div class=\"line\">        XX.action_name,</div><div class=\"line\">        ZZ.name module_name,</div><div class=\"line\">        ZZ.url,</div><div class=\"line\">        ZZ.order_id,</div><div class=\"line\">        ZZ.module_desc,</div><div class=\"line\">        ZZ.code module_code,</div><div class=\"line\">        ZZ.parent_id</div><div class=\"line\">        FROM SYS_PRIVILEGE XX,</div><div class=\"line\">        SYS_MODULE ZZ</div><div class=\"line\">        WHERE XX.module_id =ZZ.id</div><div class=\"line\">        AND ZZ.enable_state=&apos;10&apos;</div><div class=\"line\">        and exists</div><div class=\"line\">        ( SELECT 1</div><div class=\"line\">        FROM SYS_USER_AUTH AA,SYS_ROLE BB</div><div class=\"line\">        WHERE AA.user_id =  ?1</div><div class=\"line\">        AND AA.role_id = BB.id</div><div class=\"line\">        AND BB.enable_state=&apos;10&apos;</div><div class=\"line\">        and AA.role_id = XX.role_id</div><div class=\"line\">        AND EXISTS</div><div class=\"line\">        ( SELECT 1</div><div class=\"line\">        FROM sys_system SS</div><div class=\"line\">        WHERE SS.id = BB.sys_id</div><div class=\"line\">        AND SS.code =  ?2 )</div><div class=\"line\">        AND AA.role_id=BB.id)</div><div class=\"line\">    &lt;/sql&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/mapper&gt;</div><div class=\"line\">&lt;/db-sql&gt;</div></pre></td></tr></table></figure>\n<p><strong><em>读取XML并映射到HashMap中 创建LoadingSqlXml.java</em></strong></p>\n<p><strong><em> 完整版本 </em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div></pre></td><td class=\"code\"><pre><div class=\"line\">public enum LoadingSqlXml &#123;</div><div class=\"line\"></div><div class=\"line\">    INSTANCE;</div><div class=\"line\"></div><div class=\"line\">    //获取dbsql绝对路径</div><div class=\"line\">    private final static String dbSqlPath = ClassUtils.getDefaultClassLoader().getResource(&quot;dbsql&quot;).getPath();</div><div class=\"line\">    //定义私有SQLMap  XML中的namespace,version 该文件下的sql集合</div><div class=\"line\">    private static final Map&lt;String, HashMap&lt;Double, HashMap&lt;String, String&gt;&gt;&gt; myHashMaps = new HashMap&lt;String, HashMap&lt;Double, HashMap&lt;String, String&gt;&gt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    //定义私有SQLMap集合</div><div class=\"line\">    private static HashMap sqlMap = null;</div><div class=\"line\"></div><div class=\"line\">    //定义版本集合</div><div class=\"line\">    private static final HashMap&lt;Double, HashMap&lt;String, String&gt;&gt; versionMap = new HashMap();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    //根据名称找到当前实现类下需要使用的SQL集合</div><div class=\"line\">    //如:   private HashMap&lt;String, String&gt; dbSqlMap = LoadingSqlXml.INSTANCE.findSqlMap(this.getClass().getName());</div><div class=\"line\">    //  dbSqlMap.get(&quot;sqlId&quot;);</div><div class=\"line\">    public HashMap&lt;String, String&gt; findSqlMap(String c) &#123;</div><div class=\"line\"></div><div class=\"line\">        if (myHashMaps.isEmpty()) &#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                init();</div><div class=\"line\">            &#125; catch (Exception ex) &#123;</div><div class=\"line\">                ex.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        HashMap&lt;String, String&gt; _h = null;</div><div class=\"line\">        for (Map.Entry&lt;Double, HashMap&lt;String, String&gt;&gt; entry0 : myHashMaps.get(c).entrySet()) &#123;</div><div class=\"line\">            _h = entry0.getValue();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return _h;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //初始化执行</div><div class=\"line\">    public void init() throws InitDataSqlReaderException, DocumentException &#123;</div><div class=\"line\">        if (!myHashMaps.isEmpty()) &#123;</div><div class=\"line\">            return;</div><div class=\"line\">        &#125;</div><div class=\"line\">        File file = new File(dbSqlPath);</div><div class=\"line\">        File[] files = file.listFiles();</div><div class=\"line\">        for (File f : files) &#123;</div><div class=\"line\">            ReadDbSqlXml(f);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //读取文件XML并解析到 数据集合中</div><div class=\"line\">    private void ReadDbSqlXml(File f) throws InitDataSqlReaderException, DocumentException &#123;</div><div class=\"line\"></div><div class=\"line\">        SAXReader reader = new SAXReader();</div><div class=\"line\">        Document doc = reader.read(f);</div><div class=\"line\">        Element root = doc.getRootElement();</div><div class=\"line\">        Element fo;</div><div class=\"line\">        Element value;</div><div class=\"line\">        String fileName = f.getName();</div><div class=\"line\"></div><div class=\"line\">        //迭代器查看有几个</div><div class=\"line\">        for (Iterator i = root.elementIterator(&quot;mapper&quot;); i.hasNext(); ) &#123;</div><div class=\"line\"></div><div class=\"line\">            fo = (Element) i.next();</div><div class=\"line\"></div><div class=\"line\">            List&lt;String&gt; attributes = fo.attributes();</div><div class=\"line\">            if (attributes.size() == 0) &#123;</div><div class=\"line\">                throw new InitDataSqlReaderException(fileName.concat(&quot; 在mapper节点找不到属性,请定义 [namespace,version] &quot;));</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            String namespace = fo.attribute(&quot;namespace&quot;).getValue();</div><div class=\"line\">            String version = fo.attribute(&quot;version&quot;).getValue();</div><div class=\"line\"></div><div class=\"line\">            if (StringUtils.isEmpty(namespace)) &#123;</div><div class=\"line\">                throw new InitDataSqlReaderException(fileName.concat(&quot; 在mapper节点找不到属性,请定义 namespace &quot;));</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (StringUtils.isEmpty(version)) &#123;</div><div class=\"line\">                throw new InitDataSqlReaderException(fileName.concat(&quot; 在mapper节点找不到属性,请定义 version &quot;));</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (myHashMaps.get(namespace) != null) &#123;</div><div class=\"line\">                throw new InitDataSqlReaderException(fileName.concat(&quot; 在mapper节点 中的 namespace 定义重复 ==&gt;&quot; + namespace));</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (Iterator k = fo.elementIterator(&quot;sql&quot;); k.hasNext(); ) &#123;</div><div class=\"line\">                sqlMap = new HashMap();</div><div class=\"line\">                value = (Element) k.next();</div><div class=\"line\">                String id = value.attribute(&quot;id&quot;).getValue();</div><div class=\"line\"></div><div class=\"line\">                if (id.equals(&quot;&quot;)) &#123;</div><div class=\"line\">                    throw new InitDataSqlReaderException(fileName.concat(&quot;在mapper下sql未定义id&quot;));</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                String sql = String.valueOf(value.getData());</div><div class=\"line\">                if (sqlMap.get(id) == null) &#123;</div><div class=\"line\">                    sqlMap.put(id, sql);</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    throw new InitDataSqlReaderException(fileName.concat(&quot;sql 节点 ID 定义重复 当前ID=&quot; + id));</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">            versionMap.put(Double.parseDouble(version), sqlMap);</div><div class=\"line\">            myHashMaps.put(namespace, versionMap);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<pre><code>*具体实现代码就不在这里展示了直接看源码吧，比较简单，目录结构 下载到源码后从com.springboot.demo.usercenter.usermanager.web.SysUserController 开始向上阅读*\n</code></pre><p>  <em>目前只是简单实现，后续会介绍完整版本 基于spring cloud 微服务架构整合</em></p>\n<hr>\n<h4 id=\"项目源码-github源码地址-1\"><a href=\"#项目源码-github源码地址-1\" class=\"headerlink\" title=\"项目源码:github源码地址\"></a>项目源码:<a href=\"https://github.com/zccccccc/cici\">github源码地址</a></h4><hr>\n","excerpt":"","more":"<h2 id=\"本文为Spring-boot-完整版本，可用于基础开发\"><a href=\"#本文为Spring-boot-完整版本，可用于基础开发\" class=\"headerlink\" title=\"本文为Spring-boot 完整版本，可用于基础开发\"></a>本文为Spring-boot 完整版本，可用于基础开发</h2><h6 id=\"上一文中我们介绍了如何搭建sprign-boot-服务，下面我们一起来搞出完整版本（以下是包含使用到的技术）\"><a href=\"#上一文中我们介绍了如何搭建sprign-boot-服务，下面我们一起来搞出完整版本（以下是包含使用到的技术）\" class=\"headerlink\" title=\"上一文中我们介绍了如何搭建sprign-boot 服务，下面我们一起来搞出完整版本（以下是包含使用到的技术）\"></a>上一文中我们介绍了如何搭建sprign-boot 服务，下面我们一起来搞出完整版本（以下是包含使用到的技术）</h6><ol>\n<li>Swagger2 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。总体目标是使客户端和文件系统作为服务器以同样的速度来更新。文件的方法，参数和模型紧密集成到服务器端的代码，允许API来始终保持同步。 </li>\n<li>Spring jap 已经实现了很多数据库操作相关功能，但是拼写SQL是个硬伤，当前项目中实现了一种方式，将 resources/dbsql下的 XXX.xml 映射到全局map中，下面会有详细介绍</li>\n</ol>\n<hr>\n<h4 id=\"项目源码-github源码地址\"><a href=\"#项目源码-github源码地址\" class=\"headerlink\" title=\"项目源码:github源码地址\"></a>项目源码:<a href=\"https://github.com/zccccccc/cici\">github源码地址</a></h4><hr>\n<hr>\n<h4 id=\"Swagger2介绍-开始\"><a href=\"#Swagger2介绍-开始\" class=\"headerlink\" title=\"Swagger2介绍 开始\"></a>Swagger2介绍 开始</h4><p> <strong><em>pom.xml 添加</em></strong></p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div><div class=\"line\">&lt;dependency&gt;</div><div class=\"line\">       &lt;groupId&gt;io.springfox&lt;/groupId&gt;</div><div class=\"line\">       &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</div><div class=\"line\">       &lt;version&gt;2.2.2&lt;/version&gt;</div><div class=\"line\">   &lt;/dependency&gt;</div><div class=\"line\">   &lt;dependency&gt;</div><div class=\"line\">       &lt;groupId&gt;io.springfox&lt;/groupId&gt;</div><div class=\"line\">       &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</div><div class=\"line\">       &lt;version&gt;2.2.2&lt;/version&gt;</div><div class=\"line\">   &lt;/dependency&gt;</div></pre></td></tr></table></figure>\n<p><strong><em>在MainApplication平级创建 Swagger2.java</em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@Configuration</div><div class=\"line\">@EnableSwagger2</div><div class=\"line\">public class Swagger2 &#123;</div><div class=\"line\"></div><div class=\"line\">    @Bean</div><div class=\"line\">    public Docket createRestApi() &#123;</div><div class=\"line\">        return new Docket(DocumentationType.SWAGGER_2)</div><div class=\"line\">                .apiInfo(apiInfo())</div><div class=\"line\">                .select()</div><div class=\"line\">                .apis(RequestHandlerSelectors.basePackage(&quot;com.springboot.demo&quot;))</div><div class=\"line\">                .paths(PathSelectors.any())</div><div class=\"line\">                .build();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    private ApiInfo apiInfo() &#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">                return new ApiInfoBuilder()</div><div class=\"line\">                .title(&quot;Spring Boot 中使用Swagger2构建RESTful APIs&quot;).version(&quot;2.0&quot;).build();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong><em> API接口方法中加入下面注解，就可以了使用了，访问地址 <a href=\"http://localhost:7777\">http://localhost:7777</a> /swagger-ui.html 就可以访问了</em></strong>  </p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">@ApiOperation(value = &quot;获取用户列表&quot;, notes = &quot;需要传入json参数&quot;)</div><div class=\"line\">@ApiImplicitParams(&#123;</div><div class=\"line\">        @ApiImplicitParam(name = &quot;sysUserDomain&quot;, value = &quot;系统用户实体&quot;, required = true, dataType = &quot;SysUserDomain&quot;)</div><div class=\"line\">&#125;)</div><div class=\"line\">@ApiResponses(value = &#123;</div><div class=\"line\">        @ApiResponse(code = 200, message = &quot;Success&quot;, response = BaseOutput.class),</div><div class=\"line\">        @ApiResponse(code = 401, message = &quot;Unauthorized&quot;),</div><div class=\"line\">        @ApiResponse(code = 403, message = &quot;Forbidden&quot;),</div><div class=\"line\">        @ApiResponse(code = 404, message = &quot;Not Found&quot;),</div><div class=\"line\">        @ApiResponse(code = 500, message = &quot;Failure&quot;)&#125;)</div><div class=\"line\">@PostMapping(value = &quot;list&quot;)</div><div class=\"line\">public BaseOutput&lt;SysUser&gt; list(HttpServletRequest request, HttpServletResponse response, @RequestBody SysUserDomain sysUserDomain) &#123;</div><div class=\"line\">    BaseOutput&lt;SysUser&gt; baseOutput = null;</div><div class=\"line\">    try &#123;</div><div class=\"line\"></div><div class=\"line\">        baseOutput = sysUserService.findList(sysUserDomain);</div><div class=\"line\"></div><div class=\"line\">    &#125; catch (Exception ex) &#123;</div><div class=\"line\"></div><div class=\"line\">        baseOutput = baseOutput == null ? (baseOutput = new BaseOutput&lt;SysUser&gt;()) : baseOutput;</div><div class=\"line\">        baseOutput.setReturnCode(new ReturnCode(ReturnCodeDict.ERROR.k, ReturnCodeDict.ERROR.m, ex.getMessage()));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125; finally &#123;</div><div class=\"line\">        return baseOutput;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"将sql放到xml中，系统启动时候加载到各个模块中\"><a href=\"#将sql放到xml中，系统启动时候加载到各个模块中\" class=\"headerlink\" title=\"将sql放到xml中，系统启动时候加载到各个模块中\"></a>将sql放到xml中，系统启动时候加载到各个模块中</h4><p><strong><em> 在resources 下创建dbsql文件夹 里面包含各种sql的xml: namespace(具体使用实现类，获取sql时使用),version(版本控制后期会加入自动热部署) </em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;db-sql&gt;</div><div class=\"line\">&lt;mapper namespace=&quot;com.springboot.demo.usercenter.usermanager.serve.SysUserServiceImpl&quot; version=&quot;1.0&quot; &gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;sql id=&quot;findListNativeSql&quot;&gt;</div><div class=\"line\">        SELECT</div><div class=\"line\">        distinct</div><div class=\"line\">        XX.module_id,</div><div class=\"line\">        XX.action_code,</div><div class=\"line\">        XX.action_name,</div><div class=\"line\">        ZZ.name module_name,</div><div class=\"line\">        ZZ.url,</div><div class=\"line\">        ZZ.order_id,</div><div class=\"line\">        ZZ.module_desc,</div><div class=\"line\">        ZZ.code module_code,</div><div class=\"line\">        ZZ.parent_id</div><div class=\"line\">        FROM SYS_PRIVILEGE XX,</div><div class=\"line\">        SYS_MODULE ZZ</div><div class=\"line\">        WHERE XX.module_id =ZZ.id</div><div class=\"line\">        AND ZZ.enable_state=&apos;10&apos;</div><div class=\"line\">        and exists</div><div class=\"line\">        ( SELECT 1</div><div class=\"line\">        FROM SYS_USER_AUTH AA,SYS_ROLE BB</div><div class=\"line\">        WHERE AA.user_id =  ?1</div><div class=\"line\">        AND AA.role_id = BB.id</div><div class=\"line\">        AND BB.enable_state=&apos;10&apos;</div><div class=\"line\">        and AA.role_id = XX.role_id</div><div class=\"line\">        AND EXISTS</div><div class=\"line\">        ( SELECT 1</div><div class=\"line\">        FROM sys_system SS</div><div class=\"line\">        WHERE SS.id = BB.sys_id</div><div class=\"line\">        AND SS.code =  ?2 )</div><div class=\"line\">        AND AA.role_id=BB.id)</div><div class=\"line\">    &lt;/sql&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/mapper&gt;</div><div class=\"line\">&lt;/db-sql&gt;</div></pre></td></tr></table></figure>\n<p><strong><em>读取XML并映射到HashMap中 创建LoadingSqlXml.java</em></strong></p>\n<p><strong><em> 完整版本 </em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div></pre></td><td class=\"code\"><pre><div class=\"line\">public enum LoadingSqlXml &#123;</div><div class=\"line\"></div><div class=\"line\">    INSTANCE;</div><div class=\"line\"></div><div class=\"line\">    //获取dbsql绝对路径</div><div class=\"line\">    private final static String dbSqlPath = ClassUtils.getDefaultClassLoader().getResource(&quot;dbsql&quot;).getPath();</div><div class=\"line\">    //定义私有SQLMap  XML中的namespace,version 该文件下的sql集合</div><div class=\"line\">    private static final Map&lt;String, HashMap&lt;Double, HashMap&lt;String, String&gt;&gt;&gt; myHashMaps = new HashMap&lt;String, HashMap&lt;Double, HashMap&lt;String, String&gt;&gt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    //定义私有SQLMap集合</div><div class=\"line\">    private static HashMap sqlMap = null;</div><div class=\"line\"></div><div class=\"line\">    //定义版本集合</div><div class=\"line\">    private static final HashMap&lt;Double, HashMap&lt;String, String&gt;&gt; versionMap = new HashMap();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    //根据名称找到当前实现类下需要使用的SQL集合</div><div class=\"line\">    //如:   private HashMap&lt;String, String&gt; dbSqlMap = LoadingSqlXml.INSTANCE.findSqlMap(this.getClass().getName());</div><div class=\"line\">    //  dbSqlMap.get(&quot;sqlId&quot;);</div><div class=\"line\">    public HashMap&lt;String, String&gt; findSqlMap(String c) &#123;</div><div class=\"line\"></div><div class=\"line\">        if (myHashMaps.isEmpty()) &#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                init();</div><div class=\"line\">            &#125; catch (Exception ex) &#123;</div><div class=\"line\">                ex.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        HashMap&lt;String, String&gt; _h = null;</div><div class=\"line\">        for (Map.Entry&lt;Double, HashMap&lt;String, String&gt;&gt; entry0 : myHashMaps.get(c).entrySet()) &#123;</div><div class=\"line\">            _h = entry0.getValue();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return _h;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //初始化执行</div><div class=\"line\">    public void init() throws InitDataSqlReaderException, DocumentException &#123;</div><div class=\"line\">        if (!myHashMaps.isEmpty()) &#123;</div><div class=\"line\">            return;</div><div class=\"line\">        &#125;</div><div class=\"line\">        File file = new File(dbSqlPath);</div><div class=\"line\">        File[] files = file.listFiles();</div><div class=\"line\">        for (File f : files) &#123;</div><div class=\"line\">            ReadDbSqlXml(f);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //读取文件XML并解析到 数据集合中</div><div class=\"line\">    private void ReadDbSqlXml(File f) throws InitDataSqlReaderException, DocumentException &#123;</div><div class=\"line\"></div><div class=\"line\">        SAXReader reader = new SAXReader();</div><div class=\"line\">        Document doc = reader.read(f);</div><div class=\"line\">        Element root = doc.getRootElement();</div><div class=\"line\">        Element fo;</div><div class=\"line\">        Element value;</div><div class=\"line\">        String fileName = f.getName();</div><div class=\"line\"></div><div class=\"line\">        //迭代器查看有几个</div><div class=\"line\">        for (Iterator i = root.elementIterator(&quot;mapper&quot;); i.hasNext(); ) &#123;</div><div class=\"line\"></div><div class=\"line\">            fo = (Element) i.next();</div><div class=\"line\"></div><div class=\"line\">            List&lt;String&gt; attributes = fo.attributes();</div><div class=\"line\">            if (attributes.size() == 0) &#123;</div><div class=\"line\">                throw new InitDataSqlReaderException(fileName.concat(&quot; 在mapper节点找不到属性,请定义 [namespace,version] &quot;));</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            String namespace = fo.attribute(&quot;namespace&quot;).getValue();</div><div class=\"line\">            String version = fo.attribute(&quot;version&quot;).getValue();</div><div class=\"line\"></div><div class=\"line\">            if (StringUtils.isEmpty(namespace)) &#123;</div><div class=\"line\">                throw new InitDataSqlReaderException(fileName.concat(&quot; 在mapper节点找不到属性,请定义 namespace &quot;));</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (StringUtils.isEmpty(version)) &#123;</div><div class=\"line\">                throw new InitDataSqlReaderException(fileName.concat(&quot; 在mapper节点找不到属性,请定义 version &quot;));</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (myHashMaps.get(namespace) != null) &#123;</div><div class=\"line\">                throw new InitDataSqlReaderException(fileName.concat(&quot; 在mapper节点 中的 namespace 定义重复 ==&gt;&quot; + namespace));</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (Iterator k = fo.elementIterator(&quot;sql&quot;); k.hasNext(); ) &#123;</div><div class=\"line\">                sqlMap = new HashMap();</div><div class=\"line\">                value = (Element) k.next();</div><div class=\"line\">                String id = value.attribute(&quot;id&quot;).getValue();</div><div class=\"line\"></div><div class=\"line\">                if (id.equals(&quot;&quot;)) &#123;</div><div class=\"line\">                    throw new InitDataSqlReaderException(fileName.concat(&quot;在mapper下sql未定义id&quot;));</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                String sql = String.valueOf(value.getData());</div><div class=\"line\">                if (sqlMap.get(id) == null) &#123;</div><div class=\"line\">                    sqlMap.put(id, sql);</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    throw new InitDataSqlReaderException(fileName.concat(&quot;sql 节点 ID 定义重复 当前ID=&quot; + id));</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">            versionMap.put(Double.parseDouble(version), sqlMap);</div><div class=\"line\">            myHashMaps.put(namespace, versionMap);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<pre><code>*具体实现代码就不在这里展示了直接看源码吧，比较简单，目录结构 下载到源码后从com.springboot.demo.usercenter.usermanager.web.SysUserController 开始向上阅读*\n</code></pre><p>  <em>目前只是简单实现，后续会介绍完整版本 基于spring cloud 微服务架构整合</em></p>\n<hr>\n<h4 id=\"项目源码-github源码地址-1\"><a href=\"#项目源码-github源码地址-1\" class=\"headerlink\" title=\"项目源码:github源码地址\"></a>项目源码:<a href=\"https://github.com/zccccccc/cici\">github源码地址</a></h4><hr>\n"},{"title":"spring-boot 搭建-不解释","date":"2017-03-06T06:21:59.000Z","layout":"clean-blog","slug":"spring-boot-搭建-不解释","_content":"\n## 本文为Spring-boot入门篇,老司机跳过\n  \n  1. 服务创建\n  2. RestAPI创建(配置文件)\n  3. 数据层（链接池）/服务层实现(事务，单表更新级查询)/整合接口服务\n \n    \n    \n  \n\n> ** 知识准备。 **\n>  spring boot 基于 maven创建，如果不熟悉请先学习[maven 教程](http://www.yiibai.com/maven/)  \n\n---\n####  项目源码:[github源码地址](https://github.com/zccccccc/cici) \n---\n\n\n### 1.创建maven web项目 (如果选择 springBoot模版创建速度非常慢，个人感觉直接创建比较简单)  \n \n  * 创建maven web项目 (如果选择 springBoot模版创建速度非常慢，个人感觉直接创建比较)\n  修改pom.xml,添加springboot依赖\n  \n  ```\n   <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.4.1.RELEASE</version>\n    </parent>\n\n    <dependencies>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-thymeleaf</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\n        </dependency>\n\n\n        <dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-lang3</artifactId>\n            <version>3.0</version>\n        </dependency>\n\n\n        <dependency>\n            <groupId>com.oracle</groupId>\n            <artifactId>ojdbc14</artifactId>\n            <version>10.2.0.4.0</version>\n        </dependency>\n\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>druid</artifactId>\n            <version>1.0.18</version>\n        </dependency>\n\n\n    </dependencies>\n  \n  ```\n \n  * 创建启动入口文件 运行main方法，服务搭建就OK啦\n  \n  ```\n  @SpringBootApplication\npublic class MainApp extends WebMvcConfigurerAdapter {\n\n    //第一种\n    //1 cd  当前项目根目录下\n    //1 mvn spring-boot:run\n\n    //第二种\n    //2 cd  当前项目根目录下\n    //2. mvn install\n    //2.  cd target/\n    //2. java -jar cici-log.jar\n\n    //第三种\n    //直接运行main方法\n\n    //启动时候选择配置文件启动\n    //3 application.yml application-dev.yml application-pro.yml\n    //3. mvn install\n    //3.  cd target/\n    //3. java -jar cici-log.jar -spring.profies.active=pro\n\n    //后台启动\n    /**\n     *  nohup java -jar cici-log.jar &\n     *  nohup java -jar cici-log.jar  /dev/null 2>&1 &\n     *\n     * */\n    public static void main(String[] args){\n        SpringApplication.run(MainApplation.class,args);\n    }\n\n  }\n  \n  ```\n    \n### 2.RestAPI创建   \n   \n   创建服务接口包括post/put/get/delete\n   创建 SysUserController.java \n   添加注解\n   \n   ```\n   @RestController\n   @RequestMapping(\"/api/sysUser\")\n   ```\n  \n   完整服务接口代码\n   \n   ```\n@RestController\n@RequestMapping(\"/api/sysUser\")\npublic class SysUserController {\n\n    @GetMapping(value = \"list\")\n    public List<CatUser> catalog(){\n        return null;\n    }\n\n    //获取数据\n    @GetMapping(value = \"update/{id}\")\n    public CatUser get(@PathVariable(\"id\")String id){\n        return null;\n    }\n\n    //新增\n    @PostMapping(value = \"update\")\n    public Object add(@RequestBody Object c){\n\n        return null;\n    }\n\n    //更新\n    @PutMapping(value = \"update\")\n    public CatUser update(@RequestBody CatUser c){\n\n        return null;\n    }\n\n    //删除\n    @DeleteMapping(value = \"update/{id}\")\n    public void add(@PathVariable(\"id\")String id){\n\n    }\n}\n\n```\n \n###  3. 数据层/服务层实现（事务，链接池）  \n  \n  当我们接口服务创建完成后开始创建服务层数据层代码\n  \n#### 1. 配置文件 spring boot 推荐使用.yml 配置，此方法少去很多冗余字段\n#### 2. 我们创建 application.yml \n  \n ```\n\nspring:\n  profiles:\n    active: dev\n  jpa:\n     hibernate:\n       ddl-auto: none\n     show-sql: true\n\n\n ```\n - spring.profiles.active: dev 读取配置文件为 application-dev.yml 的配置文件,目前用于测试环境和生   产环境配置分类 \n - jpa.hibernate.ddl-auto:  会根据绑定的实体(@Entity)生成 ,建议使用 none\n \n \t\t+ validate   加载hibernate时，验证创建数据库表结构\n \t\t+ create      每次加载hibernate，重新创建数据库表结构，这就是导致数据库表数据丢失的原因。\n \t\t+ create-drop  加载hibernate时创建，退出是删除表结构\n \t\t+ update        加载hibernate自动更新数据库结构\n - jpa.hibernate.show-sql: true 显示sql \n  \n \n#### 3. 创建数据库配置 application-dev.yml \n\n```\nserver:\n    port: 7777\nspring:\n  datasource:\n      driver-class-name: oracle.jdbc.driver.OracleDriver\n      url: jdbc:oracle:thin:@172.25.13.98:1521:data98\n      username: HHZY_TEST\n      password: HHZY_TEST\n      type: com.alibaba.druid.pool.DruidDataSource\n      spring.datasource.initialSize: 5\n      spring.datasource.minIdle: 5\n      spring.datasource.maxActive: 20\n      spring.datasource.maxWait: 60000\n      timeBetweenEvictionRunsMillis: 60000\n      minEvictableIdleTimeMillis: 300000\n      validationQuery: SELECT 1 FROM DUAL\n      testWhileIdle: true\n      testOnBorrow: false\n      testOnReturn: false\n      poolPreparedStatements: true\n      maxPoolPreparedStatementPerConnectionSize: 20\n      filters: stat,wall,log4j\n      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000\n      useGlobalDataSourceStat: true\nlogging.level.root: DEBUG\nlogging.level.org.springframework.web: DEBUG\nlogging.level.org.hibernate: DEBUG\n\n\n```\n \n   \n   \n- server.port: 7777 为当前服务端口\n\n\n- \nspring.datasource 数据库连接配置当前使用连接池的是 [DruidDataSource](https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8)\n  + 创建 druid 访问[http://localhost:7777/druid/index.html](http://localhost:7777/druid/index.html)\n  \n      \n  ```  \n@SuppressWarnings(\"serial\")\n@WebServlet(urlPatterns = \"/druid/*\",  initParams = {\n                @WebInitParam(name = \"allow\", value = \"127.0.0.1\"),// IP白名单 (没有配置或者为空，则允许所有访问)\n                @WebInitParam(name = \"deny\", value = \"192.168.16.111\"),// IP黑名单 (存在共同时，deny优先于allow)\n                @WebInitParam(name = \"loginUsername\", value = \"zc\"),// 用户名\n                @WebInitParam(name = \"loginPassword\", value = \"zc\"),// 密码\n                @WebInitParam(name = \"resetEnable\", value = \"false\")// 禁用HTML页面上的“Reset All”功能\n        })\npublic class DruidStatViewServlet extends StatViewServlet {\n}\n\n  ```\n    \n   + 创建druid 过滤器\n   \n```\n   \n   @WebFilter(filterName = \"druidWebStatFilter\", urlPatterns = \"/*\",\n        initParams = {\n                @WebInitParam(name = \"exclusions\", value = \"*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*\")// 忽略资源\n        })\npublic class DruidStatFilter extends WebStatFilter {\n}\n\n```\n    \n   \n#### 4. 创建数据模型\n   创建实体类添加数据注解（@Entity）\n   SysUser.java \n   非完整代码\n \n ```\n\n @Entity\n public class SysUser extends BaseDomain {\n \n    private String id;\n    ...\n    ...\n  \n ```\n   \n   \n####  5. 创建服务层(事务，单表更新级查询)及数据访问层\n   创建数据库层接口 SysUserRepository.java 继承 JpaRepository<SysUser(当前对象),String(当前对象主键ID)>  \n    \n  ```\n   \n    public interface SysUserRepository  extends JpaRepository<SysUser,String> { }\n   \n  ```\n    \n   创建服务层类 SysUserService.java (新增修改删除查询，不用写sql)\n   \n   \n   ```\n   @Service\npublic class SysUserService {\n\n    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n\n\n    @Autowired\n    private SysUserRepository sysUserRepository;\n\n\n    public List<SysUser> findAll() {\n        return sysUserRepository.findAll();\n    }\n\n    public SysUser update(SysUser sysUser) {\n\n        if (StringUtils.isEmpty(sysUser.getId())) {\n            sysUser.setId(\"ID存在更新,否则新增\");\n        }\n\n        logger.debug(\"新增了用户\");\n        return sysUserRepository.saveAndFlush(sysUser);\n    }\n\n\n    public void delete(String id) {\n        logger.debug(\"删除了用户\");\n         sysUserRepository.delete(id);\n    }\n\n    public SysUser findOne(String id) {\n        return sysUserRepository.findOne(id);\n    }\n\n}\n  \n   ```\n   \n \n   \n     \n#### 6. 控制层调用 \n  创建SysUserController.java \n  \n  \n  \n```\n\n  \n//系统用户管理\n@RestController\n@RequestMapping(\"/api/sysUser\")\npublic class SysUserController {\n\n    @Autowired\n    SysUserService sysUserService;\n\n    @GetMapping(value = \"list\")\n    public List<SysUser> list(){\n        return sysUserService.findAll();\n    }\n\n    //获取数据\n    @GetMapping(value = \"update/{id}\")\n    public SysUser get(@PathVariable(\"id\")String id){\n        return sysUserService.findOne(id);\n    }\n\n    //新增\n    @PostMapping(value = \"update\")\n    public Object add(@RequestBody SysUser c){\n        return sysUserService.update(c);\n    }\n\n    //更新\n    @PutMapping(value = \"update\")\n    public SysUser update(@RequestBody SysUser c){\n        return sysUserService.update(c);\n    }\n\n    //删除\n    @DeleteMapping(value = \"update/{id}\")\n    public void add(@PathVariable(\"id\")String id){\n        sysUserService.delete(id);\n    }\n}\n\n  \n```\n  \n  到目前为止，我们实现了对单表的增删改查所有操作，没有写一句sql，下面我们将添加复杂sql查询，以及最终版本入门框架搭建\n\n### 后续会介绍整体架构，可以应用于项目开发\n\n\n---\n####  项目源码:[github源码地址](https://github.com/zccccccc/cici) \n---\n   \n  \n    \n     \n   \n   \n  \n  \n \n  \n  \n       \n  \n   ","source":"_posts/spring-boot-搭建-不解释.md","raw":"---\ntitle: spring-boot 搭建-不解释\ndate: 2017-03-06 14:21:59\ntags: java\nlayout: clean-blog\nslug: spring-boot-first\n\n---\n\n## 本文为Spring-boot入门篇,老司机跳过\n  \n  1. 服务创建\n  2. RestAPI创建(配置文件)\n  3. 数据层（链接池）/服务层实现(事务，单表更新级查询)/整合接口服务\n \n    \n    \n  \n\n> ** 知识准备。 **\n>  spring boot 基于 maven创建，如果不熟悉请先学习[maven 教程](http://www.yiibai.com/maven/)  \n\n---\n####  项目源码:[github源码地址](https://github.com/zccccccc/cici) \n---\n\n\n### 1.创建maven web项目 (如果选择 springBoot模版创建速度非常慢，个人感觉直接创建比较简单)  \n \n  * 创建maven web项目 (如果选择 springBoot模版创建速度非常慢，个人感觉直接创建比较)\n  修改pom.xml,添加springboot依赖\n  \n  ```\n   <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.4.1.RELEASE</version>\n    </parent>\n\n    <dependencies>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-thymeleaf</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\n        </dependency>\n\n\n        <dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-lang3</artifactId>\n            <version>3.0</version>\n        </dependency>\n\n\n        <dependency>\n            <groupId>com.oracle</groupId>\n            <artifactId>ojdbc14</artifactId>\n            <version>10.2.0.4.0</version>\n        </dependency>\n\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>druid</artifactId>\n            <version>1.0.18</version>\n        </dependency>\n\n\n    </dependencies>\n  \n  ```\n \n  * 创建启动入口文件 运行main方法，服务搭建就OK啦\n  \n  ```\n  @SpringBootApplication\npublic class MainApp extends WebMvcConfigurerAdapter {\n\n    //第一种\n    //1 cd  当前项目根目录下\n    //1 mvn spring-boot:run\n\n    //第二种\n    //2 cd  当前项目根目录下\n    //2. mvn install\n    //2.  cd target/\n    //2. java -jar cici-log.jar\n\n    //第三种\n    //直接运行main方法\n\n    //启动时候选择配置文件启动\n    //3 application.yml application-dev.yml application-pro.yml\n    //3. mvn install\n    //3.  cd target/\n    //3. java -jar cici-log.jar -spring.profies.active=pro\n\n    //后台启动\n    /**\n     *  nohup java -jar cici-log.jar &\n     *  nohup java -jar cici-log.jar  /dev/null 2>&1 &\n     *\n     * */\n    public static void main(String[] args){\n        SpringApplication.run(MainApplation.class,args);\n    }\n\n  }\n  \n  ```\n    \n### 2.RestAPI创建   \n   \n   创建服务接口包括post/put/get/delete\n   创建 SysUserController.java \n   添加注解\n   \n   ```\n   @RestController\n   @RequestMapping(\"/api/sysUser\")\n   ```\n  \n   完整服务接口代码\n   \n   ```\n@RestController\n@RequestMapping(\"/api/sysUser\")\npublic class SysUserController {\n\n    @GetMapping(value = \"list\")\n    public List<CatUser> catalog(){\n        return null;\n    }\n\n    //获取数据\n    @GetMapping(value = \"update/{id}\")\n    public CatUser get(@PathVariable(\"id\")String id){\n        return null;\n    }\n\n    //新增\n    @PostMapping(value = \"update\")\n    public Object add(@RequestBody Object c){\n\n        return null;\n    }\n\n    //更新\n    @PutMapping(value = \"update\")\n    public CatUser update(@RequestBody CatUser c){\n\n        return null;\n    }\n\n    //删除\n    @DeleteMapping(value = \"update/{id}\")\n    public void add(@PathVariable(\"id\")String id){\n\n    }\n}\n\n```\n \n###  3. 数据层/服务层实现（事务，链接池）  \n  \n  当我们接口服务创建完成后开始创建服务层数据层代码\n  \n#### 1. 配置文件 spring boot 推荐使用.yml 配置，此方法少去很多冗余字段\n#### 2. 我们创建 application.yml \n  \n ```\n\nspring:\n  profiles:\n    active: dev\n  jpa:\n     hibernate:\n       ddl-auto: none\n     show-sql: true\n\n\n ```\n - spring.profiles.active: dev 读取配置文件为 application-dev.yml 的配置文件,目前用于测试环境和生   产环境配置分类 \n - jpa.hibernate.ddl-auto:  会根据绑定的实体(@Entity)生成 ,建议使用 none\n \n \t\t+ validate   加载hibernate时，验证创建数据库表结构\n \t\t+ create      每次加载hibernate，重新创建数据库表结构，这就是导致数据库表数据丢失的原因。\n \t\t+ create-drop  加载hibernate时创建，退出是删除表结构\n \t\t+ update        加载hibernate自动更新数据库结构\n - jpa.hibernate.show-sql: true 显示sql \n  \n \n#### 3. 创建数据库配置 application-dev.yml \n\n```\nserver:\n    port: 7777\nspring:\n  datasource:\n      driver-class-name: oracle.jdbc.driver.OracleDriver\n      url: jdbc:oracle:thin:@172.25.13.98:1521:data98\n      username: HHZY_TEST\n      password: HHZY_TEST\n      type: com.alibaba.druid.pool.DruidDataSource\n      spring.datasource.initialSize: 5\n      spring.datasource.minIdle: 5\n      spring.datasource.maxActive: 20\n      spring.datasource.maxWait: 60000\n      timeBetweenEvictionRunsMillis: 60000\n      minEvictableIdleTimeMillis: 300000\n      validationQuery: SELECT 1 FROM DUAL\n      testWhileIdle: true\n      testOnBorrow: false\n      testOnReturn: false\n      poolPreparedStatements: true\n      maxPoolPreparedStatementPerConnectionSize: 20\n      filters: stat,wall,log4j\n      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000\n      useGlobalDataSourceStat: true\nlogging.level.root: DEBUG\nlogging.level.org.springframework.web: DEBUG\nlogging.level.org.hibernate: DEBUG\n\n\n```\n \n   \n   \n- server.port: 7777 为当前服务端口\n\n\n- \nspring.datasource 数据库连接配置当前使用连接池的是 [DruidDataSource](https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8)\n  + 创建 druid 访问[http://localhost:7777/druid/index.html](http://localhost:7777/druid/index.html)\n  \n      \n  ```  \n@SuppressWarnings(\"serial\")\n@WebServlet(urlPatterns = \"/druid/*\",  initParams = {\n                @WebInitParam(name = \"allow\", value = \"127.0.0.1\"),// IP白名单 (没有配置或者为空，则允许所有访问)\n                @WebInitParam(name = \"deny\", value = \"192.168.16.111\"),// IP黑名单 (存在共同时，deny优先于allow)\n                @WebInitParam(name = \"loginUsername\", value = \"zc\"),// 用户名\n                @WebInitParam(name = \"loginPassword\", value = \"zc\"),// 密码\n                @WebInitParam(name = \"resetEnable\", value = \"false\")// 禁用HTML页面上的“Reset All”功能\n        })\npublic class DruidStatViewServlet extends StatViewServlet {\n}\n\n  ```\n    \n   + 创建druid 过滤器\n   \n```\n   \n   @WebFilter(filterName = \"druidWebStatFilter\", urlPatterns = \"/*\",\n        initParams = {\n                @WebInitParam(name = \"exclusions\", value = \"*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*\")// 忽略资源\n        })\npublic class DruidStatFilter extends WebStatFilter {\n}\n\n```\n    \n   \n#### 4. 创建数据模型\n   创建实体类添加数据注解（@Entity）\n   SysUser.java \n   非完整代码\n \n ```\n\n @Entity\n public class SysUser extends BaseDomain {\n \n    private String id;\n    ...\n    ...\n  \n ```\n   \n   \n####  5. 创建服务层(事务，单表更新级查询)及数据访问层\n   创建数据库层接口 SysUserRepository.java 继承 JpaRepository<SysUser(当前对象),String(当前对象主键ID)>  \n    \n  ```\n   \n    public interface SysUserRepository  extends JpaRepository<SysUser,String> { }\n   \n  ```\n    \n   创建服务层类 SysUserService.java (新增修改删除查询，不用写sql)\n   \n   \n   ```\n   @Service\npublic class SysUserService {\n\n    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n\n\n    @Autowired\n    private SysUserRepository sysUserRepository;\n\n\n    public List<SysUser> findAll() {\n        return sysUserRepository.findAll();\n    }\n\n    public SysUser update(SysUser sysUser) {\n\n        if (StringUtils.isEmpty(sysUser.getId())) {\n            sysUser.setId(\"ID存在更新,否则新增\");\n        }\n\n        logger.debug(\"新增了用户\");\n        return sysUserRepository.saveAndFlush(sysUser);\n    }\n\n\n    public void delete(String id) {\n        logger.debug(\"删除了用户\");\n         sysUserRepository.delete(id);\n    }\n\n    public SysUser findOne(String id) {\n        return sysUserRepository.findOne(id);\n    }\n\n}\n  \n   ```\n   \n \n   \n     \n#### 6. 控制层调用 \n  创建SysUserController.java \n  \n  \n  \n```\n\n  \n//系统用户管理\n@RestController\n@RequestMapping(\"/api/sysUser\")\npublic class SysUserController {\n\n    @Autowired\n    SysUserService sysUserService;\n\n    @GetMapping(value = \"list\")\n    public List<SysUser> list(){\n        return sysUserService.findAll();\n    }\n\n    //获取数据\n    @GetMapping(value = \"update/{id}\")\n    public SysUser get(@PathVariable(\"id\")String id){\n        return sysUserService.findOne(id);\n    }\n\n    //新增\n    @PostMapping(value = \"update\")\n    public Object add(@RequestBody SysUser c){\n        return sysUserService.update(c);\n    }\n\n    //更新\n    @PutMapping(value = \"update\")\n    public SysUser update(@RequestBody SysUser c){\n        return sysUserService.update(c);\n    }\n\n    //删除\n    @DeleteMapping(value = \"update/{id}\")\n    public void add(@PathVariable(\"id\")String id){\n        sysUserService.delete(id);\n    }\n}\n\n  \n```\n  \n  到目前为止，我们实现了对单表的增删改查所有操作，没有写一句sql，下面我们将添加复杂sql查询，以及最终版本入门框架搭建\n\n### 后续会介绍整体架构，可以应用于项目开发\n\n\n---\n####  项目源码:[github源码地址](https://github.com/zccccccc/cici) \n---\n   \n  \n    \n     \n   \n   \n  \n  \n \n  \n  \n       \n  \n   ","published":1,"updated":"2017-03-10T02:01:14.000Z","_id":"cj028widu0003325rbaua3ln2","comments":1,"photos":[],"link":"","content":"<h2 id=\"本文为Spring-boot入门篇-老司机跳过\"><a href=\"#本文为Spring-boot入门篇-老司机跳过\" class=\"headerlink\" title=\"本文为Spring-boot入门篇,老司机跳过\"></a>本文为Spring-boot入门篇,老司机跳过</h2><ol>\n<li>服务创建</li>\n<li>RestAPI创建(配置文件)</li>\n<li>数据层（链接池）/服务层实现(事务，单表更新级查询)/整合接口服务</li>\n</ol>\n<blockquote>\n<p><strong> 知识准备。 </strong><br> spring boot 基于 maven创建，如果不熟悉请先学习<a href=\"http://www.yiibai.com/maven/\" target=\"_blank\" rel=\"external\">maven 教程</a>  </p>\n</blockquote>\n<hr>\n<h4 id=\"项目源码-github源码地址\"><a href=\"#项目源码-github源码地址\" class=\"headerlink\" title=\"项目源码:github源码地址\"></a>项目源码:<a href=\"https://github.com/zccccccc/cici\">github源码地址</a></h4><hr>\n<h3 id=\"1-创建maven-web项目-如果选择-springBoot模版创建速度非常慢，个人感觉直接创建比较简单\"><a href=\"#1-创建maven-web项目-如果选择-springBoot模版创建速度非常慢，个人感觉直接创建比较简单\" class=\"headerlink\" title=\"1.创建maven web项目 (如果选择 springBoot模版创建速度非常慢，个人感觉直接创建比较简单)\"></a>1.创建maven web项目 (如果选择 springBoot模版创建速度非常慢，个人感觉直接创建比较简单)</h3><ul>\n<li><p>创建maven web项目 (如果选择 springBoot模版创建速度非常慢，个人感觉直接创建比较)<br>修改pom.xml,添加springboot依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;parent&gt;</div><div class=\"line\">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">     &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class=\"line\">     &lt;version&gt;1.4.1.RELEASE&lt;/version&gt;</div><div class=\"line\"> &lt;/parent&gt;</div><div class=\"line\"></div><div class=\"line\"> &lt;dependencies&gt;</div><div class=\"line\"></div><div class=\"line\">     &lt;dependency&gt;</div><div class=\"line\">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class=\"line\">     &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">     &lt;dependency&gt;</div><div class=\"line\">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</div><div class=\"line\">         &lt;scope&gt;test&lt;/scope&gt;</div><div class=\"line\">     &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">     &lt;dependency&gt;</div><div class=\"line\">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</div><div class=\"line\">     &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">     &lt;dependency&gt;</div><div class=\"line\">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</div><div class=\"line\">     &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">     &lt;dependency&gt;</div><div class=\"line\">         &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</div><div class=\"line\">         &lt;version&gt;3.0&lt;/version&gt;</div><div class=\"line\">     &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">     &lt;dependency&gt;</div><div class=\"line\">         &lt;groupId&gt;com.oracle&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;ojdbc14&lt;/artifactId&gt;</div><div class=\"line\">         &lt;version&gt;10.2.0.4.0&lt;/version&gt;</div><div class=\"line\">     &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">     &lt;dependency&gt;</div><div class=\"line\">         &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;druid&lt;/artifactId&gt;</div><div class=\"line\">         &lt;version&gt;1.0.18&lt;/version&gt;</div><div class=\"line\">     &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> &lt;/dependencies&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>创建启动入口文件 运行main方法，服务搭建就OK啦</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">  @SpringBootApplication</div><div class=\"line\">public class MainApp extends WebMvcConfigurerAdapter &#123;</div><div class=\"line\"></div><div class=\"line\">    //第一种</div><div class=\"line\">    //1 cd  当前项目根目录下</div><div class=\"line\">    //1 mvn spring-boot:run</div><div class=\"line\"></div><div class=\"line\">    //第二种</div><div class=\"line\">    //2 cd  当前项目根目录下</div><div class=\"line\">    //2. mvn install</div><div class=\"line\">    //2.  cd target/</div><div class=\"line\">    //2. java -jar cici-log.jar</div><div class=\"line\"></div><div class=\"line\">    //第三种</div><div class=\"line\">    //直接运行main方法</div><div class=\"line\"></div><div class=\"line\">    //启动时候选择配置文件启动</div><div class=\"line\">    //3 application.yml application-dev.yml application-pro.yml</div><div class=\"line\">    //3. mvn install</div><div class=\"line\">    //3.  cd target/</div><div class=\"line\">    //3. java -jar cici-log.jar -spring.profies.active=pro</div><div class=\"line\"></div><div class=\"line\">    //后台启动</div><div class=\"line\">    /**</div><div class=\"line\">     *  nohup java -jar cici-log.jar &amp;</div><div class=\"line\">     *  nohup java -jar cici-log.jar  /dev/null 2&gt;&amp;1 &amp;</div><div class=\"line\">     *</div><div class=\"line\">     * */</div><div class=\"line\">    public static void main(String[] args)&#123;</div><div class=\"line\">        SpringApplication.run(MainApplation.class,args);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2-RestAPI创建\"><a href=\"#2-RestAPI创建\" class=\"headerlink\" title=\"2.RestAPI创建\"></a>2.RestAPI创建</h3><p>   创建服务接口包括post/put/get/delete<br>   创建 SysUserController.java<br>   添加注解</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">@RestController</div><div class=\"line\">@RequestMapping(&quot;/api/sysUser&quot;)</div></pre></td></tr></table></figure>\n<p>   完整服务接口代码</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">@RestController</div><div class=\"line\">@RequestMapping(&quot;/api/sysUser&quot;)</div><div class=\"line\">public class SysUserController &#123;</div><div class=\"line\"></div><div class=\"line\">    @GetMapping(value = &quot;list&quot;)</div><div class=\"line\">    public List&lt;CatUser&gt; catalog()&#123;</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //获取数据</div><div class=\"line\">    @GetMapping(value = &quot;update/&#123;id&#125;&quot;)</div><div class=\"line\">    public CatUser get(@PathVariable(&quot;id&quot;)String id)&#123;</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //新增</div><div class=\"line\">    @PostMapping(value = &quot;update&quot;)</div><div class=\"line\">    public Object add(@RequestBody Object c)&#123;</div><div class=\"line\"></div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //更新</div><div class=\"line\">    @PutMapping(value = &quot;update&quot;)</div><div class=\"line\">    public CatUser update(@RequestBody CatUser c)&#123;</div><div class=\"line\"></div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //删除</div><div class=\"line\">    @DeleteMapping(value = &quot;update/&#123;id&#125;&quot;)</div><div class=\"line\">    public void add(@PathVariable(&quot;id&quot;)String id)&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-数据层-服务层实现（事务，链接池）\"><a href=\"#3-数据层-服务层实现（事务，链接池）\" class=\"headerlink\" title=\"3. 数据层/服务层实现（事务，链接池）\"></a>3. 数据层/服务层实现（事务，链接池）</h3><p>  当我们接口服务创建完成后开始创建服务层数据层代码</p>\n<h4 id=\"1-配置文件-spring-boot-推荐使用-yml-配置，此方法少去很多冗余字段\"><a href=\"#1-配置文件-spring-boot-推荐使用-yml-配置，此方法少去很多冗余字段\" class=\"headerlink\" title=\"1. 配置文件 spring boot 推荐使用.yml 配置，此方法少去很多冗余字段\"></a>1. 配置文件 spring boot 推荐使用.yml 配置，此方法少去很多冗余字段</h4><h4 id=\"2-我们创建-application-yml\"><a href=\"#2-我们创建-application-yml\" class=\"headerlink\" title=\"2. 我们创建 application.yml\"></a>2. 我们创建 application.yml</h4> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">spring:</div><div class=\"line\">  profiles:</div><div class=\"line\">    active: dev</div><div class=\"line\">  jpa:</div><div class=\"line\">     hibernate:</div><div class=\"line\">       ddl-auto: none</div><div class=\"line\">     show-sql: true</div></pre></td></tr></table></figure>\n<ul>\n<li>spring.profiles.active: dev 读取配置文件为 application-dev.yml 的配置文件,目前用于测试环境和生   产环境配置分类 </li>\n<li><p>jpa.hibernate.ddl-auto:  会根据绑定的实体(@Entity)生成 ,建议使用 none</p>\n<pre><code>+ validate   加载hibernate时，验证创建数据库表结构\n+ create      每次加载hibernate，重新创建数据库表结构，这就是导致数据库表数据丢失的原因。\n+ create-drop  加载hibernate时创建，退出是删除表结构\n+ update        加载hibernate自动更新数据库结构\n</code></pre></li>\n<li>jpa.hibernate.show-sql: true 显示sql </li>\n</ul>\n<h4 id=\"3-创建数据库配置-application-dev-yml\"><a href=\"#3-创建数据库配置-application-dev-yml\" class=\"headerlink\" title=\"3. 创建数据库配置 application-dev.yml\"></a>3. 创建数据库配置 application-dev.yml</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">server:</div><div class=\"line\">    port: 7777</div><div class=\"line\">spring:</div><div class=\"line\">  datasource:</div><div class=\"line\">      driver-class-name: oracle.jdbc.driver.OracleDriver</div><div class=\"line\">      url: jdbc:oracle:thin:@172.25.13.98:1521:data98</div><div class=\"line\">      username: HHZY_TEST</div><div class=\"line\">      password: HHZY_TEST</div><div class=\"line\">      type: com.alibaba.druid.pool.DruidDataSource</div><div class=\"line\">      spring.datasource.initialSize: 5</div><div class=\"line\">      spring.datasource.minIdle: 5</div><div class=\"line\">      spring.datasource.maxActive: 20</div><div class=\"line\">      spring.datasource.maxWait: 60000</div><div class=\"line\">      timeBetweenEvictionRunsMillis: 60000</div><div class=\"line\">      minEvictableIdleTimeMillis: 300000</div><div class=\"line\">      validationQuery: SELECT 1 FROM DUAL</div><div class=\"line\">      testWhileIdle: true</div><div class=\"line\">      testOnBorrow: false</div><div class=\"line\">      testOnReturn: false</div><div class=\"line\">      poolPreparedStatements: true</div><div class=\"line\">      maxPoolPreparedStatementPerConnectionSize: 20</div><div class=\"line\">      filters: stat,wall,log4j</div><div class=\"line\">      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</div><div class=\"line\">      useGlobalDataSourceStat: true</div><div class=\"line\">logging.level.root: DEBUG</div><div class=\"line\">logging.level.org.springframework.web: DEBUG</div><div class=\"line\">logging.level.org.hibernate: DEBUG</div></pre></td></tr></table></figure>\n<ul>\n<li>server.port: 7777 为当前服务端口</li>\n</ul>\n<ul>\n<li>spring.datasource 数据库连接配置当前使用连接池的是 <a href=\"https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8\">DruidDataSource</a><ul>\n<li>创建 druid 访问<a href=\"http://localhost:7777/druid/index.html\" target=\"_blank\" rel=\"external\">http://localhost:7777/druid/index.html</a></li>\n</ul>\n</li>\n</ul>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">@SuppressWarnings(&quot;serial&quot;)</div><div class=\"line\">@WebServlet(urlPatterns = &quot;/druid/*&quot;,  initParams = &#123;</div><div class=\"line\">                @WebInitParam(name = &quot;allow&quot;, value = &quot;127.0.0.1&quot;),// IP白名单 (没有配置或者为空，则允许所有访问)</div><div class=\"line\">                @WebInitParam(name = &quot;deny&quot;, value = &quot;192.168.16.111&quot;),// IP黑名单 (存在共同时，deny优先于allow)</div><div class=\"line\">                @WebInitParam(name = &quot;loginUsername&quot;, value = &quot;zc&quot;),// 用户名</div><div class=\"line\">                @WebInitParam(name = &quot;loginPassword&quot;, value = &quot;zc&quot;),// 密码</div><div class=\"line\">                @WebInitParam(name = &quot;resetEnable&quot;, value = &quot;false&quot;)// 禁用HTML页面上的“Reset All”功能</div><div class=\"line\">        &#125;)</div><div class=\"line\">public class DruidStatViewServlet extends StatViewServlet &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>创建druid 过滤器</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">   </div><div class=\"line\">   @WebFilter(filterName = &quot;druidWebStatFilter&quot;, urlPatterns = &quot;/*&quot;,</div><div class=\"line\">        initParams = &#123;</div><div class=\"line\">                @WebInitParam(name = &quot;exclusions&quot;, value = &quot;*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*&quot;)// 忽略资源</div><div class=\"line\">        &#125;)</div><div class=\"line\">public class DruidStatFilter extends WebStatFilter &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-创建数据模型\"><a href=\"#4-创建数据模型\" class=\"headerlink\" title=\"4. 创建数据模型\"></a>4. 创建数据模型</h4><p>   创建实体类添加数据注解（@Entity）<br>   SysUser.java<br>   非完整代码</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@Entity</div><div class=\"line\">public class SysUser extends BaseDomain &#123;</div><div class=\"line\"></div><div class=\"line\">   private String id;</div><div class=\"line\">   ...</div><div class=\"line\">   ...</div></pre></td></tr></table></figure>\n<h4 id=\"5-创建服务层-事务，单表更新级查询-及数据访问层\"><a href=\"#5-创建服务层-事务，单表更新级查询-及数据访问层\" class=\"headerlink\" title=\"5. 创建服务层(事务，单表更新级查询)及数据访问层\"></a>5. 创建服务层(事务，单表更新级查询)及数据访问层</h4><p>   创建数据库层接口 SysUserRepository.java 继承 JpaRepository<sysuser(当前对象),string(当前对象主键id)>  </sysuser(当前对象),string(当前对象主键id)></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">   </div><div class=\"line\">public interface SysUserRepository  extends JpaRepository&lt;SysUser,String&gt; &#123; &#125;</div></pre></td></tr></table></figure>\n<p>   创建服务层类 SysUserService.java (新增修改删除查询，不用写sql)</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">   @Service</div><div class=\"line\">public class SysUserService &#123;</div><div class=\"line\"></div><div class=\"line\">    private final Logger logger = LoggerFactory.getLogger(this.getClass());</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    @Autowired</div><div class=\"line\">    private SysUserRepository sysUserRepository;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public List&lt;SysUser&gt; findAll() &#123;</div><div class=\"line\">        return sysUserRepository.findAll();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public SysUser update(SysUser sysUser) &#123;</div><div class=\"line\"></div><div class=\"line\">        if (StringUtils.isEmpty(sysUser.getId())) &#123;</div><div class=\"line\">            sysUser.setId(&quot;ID存在更新,否则新增&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        logger.debug(&quot;新增了用户&quot;);</div><div class=\"line\">        return sysUserRepository.saveAndFlush(sysUser);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public void delete(String id) &#123;</div><div class=\"line\">        logger.debug(&quot;删除了用户&quot;);</div><div class=\"line\">         sysUserRepository.delete(id);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public SysUser findOne(String id) &#123;</div><div class=\"line\">        return sysUserRepository.findOne(id);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"6-控制层调用\"><a href=\"#6-控制层调用\" class=\"headerlink\" title=\"6. 控制层调用\"></a>6. 控制层调用</h4><p>  创建SysUserController.java </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\">//系统用户管理</div><div class=\"line\">@RestController</div><div class=\"line\">@RequestMapping(&quot;/api/sysUser&quot;)</div><div class=\"line\">public class SysUserController &#123;</div><div class=\"line\"></div><div class=\"line\">    @Autowired</div><div class=\"line\">    SysUserService sysUserService;</div><div class=\"line\"></div><div class=\"line\">    @GetMapping(value = &quot;list&quot;)</div><div class=\"line\">    public List&lt;SysUser&gt; list()&#123;</div><div class=\"line\">        return sysUserService.findAll();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //获取数据</div><div class=\"line\">    @GetMapping(value = &quot;update/&#123;id&#125;&quot;)</div><div class=\"line\">    public SysUser get(@PathVariable(&quot;id&quot;)String id)&#123;</div><div class=\"line\">        return sysUserService.findOne(id);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //新增</div><div class=\"line\">    @PostMapping(value = &quot;update&quot;)</div><div class=\"line\">    public Object add(@RequestBody SysUser c)&#123;</div><div class=\"line\">        return sysUserService.update(c);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //更新</div><div class=\"line\">    @PutMapping(value = &quot;update&quot;)</div><div class=\"line\">    public SysUser update(@RequestBody SysUser c)&#123;</div><div class=\"line\">        return sysUserService.update(c);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //删除</div><div class=\"line\">    @DeleteMapping(value = &quot;update/&#123;id&#125;&quot;)</div><div class=\"line\">    public void add(@PathVariable(&quot;id&quot;)String id)&#123;</div><div class=\"line\">        sysUserService.delete(id);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  到目前为止，我们实现了对单表的增删改查所有操作，没有写一句sql，下面我们将添加复杂sql查询，以及最终版本入门框架搭建</p>\n<h3 id=\"后续会介绍整体架构，可以应用于项目开发\"><a href=\"#后续会介绍整体架构，可以应用于项目开发\" class=\"headerlink\" title=\"后续会介绍整体架构，可以应用于项目开发\"></a>后续会介绍整体架构，可以应用于项目开发</h3><hr>\n<h4 id=\"项目源码-github源码地址-1\"><a href=\"#项目源码-github源码地址-1\" class=\"headerlink\" title=\"项目源码:github源码地址\"></a>项目源码:<a href=\"https://github.com/zccccccc/cici\">github源码地址</a></h4><hr>\n","excerpt":"","more":"<h2 id=\"本文为Spring-boot入门篇-老司机跳过\"><a href=\"#本文为Spring-boot入门篇-老司机跳过\" class=\"headerlink\" title=\"本文为Spring-boot入门篇,老司机跳过\"></a>本文为Spring-boot入门篇,老司机跳过</h2><ol>\n<li>服务创建</li>\n<li>RestAPI创建(配置文件)</li>\n<li>数据层（链接池）/服务层实现(事务，单表更新级查询)/整合接口服务</li>\n</ol>\n<blockquote>\n<p><strong> 知识准备。 </strong><br> spring boot 基于 maven创建，如果不熟悉请先学习<a href=\"http://www.yiibai.com/maven/\">maven 教程</a>  </p>\n</blockquote>\n<hr>\n<h4 id=\"项目源码-github源码地址\"><a href=\"#项目源码-github源码地址\" class=\"headerlink\" title=\"项目源码:github源码地址\"></a>项目源码:<a href=\"https://github.com/zccccccc/cici\">github源码地址</a></h4><hr>\n<h3 id=\"1-创建maven-web项目-如果选择-springBoot模版创建速度非常慢，个人感觉直接创建比较简单\"><a href=\"#1-创建maven-web项目-如果选择-springBoot模版创建速度非常慢，个人感觉直接创建比较简单\" class=\"headerlink\" title=\"1.创建maven web项目 (如果选择 springBoot模版创建速度非常慢，个人感觉直接创建比较简单)\"></a>1.创建maven web项目 (如果选择 springBoot模版创建速度非常慢，个人感觉直接创建比较简单)</h3><ul>\n<li><p>创建maven web项目 (如果选择 springBoot模版创建速度非常慢，个人感觉直接创建比较)<br>修改pom.xml,添加springboot依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;parent&gt;</div><div class=\"line\">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">     &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class=\"line\">     &lt;version&gt;1.4.1.RELEASE&lt;/version&gt;</div><div class=\"line\"> &lt;/parent&gt;</div><div class=\"line\"></div><div class=\"line\"> &lt;dependencies&gt;</div><div class=\"line\"></div><div class=\"line\">     &lt;dependency&gt;</div><div class=\"line\">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class=\"line\">     &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">     &lt;dependency&gt;</div><div class=\"line\">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</div><div class=\"line\">         &lt;scope&gt;test&lt;/scope&gt;</div><div class=\"line\">     &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">     &lt;dependency&gt;</div><div class=\"line\">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</div><div class=\"line\">     &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">     &lt;dependency&gt;</div><div class=\"line\">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</div><div class=\"line\">     &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">     &lt;dependency&gt;</div><div class=\"line\">         &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</div><div class=\"line\">         &lt;version&gt;3.0&lt;/version&gt;</div><div class=\"line\">     &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">     &lt;dependency&gt;</div><div class=\"line\">         &lt;groupId&gt;com.oracle&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;ojdbc14&lt;/artifactId&gt;</div><div class=\"line\">         &lt;version&gt;10.2.0.4.0&lt;/version&gt;</div><div class=\"line\">     &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">     &lt;dependency&gt;</div><div class=\"line\">         &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;druid&lt;/artifactId&gt;</div><div class=\"line\">         &lt;version&gt;1.0.18&lt;/version&gt;</div><div class=\"line\">     &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> &lt;/dependencies&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>创建启动入口文件 运行main方法，服务搭建就OK啦</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">  @SpringBootApplication</div><div class=\"line\">public class MainApp extends WebMvcConfigurerAdapter &#123;</div><div class=\"line\"></div><div class=\"line\">    //第一种</div><div class=\"line\">    //1 cd  当前项目根目录下</div><div class=\"line\">    //1 mvn spring-boot:run</div><div class=\"line\"></div><div class=\"line\">    //第二种</div><div class=\"line\">    //2 cd  当前项目根目录下</div><div class=\"line\">    //2. mvn install</div><div class=\"line\">    //2.  cd target/</div><div class=\"line\">    //2. java -jar cici-log.jar</div><div class=\"line\"></div><div class=\"line\">    //第三种</div><div class=\"line\">    //直接运行main方法</div><div class=\"line\"></div><div class=\"line\">    //启动时候选择配置文件启动</div><div class=\"line\">    //3 application.yml application-dev.yml application-pro.yml</div><div class=\"line\">    //3. mvn install</div><div class=\"line\">    //3.  cd target/</div><div class=\"line\">    //3. java -jar cici-log.jar -spring.profies.active=pro</div><div class=\"line\"></div><div class=\"line\">    //后台启动</div><div class=\"line\">    /**</div><div class=\"line\">     *  nohup java -jar cici-log.jar &amp;</div><div class=\"line\">     *  nohup java -jar cici-log.jar  /dev/null 2&gt;&amp;1 &amp;</div><div class=\"line\">     *</div><div class=\"line\">     * */</div><div class=\"line\">    public static void main(String[] args)&#123;</div><div class=\"line\">        SpringApplication.run(MainApplation.class,args);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2-RestAPI创建\"><a href=\"#2-RestAPI创建\" class=\"headerlink\" title=\"2.RestAPI创建\"></a>2.RestAPI创建</h3><p>   创建服务接口包括post/put/get/delete<br>   创建 SysUserController.java<br>   添加注解</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">@RestController</div><div class=\"line\">@RequestMapping(&quot;/api/sysUser&quot;)</div></pre></td></tr></table></figure>\n<p>   完整服务接口代码</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">@RestController</div><div class=\"line\">@RequestMapping(&quot;/api/sysUser&quot;)</div><div class=\"line\">public class SysUserController &#123;</div><div class=\"line\"></div><div class=\"line\">    @GetMapping(value = &quot;list&quot;)</div><div class=\"line\">    public List&lt;CatUser&gt; catalog()&#123;</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //获取数据</div><div class=\"line\">    @GetMapping(value = &quot;update/&#123;id&#125;&quot;)</div><div class=\"line\">    public CatUser get(@PathVariable(&quot;id&quot;)String id)&#123;</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //新增</div><div class=\"line\">    @PostMapping(value = &quot;update&quot;)</div><div class=\"line\">    public Object add(@RequestBody Object c)&#123;</div><div class=\"line\"></div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //更新</div><div class=\"line\">    @PutMapping(value = &quot;update&quot;)</div><div class=\"line\">    public CatUser update(@RequestBody CatUser c)&#123;</div><div class=\"line\"></div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //删除</div><div class=\"line\">    @DeleteMapping(value = &quot;update/&#123;id&#125;&quot;)</div><div class=\"line\">    public void add(@PathVariable(&quot;id&quot;)String id)&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-数据层-服务层实现（事务，链接池）\"><a href=\"#3-数据层-服务层实现（事务，链接池）\" class=\"headerlink\" title=\"3. 数据层/服务层实现（事务，链接池）\"></a>3. 数据层/服务层实现（事务，链接池）</h3><p>  当我们接口服务创建完成后开始创建服务层数据层代码</p>\n<h4 id=\"1-配置文件-spring-boot-推荐使用-yml-配置，此方法少去很多冗余字段\"><a href=\"#1-配置文件-spring-boot-推荐使用-yml-配置，此方法少去很多冗余字段\" class=\"headerlink\" title=\"1. 配置文件 spring boot 推荐使用.yml 配置，此方法少去很多冗余字段\"></a>1. 配置文件 spring boot 推荐使用.yml 配置，此方法少去很多冗余字段</h4><h4 id=\"2-我们创建-application-yml\"><a href=\"#2-我们创建-application-yml\" class=\"headerlink\" title=\"2. 我们创建 application.yml\"></a>2. 我们创建 application.yml</h4> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">spring:</div><div class=\"line\">  profiles:</div><div class=\"line\">    active: dev</div><div class=\"line\">  jpa:</div><div class=\"line\">     hibernate:</div><div class=\"line\">       ddl-auto: none</div><div class=\"line\">     show-sql: true</div></pre></td></tr></table></figure>\n<ul>\n<li>spring.profiles.active: dev 读取配置文件为 application-dev.yml 的配置文件,目前用于测试环境和生   产环境配置分类 </li>\n<li><p>jpa.hibernate.ddl-auto:  会根据绑定的实体(@Entity)生成 ,建议使用 none</p>\n<pre><code>+ validate   加载hibernate时，验证创建数据库表结构\n+ create      每次加载hibernate，重新创建数据库表结构，这就是导致数据库表数据丢失的原因。\n+ create-drop  加载hibernate时创建，退出是删除表结构\n+ update        加载hibernate自动更新数据库结构\n</code></pre></li>\n<li>jpa.hibernate.show-sql: true 显示sql </li>\n</ul>\n<h4 id=\"3-创建数据库配置-application-dev-yml\"><a href=\"#3-创建数据库配置-application-dev-yml\" class=\"headerlink\" title=\"3. 创建数据库配置 application-dev.yml\"></a>3. 创建数据库配置 application-dev.yml</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">server:</div><div class=\"line\">    port: 7777</div><div class=\"line\">spring:</div><div class=\"line\">  datasource:</div><div class=\"line\">      driver-class-name: oracle.jdbc.driver.OracleDriver</div><div class=\"line\">      url: jdbc:oracle:thin:@172.25.13.98:1521:data98</div><div class=\"line\">      username: HHZY_TEST</div><div class=\"line\">      password: HHZY_TEST</div><div class=\"line\">      type: com.alibaba.druid.pool.DruidDataSource</div><div class=\"line\">      spring.datasource.initialSize: 5</div><div class=\"line\">      spring.datasource.minIdle: 5</div><div class=\"line\">      spring.datasource.maxActive: 20</div><div class=\"line\">      spring.datasource.maxWait: 60000</div><div class=\"line\">      timeBetweenEvictionRunsMillis: 60000</div><div class=\"line\">      minEvictableIdleTimeMillis: 300000</div><div class=\"line\">      validationQuery: SELECT 1 FROM DUAL</div><div class=\"line\">      testWhileIdle: true</div><div class=\"line\">      testOnBorrow: false</div><div class=\"line\">      testOnReturn: false</div><div class=\"line\">      poolPreparedStatements: true</div><div class=\"line\">      maxPoolPreparedStatementPerConnectionSize: 20</div><div class=\"line\">      filters: stat,wall,log4j</div><div class=\"line\">      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</div><div class=\"line\">      useGlobalDataSourceStat: true</div><div class=\"line\">logging.level.root: DEBUG</div><div class=\"line\">logging.level.org.springframework.web: DEBUG</div><div class=\"line\">logging.level.org.hibernate: DEBUG</div></pre></td></tr></table></figure>\n<ul>\n<li>server.port: 7777 为当前服务端口</li>\n</ul>\n<ul>\n<li>spring.datasource 数据库连接配置当前使用连接池的是 <a href=\"https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8\">DruidDataSource</a><ul>\n<li>创建 druid 访问<a href=\"http://localhost:7777/druid/index.html\">http://localhost:7777/druid/index.html</a></li>\n</ul>\n</li>\n</ul>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">@SuppressWarnings(&quot;serial&quot;)</div><div class=\"line\">@WebServlet(urlPatterns = &quot;/druid/*&quot;,  initParams = &#123;</div><div class=\"line\">                @WebInitParam(name = &quot;allow&quot;, value = &quot;127.0.0.1&quot;),// IP白名单 (没有配置或者为空，则允许所有访问)</div><div class=\"line\">                @WebInitParam(name = &quot;deny&quot;, value = &quot;192.168.16.111&quot;),// IP黑名单 (存在共同时，deny优先于allow)</div><div class=\"line\">                @WebInitParam(name = &quot;loginUsername&quot;, value = &quot;zc&quot;),// 用户名</div><div class=\"line\">                @WebInitParam(name = &quot;loginPassword&quot;, value = &quot;zc&quot;),// 密码</div><div class=\"line\">                @WebInitParam(name = &quot;resetEnable&quot;, value = &quot;false&quot;)// 禁用HTML页面上的“Reset All”功能</div><div class=\"line\">        &#125;)</div><div class=\"line\">public class DruidStatViewServlet extends StatViewServlet &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>创建druid 过滤器</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">   </div><div class=\"line\">   @WebFilter(filterName = &quot;druidWebStatFilter&quot;, urlPatterns = &quot;/*&quot;,</div><div class=\"line\">        initParams = &#123;</div><div class=\"line\">                @WebInitParam(name = &quot;exclusions&quot;, value = &quot;*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*&quot;)// 忽略资源</div><div class=\"line\">        &#125;)</div><div class=\"line\">public class DruidStatFilter extends WebStatFilter &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-创建数据模型\"><a href=\"#4-创建数据模型\" class=\"headerlink\" title=\"4. 创建数据模型\"></a>4. 创建数据模型</h4><p>   创建实体类添加数据注解（@Entity）<br>   SysUser.java<br>   非完整代码</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@Entity</div><div class=\"line\">public class SysUser extends BaseDomain &#123;</div><div class=\"line\"></div><div class=\"line\">   private String id;</div><div class=\"line\">   ...</div><div class=\"line\">   ...</div></pre></td></tr></table></figure>\n<h4 id=\"5-创建服务层-事务，单表更新级查询-及数据访问层\"><a href=\"#5-创建服务层-事务，单表更新级查询-及数据访问层\" class=\"headerlink\" title=\"5. 创建服务层(事务，单表更新级查询)及数据访问层\"></a>5. 创建服务层(事务，单表更新级查询)及数据访问层</h4><p>   创建数据库层接口 SysUserRepository.java 继承 JpaRepository<SysUser(当前对象),String(当前对象主键ID)>  </p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">   </div><div class=\"line\">public interface SysUserRepository  extends JpaRepository&lt;SysUser,String&gt; &#123; &#125;</div></pre></td></tr></table></figure>\n<p>   创建服务层类 SysUserService.java (新增修改删除查询，不用写sql)</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">   @Service</div><div class=\"line\">public class SysUserService &#123;</div><div class=\"line\"></div><div class=\"line\">    private final Logger logger = LoggerFactory.getLogger(this.getClass());</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    @Autowired</div><div class=\"line\">    private SysUserRepository sysUserRepository;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public List&lt;SysUser&gt; findAll() &#123;</div><div class=\"line\">        return sysUserRepository.findAll();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public SysUser update(SysUser sysUser) &#123;</div><div class=\"line\"></div><div class=\"line\">        if (StringUtils.isEmpty(sysUser.getId())) &#123;</div><div class=\"line\">            sysUser.setId(&quot;ID存在更新,否则新增&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        logger.debug(&quot;新增了用户&quot;);</div><div class=\"line\">        return sysUserRepository.saveAndFlush(sysUser);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public void delete(String id) &#123;</div><div class=\"line\">        logger.debug(&quot;删除了用户&quot;);</div><div class=\"line\">         sysUserRepository.delete(id);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public SysUser findOne(String id) &#123;</div><div class=\"line\">        return sysUserRepository.findOne(id);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"6-控制层调用\"><a href=\"#6-控制层调用\" class=\"headerlink\" title=\"6. 控制层调用\"></a>6. 控制层调用</h4><p>  创建SysUserController.java </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\">//系统用户管理</div><div class=\"line\">@RestController</div><div class=\"line\">@RequestMapping(&quot;/api/sysUser&quot;)</div><div class=\"line\">public class SysUserController &#123;</div><div class=\"line\"></div><div class=\"line\">    @Autowired</div><div class=\"line\">    SysUserService sysUserService;</div><div class=\"line\"></div><div class=\"line\">    @GetMapping(value = &quot;list&quot;)</div><div class=\"line\">    public List&lt;SysUser&gt; list()&#123;</div><div class=\"line\">        return sysUserService.findAll();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //获取数据</div><div class=\"line\">    @GetMapping(value = &quot;update/&#123;id&#125;&quot;)</div><div class=\"line\">    public SysUser get(@PathVariable(&quot;id&quot;)String id)&#123;</div><div class=\"line\">        return sysUserService.findOne(id);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //新增</div><div class=\"line\">    @PostMapping(value = &quot;update&quot;)</div><div class=\"line\">    public Object add(@RequestBody SysUser c)&#123;</div><div class=\"line\">        return sysUserService.update(c);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //更新</div><div class=\"line\">    @PutMapping(value = &quot;update&quot;)</div><div class=\"line\">    public SysUser update(@RequestBody SysUser c)&#123;</div><div class=\"line\">        return sysUserService.update(c);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //删除</div><div class=\"line\">    @DeleteMapping(value = &quot;update/&#123;id&#125;&quot;)</div><div class=\"line\">    public void add(@PathVariable(&quot;id&quot;)String id)&#123;</div><div class=\"line\">        sysUserService.delete(id);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  到目前为止，我们实现了对单表的增删改查所有操作，没有写一句sql，下面我们将添加复杂sql查询，以及最终版本入门框架搭建</p>\n<h3 id=\"后续会介绍整体架构，可以应用于项目开发\"><a href=\"#后续会介绍整体架构，可以应用于项目开发\" class=\"headerlink\" title=\"后续会介绍整体架构，可以应用于项目开发\"></a>后续会介绍整体架构，可以应用于项目开发</h3><hr>\n<h4 id=\"项目源码-github源码地址-1\"><a href=\"#项目源码-github源码地址-1\" class=\"headerlink\" title=\"项目源码:github源码地址\"></a>项目源码:<a href=\"https://github.com/zccccccc/cici\">github源码地址</a></h4><hr>\n"},{"title":"crontab 定时任务","date":"2017-02-13T06:43:34.000Z","layout":"crontab","slug":"crontab-定时任务","_content":"\n1 检查  crontab -l 是否安装\n \n 检查crond服务是否启动 service crond status\n\n 安装cron\n \n`\nyum install vixie-cron\n`\n\n`\nyum install crontabs\n`\n\n2.开始\ncrontab -e\n测试每分钟打印到文件中\n*/1 * * * * date >> /tmp/log.txt\n\n`\ncrontab -l  可以查看crontab 任务\n`\n\n查看日志\n\n`\n/var/mail\n`\n\n开机执行\n`\n@reboot 执行 xx.sh\n`\n\n或者\n\n`\nvim /etc/re.d/re.locate 执行  xx.sh\n`\n\n >\n*/1 * * * * date >> /tmp/log.txt\n* * * * * COMMAND\n分钟0–59  小时 0-23 日期 1-31 月份 1-12 星期 0-7\n\n每晚 21:30 重启服务\n30 21 * * *\n\n每月1 ，10 22 日 4:45 重启\n45 4 1,10,22 * *\n\n每月1到10日 4:45  重启\n45 4 1-10 * *\n\n每2分钟 重启\n*/2 * * * *\n\n1-59/2 * * * *\n\n晚上11点到 早7点 每隔一小时重启\n0 23-7/1 * * *\n\n每天 18:00 - 23:00 每30分钟\n0,30 18-23 * * *\n0-59/30 18-23 * * *\n >","source":"_posts/crontab-定时任务.md","raw":"---\ntitle: crontab 定时任务\ndate: 2017-02-13 14:43:34\ntags: linux\nlayout: crontab\nslug: linux-crontab\n---\n\n1 检查  crontab -l 是否安装\n \n 检查crond服务是否启动 service crond status\n\n 安装cron\n \n`\nyum install vixie-cron\n`\n\n`\nyum install crontabs\n`\n\n2.开始\ncrontab -e\n测试每分钟打印到文件中\n*/1 * * * * date >> /tmp/log.txt\n\n`\ncrontab -l  可以查看crontab 任务\n`\n\n查看日志\n\n`\n/var/mail\n`\n\n开机执行\n`\n@reboot 执行 xx.sh\n`\n\n或者\n\n`\nvim /etc/re.d/re.locate 执行  xx.sh\n`\n\n >\n*/1 * * * * date >> /tmp/log.txt\n* * * * * COMMAND\n分钟0–59  小时 0-23 日期 1-31 月份 1-12 星期 0-7\n\n每晚 21:30 重启服务\n30 21 * * *\n\n每月1 ，10 22 日 4:45 重启\n45 4 1,10,22 * *\n\n每月1到10日 4:45  重启\n45 4 1-10 * *\n\n每2分钟 重启\n*/2 * * * *\n\n1-59/2 * * * *\n\n晚上11点到 早7点 每隔一小时重启\n0 23-7/1 * * *\n\n每天 18:00 - 23:00 每30分钟\n0,30 18-23 * * *\n0-59/30 18-23 * * *\n >","published":1,"updated":"2017-02-13T06:48:53.000Z","comments":1,"photos":[],"link":"","_id":"cj028widv0004325r6c4hav05","content":"<p>1 检查  crontab -l 是否安装</p>\n<p> 检查crond服务是否启动 service crond status</p>\n<p> 安装cron</p>\n<p><code>yum install vixie-cron</code></p>\n<p><code>yum install crontabs</code></p>\n<p>2.开始<br>crontab -e<br>测试每分钟打印到文件中<br><em>/1 </em> <em> </em> * date &gt;&gt; /tmp/log.txt</p>\n<p><code>crontab -l  可以查看crontab 任务</code></p>\n<p>查看日志</p>\n<p><code>/var/mail</code></p>\n<p>开机执行<br><code>@reboot 执行 xx.sh</code></p>\n<p>或者</p>\n<p><code>vim /etc/re.d/re.locate 执行  xx.sh</code></p>\n<p> &gt;<br><em>/1 </em> <em> </em> * date &gt;&gt; /tmp/log.txt</p>\n<ul>\n<li><ul>\n<li><ul>\n<li><ul>\n<li><ul>\n<li>COMMAND<br>分钟0–59  小时 0-23 日期 1-31 月份 1-12 星期 0-7</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>每晚 21:30 重启服务<br>30 21 <em> </em> *</p>\n<p>每月1 ，10 22 日 4:45 重启<br>45 4 1,10,22 <em> </em></p>\n<p>每月1到10日 4:45  重启<br>45 4 1-10 <em> </em></p>\n<p>每2分钟 重启<br><em>/2 </em> <em> </em> *</p>\n<p>1-59/2 <em> </em> <em> </em></p>\n<p>晚上11点到 早7点 每隔一小时重启<br>0 23-7/1 <em> </em> *</p>\n<p>每天 18:00 - 23:00 每30分钟<br>0,30 18-23 <em> </em> <em><br>0-59/30 18-23 </em> <em> </em><br> &gt;</p>\n","excerpt":"","more":"<p>1 检查  crontab -l 是否安装</p>\n<p> 检查crond服务是否启动 service crond status</p>\n<p> 安装cron</p>\n<p><code>yum install vixie-cron</code></p>\n<p><code>yum install crontabs</code></p>\n<p>2.开始<br>crontab -e<br>测试每分钟打印到文件中<br><em>/1 </em> <em> </em> * date &gt;&gt; /tmp/log.txt</p>\n<p><code>crontab -l  可以查看crontab 任务</code></p>\n<p>查看日志</p>\n<p><code>/var/mail</code></p>\n<p>开机执行<br><code>@reboot 执行 xx.sh</code></p>\n<p>或者</p>\n<p><code>vim /etc/re.d/re.locate 执行  xx.sh</code></p>\n<p> &gt;<br><em>/1 </em> <em> </em> * date &gt;&gt; /tmp/log.txt</p>\n<ul>\n<li><ul>\n<li><ul>\n<li><ul>\n<li><ul>\n<li>COMMAND<br>分钟0–59  小时 0-23 日期 1-31 月份 1-12 星期 0-7</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>每晚 21:30 重启服务<br>30 21 <em> </em> *</p>\n<p>每月1 ，10 22 日 4:45 重启<br>45 4 1,10,22 <em> </em></p>\n<p>每月1到10日 4:45  重启<br>45 4 1-10 <em> </em></p>\n<p>每2分钟 重启<br><em>/2 </em> <em> </em> *</p>\n<p>1-59/2 <em> </em> <em> </em></p>\n<p>晚上11点到 早7点 每隔一小时重启<br>0 23-7/1 <em> </em> *</p>\n<p>每天 18:00 - 23:00 每30分钟<br>0,30 18-23 <em> </em> <em><br>0-59/30 18-23 </em> <em> </em><br> &gt;</p>\n"},{"title":"适合多层级调转,各种子模块引用返回保留上一次查询记录","date":"2017-02-10T08:25:34.000Z","layout":"cache","slug":"适合多层级调转-各种子模块引用返回保留上一次查询记录","_content":"用于使用web系统中查询\n\n\n \n[源码下载com.pagecache.zip](http://ol5i7ltje.bkt.clouddn.com/data/git/packagecachecom.pagecache.zip)\n\n基于Spring APO 环绕通知实现\n\n1.添加配置文件\naction-servlet.xml 最后添加\n\n<import resource=\"spring-aop-settings.xml\"/>\nspring-aop-settings.xml  \n\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\nxsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd\">\n<aop:aspectj-autoproxy proxy-target-class=\"true\" />\n</beans>\n```\n\n\n2.修改代码(CacheAspectAdvice.java)\n第28行 指定切入点控制层\n\n```\n   @Pointcut(\"execution(* com.*.web.*.*(..))\")\n    public void CacheAspectAdvice() {\n    }\n    ```\n\n3.加入注解\n在自定控制层入口,加入需要记忆和恢复的注解(@FieldCache)\n\n```\n @RequestMapping(value = \"/list.do\")\n public ModelAndView list(HttpServletRequest request,@FieldCache SearchEntity domain){\n            ModelAndView modelAndView=new ModelAndView();\n            modelAndView.setViewName(\"list\");\n            return  modelAndView;\n  }\n```\n\n查询数据模型中,默认只会处理 String,Integer 两种类型\n如果不需要记录属性上方加入 @FieldTransient\n\n```\n//这是个栗了\npublic class SearchEntity extends BaseInput {\n    @FieldTransient\n    private String searchName;\n    public String get/set...\n}\n```\n\n如果其他引用对象里面也要加入记录和恢复(@FieldCache)\n\n```\n//父类同样回记录,回迭代最终Object\npublic class SearchEntity extends BaseInput {\n    @FieldTransient\n    private String searchName;\n    @FieldCache\n    private Page page;\n    public String getSearchName...\n   public String getPage...\n}\n```\n\n说明 \n1.从菜单进入需要加参数,会执行清空已经记录查询条件(pagCatchClean) 如:http://xxx/xxx.do?pagCatchClean\n\n2.默认情况下 post 的请求记录,get 请求清空,如果post 情况下 也好恢复记录不记录 加参数(pageRecover) 如:http://xxx/xxx.do?pageRecover\n\n3.缓存默认使用的本地,如果需要系统是负载(非hash)模式,需要 实现SearchObjectCache.java接口,存放到共享存储中(redis,mongodb....),\nSearchObjectCacheManager.java 缓存管理类实现好后 修改 其SearchObjectCache引用即可\n\nObjectCache.java 第34行开始\n\n```\n\n   /**\n     * 清空缓存标记\n     * 在浏览器地址加入\n     * http://xxx/xxx.do?pagCatchClean\n     **/\n    public static String pagCatchClean = \"pageCacheClean\";\n    public static String pagRecover = \"pageRecover\";\n    Logger logger = Logger.getLogger(ObjectCache.class.getName());\n public void cacheManager(HttpServletRequest request, Object o) {\n        String sessionId = request.getSession().getId();\n        String uri = request.getRequestURI();\n        if (null == uri || uri.equals(\"\")) {\n            return;\n        }\n        if (uri.indexOf(\"?\") > 0) {\n            uri = uri.substring(0, uri.indexOf(\"?\"));\n        }\n        String cacheKey = uri.concat(sessionId);\n        boolean isClean = request.getParameter(pagCatchClean) == null ? false : true;\n        //空清空缓存\n        if (isClean) {\n            SearainbowCacheManager.del(cacheKey);\n            logger.info(\"清空缓存 key==> \" + cacheKey);\n            return;\n        }\n        //post 查询 存储查询条件\n         if(request.getMethod().toUpperCase().equals(\"POST\") &&  null == request.getParameter(pagRecover)){\n             cache(sessionId, uri, isClean, o);\n         }else {\n             //get 或是其他 还原查询条件\n             recover(sessionId, uri, o);\n         }\n    }\n```\n ","source":"_posts/适合多层级调转-各种子模块引用返回保留上一次查询记录.md","raw":"---\ntitle: '适合多层级调转,各种子模块引用返回保留上一次查询记录'\ndate: 2017-02-10 16:25:34\ntags: java\nlayout: cache\nslug: pagecache\n---\n用于使用web系统中查询\n\n\n \n[源码下载com.pagecache.zip](http://ol5i7ltje.bkt.clouddn.com/data/git/packagecachecom.pagecache.zip)\n\n基于Spring APO 环绕通知实现\n\n1.添加配置文件\naction-servlet.xml 最后添加\n\n<import resource=\"spring-aop-settings.xml\"/>\nspring-aop-settings.xml  \n\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\nxsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd\">\n<aop:aspectj-autoproxy proxy-target-class=\"true\" />\n</beans>\n```\n\n\n2.修改代码(CacheAspectAdvice.java)\n第28行 指定切入点控制层\n\n```\n   @Pointcut(\"execution(* com.*.web.*.*(..))\")\n    public void CacheAspectAdvice() {\n    }\n    ```\n\n3.加入注解\n在自定控制层入口,加入需要记忆和恢复的注解(@FieldCache)\n\n```\n @RequestMapping(value = \"/list.do\")\n public ModelAndView list(HttpServletRequest request,@FieldCache SearchEntity domain){\n            ModelAndView modelAndView=new ModelAndView();\n            modelAndView.setViewName(\"list\");\n            return  modelAndView;\n  }\n```\n\n查询数据模型中,默认只会处理 String,Integer 两种类型\n如果不需要记录属性上方加入 @FieldTransient\n\n```\n//这是个栗了\npublic class SearchEntity extends BaseInput {\n    @FieldTransient\n    private String searchName;\n    public String get/set...\n}\n```\n\n如果其他引用对象里面也要加入记录和恢复(@FieldCache)\n\n```\n//父类同样回记录,回迭代最终Object\npublic class SearchEntity extends BaseInput {\n    @FieldTransient\n    private String searchName;\n    @FieldCache\n    private Page page;\n    public String getSearchName...\n   public String getPage...\n}\n```\n\n说明 \n1.从菜单进入需要加参数,会执行清空已经记录查询条件(pagCatchClean) 如:http://xxx/xxx.do?pagCatchClean\n\n2.默认情况下 post 的请求记录,get 请求清空,如果post 情况下 也好恢复记录不记录 加参数(pageRecover) 如:http://xxx/xxx.do?pageRecover\n\n3.缓存默认使用的本地,如果需要系统是负载(非hash)模式,需要 实现SearchObjectCache.java接口,存放到共享存储中(redis,mongodb....),\nSearchObjectCacheManager.java 缓存管理类实现好后 修改 其SearchObjectCache引用即可\n\nObjectCache.java 第34行开始\n\n```\n\n   /**\n     * 清空缓存标记\n     * 在浏览器地址加入\n     * http://xxx/xxx.do?pagCatchClean\n     **/\n    public static String pagCatchClean = \"pageCacheClean\";\n    public static String pagRecover = \"pageRecover\";\n    Logger logger = Logger.getLogger(ObjectCache.class.getName());\n public void cacheManager(HttpServletRequest request, Object o) {\n        String sessionId = request.getSession().getId();\n        String uri = request.getRequestURI();\n        if (null == uri || uri.equals(\"\")) {\n            return;\n        }\n        if (uri.indexOf(\"?\") > 0) {\n            uri = uri.substring(0, uri.indexOf(\"?\"));\n        }\n        String cacheKey = uri.concat(sessionId);\n        boolean isClean = request.getParameter(pagCatchClean) == null ? false : true;\n        //空清空缓存\n        if (isClean) {\n            SearainbowCacheManager.del(cacheKey);\n            logger.info(\"清空缓存 key==> \" + cacheKey);\n            return;\n        }\n        //post 查询 存储查询条件\n         if(request.getMethod().toUpperCase().equals(\"POST\") &&  null == request.getParameter(pagRecover)){\n             cache(sessionId, uri, isClean, o);\n         }else {\n             //get 或是其他 还原查询条件\n             recover(sessionId, uri, o);\n         }\n    }\n```\n ","published":1,"updated":"2017-02-13T06:05:44.000Z","comments":1,"photos":[],"link":"","_id":"cj028widx0005325rp2l2vanr","content":"<p>用于使用web系统中查询</p>\n<p><a href=\"http://ol5i7ltje.bkt.clouddn.com/data/git/packagecachecom.pagecache.zip\" target=\"_blank\" rel=\"external\">源码下载com.pagecache.zip</a></p>\n<p>基于Spring APO 环绕通知实现</p>\n<p>1.添加配置文件<br>action-servlet.xml 最后添加</p>\n<p><import resource=\"spring-aop-settings.xml\"><br>spring-aop-settings.xml  </import></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class=\"line\">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class=\"line\">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;</div><div class=\"line\">&lt;aop:aspectj-autoproxy proxy-target-class=&quot;true&quot; /&gt;</div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure>\n<p>2.修改代码(CacheAspectAdvice.java)<br>第28行 指定切入点控制层</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Pointcut(&quot;execution(* com.*.web.*.*(..))&quot;)</div><div class=\"line\"> public void CacheAspectAdvice() &#123;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>3.加入注解<br>在自定控制层入口,加入需要记忆和恢复的注解(@FieldCache)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">@RequestMapping(value = &quot;/list.do&quot;)</div><div class=\"line\">public ModelAndView list(HttpServletRequest request,@FieldCache SearchEntity domain)&#123;</div><div class=\"line\">           ModelAndView modelAndView=new ModelAndView();</div><div class=\"line\">           modelAndView.setViewName(&quot;list&quot;);</div><div class=\"line\">           return  modelAndView;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>查询数据模型中,默认只会处理 String,Integer 两种类型<br>如果不需要记录属性上方加入 @FieldTransient</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//这是个栗了</div><div class=\"line\">public class SearchEntity extends BaseInput &#123;</div><div class=\"line\">    @FieldTransient</div><div class=\"line\">    private String searchName;</div><div class=\"line\">    public String get/set...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果其他引用对象里面也要加入记录和恢复(@FieldCache)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//父类同样回记录,回迭代最终Object</div><div class=\"line\">public class SearchEntity extends BaseInput &#123;</div><div class=\"line\">    @FieldTransient</div><div class=\"line\">    private String searchName;</div><div class=\"line\">    @FieldCache</div><div class=\"line\">    private Page page;</div><div class=\"line\">    public String getSearchName...</div><div class=\"line\">   public String getPage...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>说明<br>1.从菜单进入需要加参数,会执行清空已经记录查询条件(pagCatchClean) 如:<a href=\"http://xxx/xxx.do?pagCatchClean\" target=\"_blank\" rel=\"external\">http://xxx/xxx.do?pagCatchClean</a></p>\n<p>2.默认情况下 post 的请求记录,get 请求清空,如果post 情况下 也好恢复记录不记录 加参数(pageRecover) 如:<a href=\"http://xxx/xxx.do?pageRecover\" target=\"_blank\" rel=\"external\">http://xxx/xxx.do?pageRecover</a></p>\n<p>3.缓存默认使用的本地,如果需要系统是负载(非hash)模式,需要 实现SearchObjectCache.java接口,存放到共享存储中(redis,mongodb….),<br>SearchObjectCacheManager.java 缓存管理类实现好后 修改 其SearchObjectCache引用即可</p>\n<p>ObjectCache.java 第34行开始</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">    * 清空缓存标记</div><div class=\"line\">    * 在浏览器地址加入</div><div class=\"line\">    * http://xxx/xxx.do?pagCatchClean</div><div class=\"line\">    **/</div><div class=\"line\">   public static String pagCatchClean = &quot;pageCacheClean&quot;;</div><div class=\"line\">   public static String pagRecover = &quot;pageRecover&quot;;</div><div class=\"line\">   Logger logger = Logger.getLogger(ObjectCache.class.getName());</div><div class=\"line\">public void cacheManager(HttpServletRequest request, Object o) &#123;</div><div class=\"line\">       String sessionId = request.getSession().getId();</div><div class=\"line\">       String uri = request.getRequestURI();</div><div class=\"line\">       if (null == uri || uri.equals(&quot;&quot;)) &#123;</div><div class=\"line\">           return;</div><div class=\"line\">       &#125;</div><div class=\"line\">       if (uri.indexOf(&quot;?&quot;) &gt; 0) &#123;</div><div class=\"line\">           uri = uri.substring(0, uri.indexOf(&quot;?&quot;));</div><div class=\"line\">       &#125;</div><div class=\"line\">       String cacheKey = uri.concat(sessionId);</div><div class=\"line\">       boolean isClean = request.getParameter(pagCatchClean) == null ? false : true;</div><div class=\"line\">       //空清空缓存</div><div class=\"line\">       if (isClean) &#123;</div><div class=\"line\">           SearainbowCacheManager.del(cacheKey);</div><div class=\"line\">           logger.info(&quot;清空缓存 key==&gt; &quot; + cacheKey);</div><div class=\"line\">           return;</div><div class=\"line\">       &#125;</div><div class=\"line\">       //post 查询 存储查询条件</div><div class=\"line\">        if(request.getMethod().toUpperCase().equals(&quot;POST&quot;) &amp;&amp;  null == request.getParameter(pagRecover))&#123;</div><div class=\"line\">            cache(sessionId, uri, isClean, o);</div><div class=\"line\">        &#125;else &#123;</div><div class=\"line\">            //get 或是其他 还原查询条件</div><div class=\"line\">            recover(sessionId, uri, o);</div><div class=\"line\">        &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>用于使用web系统中查询</p>\n<p><a href=\"http://ol5i7ltje.bkt.clouddn.com/data/git/packagecachecom.pagecache.zip\">源码下载com.pagecache.zip</a></p>\n<p>基于Spring APO 环绕通知实现</p>\n<p>1.添加配置文件<br>action-servlet.xml 最后添加</p>\n<p><import resource=\"spring-aop-settings.xml\"/><br>spring-aop-settings.xml  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class=\"line\">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class=\"line\">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;</div><div class=\"line\">&lt;aop:aspectj-autoproxy proxy-target-class=&quot;true&quot; /&gt;</div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure>\n<p>2.修改代码(CacheAspectAdvice.java)<br>第28行 指定切入点控制层</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Pointcut(&quot;execution(* com.*.web.*.*(..))&quot;)</div><div class=\"line\"> public void CacheAspectAdvice() &#123;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>3.加入注解<br>在自定控制层入口,加入需要记忆和恢复的注解(@FieldCache)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">@RequestMapping(value = &quot;/list.do&quot;)</div><div class=\"line\">public ModelAndView list(HttpServletRequest request,@FieldCache SearchEntity domain)&#123;</div><div class=\"line\">           ModelAndView modelAndView=new ModelAndView();</div><div class=\"line\">           modelAndView.setViewName(&quot;list&quot;);</div><div class=\"line\">           return  modelAndView;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>查询数据模型中,默认只会处理 String,Integer 两种类型<br>如果不需要记录属性上方加入 @FieldTransient</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//这是个栗了</div><div class=\"line\">public class SearchEntity extends BaseInput &#123;</div><div class=\"line\">    @FieldTransient</div><div class=\"line\">    private String searchName;</div><div class=\"line\">    public String get/set...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果其他引用对象里面也要加入记录和恢复(@FieldCache)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//父类同样回记录,回迭代最终Object</div><div class=\"line\">public class SearchEntity extends BaseInput &#123;</div><div class=\"line\">    @FieldTransient</div><div class=\"line\">    private String searchName;</div><div class=\"line\">    @FieldCache</div><div class=\"line\">    private Page page;</div><div class=\"line\">    public String getSearchName...</div><div class=\"line\">   public String getPage...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>说明<br>1.从菜单进入需要加参数,会执行清空已经记录查询条件(pagCatchClean) 如:<a href=\"http://xxx/xxx.do?pagCatchClean\">http://xxx/xxx.do?pagCatchClean</a></p>\n<p>2.默认情况下 post 的请求记录,get 请求清空,如果post 情况下 也好恢复记录不记录 加参数(pageRecover) 如:<a href=\"http://xxx/xxx.do?pageRecover\">http://xxx/xxx.do?pageRecover</a></p>\n<p>3.缓存默认使用的本地,如果需要系统是负载(非hash)模式,需要 实现SearchObjectCache.java接口,存放到共享存储中(redis,mongodb….),<br>SearchObjectCacheManager.java 缓存管理类实现好后 修改 其SearchObjectCache引用即可</p>\n<p>ObjectCache.java 第34行开始</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">    * 清空缓存标记</div><div class=\"line\">    * 在浏览器地址加入</div><div class=\"line\">    * http://xxx/xxx.do?pagCatchClean</div><div class=\"line\">    **/</div><div class=\"line\">   public static String pagCatchClean = &quot;pageCacheClean&quot;;</div><div class=\"line\">   public static String pagRecover = &quot;pageRecover&quot;;</div><div class=\"line\">   Logger logger = Logger.getLogger(ObjectCache.class.getName());</div><div class=\"line\">public void cacheManager(HttpServletRequest request, Object o) &#123;</div><div class=\"line\">       String sessionId = request.getSession().getId();</div><div class=\"line\">       String uri = request.getRequestURI();</div><div class=\"line\">       if (null == uri || uri.equals(&quot;&quot;)) &#123;</div><div class=\"line\">           return;</div><div class=\"line\">       &#125;</div><div class=\"line\">       if (uri.indexOf(&quot;?&quot;) &gt; 0) &#123;</div><div class=\"line\">           uri = uri.substring(0, uri.indexOf(&quot;?&quot;));</div><div class=\"line\">       &#125;</div><div class=\"line\">       String cacheKey = uri.concat(sessionId);</div><div class=\"line\">       boolean isClean = request.getParameter(pagCatchClean) == null ? false : true;</div><div class=\"line\">       //空清空缓存</div><div class=\"line\">       if (isClean) &#123;</div><div class=\"line\">           SearainbowCacheManager.del(cacheKey);</div><div class=\"line\">           logger.info(&quot;清空缓存 key==&gt; &quot; + cacheKey);</div><div class=\"line\">           return;</div><div class=\"line\">       &#125;</div><div class=\"line\">       //post 查询 存储查询条件</div><div class=\"line\">        if(request.getMethod().toUpperCase().equals(&quot;POST&quot;) &amp;&amp;  null == request.getParameter(pagRecover))&#123;</div><div class=\"line\">            cache(sessionId, uri, isClean, o);</div><div class=\"line\">        &#125;else &#123;</div><div class=\"line\">            //get 或是其他 还原查询条件</div><div class=\"line\">            recover(sessionId, uri, o);</div><div class=\"line\">        &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj028widn0000325ry5v8ty26","tag_id":"cj028wids0002325r7su5o8lm","_id":"cj028wie00007325rzr2q1ub5"},{"post_id":"cj028widx0005325rp2l2vanr","tag_id":"cj028wids0002325r7su5o8lm","_id":"cj028wie10008325rrgge0rot"},{"post_id":"cj028widq0001325rpr88fj0b","tag_id":"cj028wids0002325r7su5o8lm","_id":"cj028wie1000a325rcuynan9h"},{"post_id":"cj028widu0003325rbaua3ln2","tag_id":"cj028wids0002325r7su5o8lm","_id":"cj028wie2000c325rxplxzdh9"},{"post_id":"cj028widv0004325r6c4hav05","tag_id":"cj028wie1000b325rq1cvxx1k","_id":"cj028wie2000d325r24gt5udj"}],"Tag":[{"name":"java","_id":"cj028wids0002325r7su5o8lm"},{"name":"linux","_id":"cj028wie1000b325rq1cvxx1k"}]}}